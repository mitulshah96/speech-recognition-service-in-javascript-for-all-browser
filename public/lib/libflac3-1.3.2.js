// libflac.js - port of libflac to JavaScript using emscripten

var Flac = (function(global) {

var Module = Module || {};
var _flac_ready = false;
//in case resources are loaded asynchronously (e.g. *.mem file for minified version): setup "ready" handling
Module["_main"] = function(){
	_flac_ready = true;
	if(!_exported){
		//if _exported is not yet set, "pause" until initialization has run through
		setTimeout(function(){if(_exported.onready){_exported.onready();}}, 0);
	} else {
		if(_exported.onready){_exported.onready();}
	}
};

if(global && global.FLAC_SCRIPT_LOCATION){
	Module["memoryInitializerPrefixURL"] = global.FLAC_SCRIPT_LOCATION;
}

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;




  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 5824;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,5,128,0,0,15,128,0,0,10,0,0,0,27,128,0,0,30,0,0,0,20,0,0,0,17,128,0,0,51,128,0,0,54,0,0,0,60,0,0,0,57,128,0,0,40,0,0,0,45,128,0,0,39,128,0,0,34,0,0,0,99,128,0,0,102,0,0,0,108,0,0,0,105,128,0,0,120,0,0,0,125,128,0,0,119,128,0,0,114,0,0,0,80,0,0,0,85,128,0,0,95,128,0,0,90,0,0,0,75,128,0,0,78,0,0,0,68,0,0,0,65,128,0,0,195,128,0,0,198,0,0,0,204,0,0,0,201,128,0,0,216,0,0,0,221,128,0,0,215,128,0,0,210,0,0,0,240,0,0,0,245,128,0,0,255,128,0,0,250,0,0,0,235,128,0,0,238,0,0,0,228,0,0,0,225,128,0,0,160,0,0,0,165,128,0,0,175,128,0,0,170,0,0,0,187,128,0,0,190,0,0,0,180,0,0,0,177,128,0,0,147,128,0,0,150,0,0,0,156,0,0,0,153,128,0,0,136,0,0,0,141,128,0,0,135,128,0,0,130,0,0,0,131,129,0,0,134,1,0,0,140,1,0,0,137,129,0,0,152,1,0,0,157,129,0,0,151,129,0,0,146,1,0,0,176,1,0,0,181,129,0,0,191,129,0,0,186,1,0,0,171,129,0,0,174,1,0,0,164,1,0,0,161,129,0,0,224,1,0,0,229,129,0,0,239,129,0,0,234,1,0,0,251,129,0,0,254,1,0,0,244,1,0,0,241,129,0,0,211,129,0,0,214,1,0,0,220,1,0,0,217,129,0,0,200,1,0,0,205,129,0,0,199,129,0,0,194,1,0,0,64,1,0,0,69,129,0,0,79,129,0,0,74,1,0,0,91,129,0,0,94,1,0,0,84,1,0,0,81,129,0,0,115,129,0,0,118,1,0,0,124,1,0,0,121,129,0,0,104,1,0,0,109,129,0,0,103,129,0,0,98,1,0,0,35,129,0,0,38,1,0,0,44,1,0,0,41,129,0,0,56,1,0,0,61,129,0,0,55,129,0,0,50,1,0,0,16,1,0,0,21,129,0,0,31,129,0,0,26,1,0,0,11,129,0,0,14,1,0,0,4,1,0,0,1,129,0,0,3,131,0,0,6,3,0,0,12,3,0,0,9,131,0,0,24,3,0,0,29,131,0,0,23,131,0,0,18,3,0,0,48,3,0,0,53,131,0,0,63,131,0,0,58,3,0,0,43,131,0,0,46,3,0,0,36,3,0,0,33,131,0,0,96,3,0,0,101,131,0,0,111,131,0,0,106,3,0,0,123,131,0,0,126,3,0,0,116,3,0,0,113,131,0,0,83,131,0,0,86,3,0,0,92,3,0,0,89,131,0,0,72,3,0,0,77,131,0,0,71,131,0,0,66,3,0,0,192,3,0,0,197,131,0,0,207,131,0,0,202,3,0,0,219,131,0,0,222,3,0,0,212,3,0,0,209,131,0,0,243,131,0,0,246,3,0,0,252,3,0,0,249,131,0,0,232,3,0,0,237,131,0,0,231,131,0,0,226,3,0,0,163,131,0,0,166,3,0,0,172,3,0,0,169,131,0,0,184,3,0,0,189,131,0,0,183,131,0,0,178,3,0,0,144,3,0,0,149,131,0,0,159,131,0,0,154,3,0,0,139,131,0,0,142,3,0,0,132,3,0,0,129,131,0,0,128,2,0,0,133,130,0,0,143,130,0,0,138,2,0,0,155,130,0,0,158,2,0,0,148,2,0,0,145,130,0,0,179,130,0,0,182,2,0,0,188,2,0,0,185,130,0,0,168,2,0,0,173,130,0,0,167,130,0,0,162,2,0,0,227,130,0,0,230,2,0,0,236,2,0,0,233,130,0,0,248,2,0,0,253,130,0,0,247,130,0,0,242,2,0,0,208,2,0,0,213,130,0,0,223,130,0,0,218,2,0,0,203,130,0,0,206,2,0,0,196,2,0,0,193,130,0,0,67,130,0,0,70,2,0,0,76,2,0,0,73,130,0,0,88,2,0,0,93,130,0,0,87,130,0,0,82,2,0,0,112,2,0,0,117,130,0,0,127,130,0,0,122,2,0,0,107,130,0,0,110,2,0,0,100,2,0,0,97,130,0,0,32,2,0,0,37,130,0,0,47,130,0,0,42,2,0,0,59,130,0,0,62,2,0,0,52,2,0,0,49,130,0,0,19,130,0,0,22,2,0,0,28,2,0,0,25,130,0,0,8,2,0,0,13,130,0,0,7,130,0,0,2,2,0,0,67,97,76,102,20,0,0,0,36,0,0,0,96,0,0,0,110,0,0,0,0,4,0,0,23,8,0,0,32,0,0,0,7,0,0,0,24,0,0,0,254,63,0,0,14,0,0,0,3,0,0,0,8,0,0,0,15,0,0,0,31,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,16,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,65,14,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,65,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,65,14,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,14,0,0,1,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,14,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,65,14,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,77,14,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,77,14,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,106,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,6,0,0,192,6,0,0,192,6,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,9,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,196,18,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,13,0,0,0,188,14,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,14,9,28,27,18,21,56,63,54,49,36,35,42,45,112,119,126,121,108,107,98,101,72,79,70,65,84,83,90,93,224,231,238,233,252,251,242,245,216,223,214,209,196,195,202,205,144,151,158,153,140,139,130,133,168,175,166,161,180,179,186,189,199,192,201,206,219,220,213,210,255,248,241,246,227,228,237,234,183,176,185,190,171,172,165,162,143,136,129,134,147,148,157,154,39,32,41,46,59,60,53,50,31,24,17,22,3,4,13,10,87,80,89,94,75,76,69,66,111,104,97,102,115,116,125,122,137,142,135,128,149,146,155,156,177,182,191,184,173,170,163,164,249,254,247,240,229,226,235,236,193,198,207,200,221,218,211,212,105,110,103,96,117,114,123,124,81,86,95,88,77,74,67,68,25,30,23,16,5,2,11,12,33,38,47,40,61,58,51,52,78,73,64,71,82,85,92,91,118,113,120,127,106,109,100,99,62,57,48,55,34,37,44,43,6,1,8,15,26,29,20,19,174,169,160,167,178,181,188,187,150,145,152,159,138,141,132,131,222,217,208,215,194,197,204,203,230,225,232,239,250,253,244,243,102,76,97,67,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,32,108,101,97,100,45,105,110,32,108,101,110,103,116,104,32,111,102,32,97,116,32,108,101,97,115,116,32,50,32,115,101,99,111,110,100,115,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,108,101,97,100,45,105,110,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,116,114,97,99,107,32,40,116,104,101,32,108,101,97,100,45,111,117,116,41,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,32,108,101,97,100,45,111,117,116,32,116,114,97,99,107,32,110,117,109,98,101,114,32,49,55,48,32,40,48,120,65,65,41,0,99,117,101,32,115,104,101,101,116,32,109,97,121,32,110,111,116,32,104,97,118,101,32,97,32,116,114,97,99,107,32,110,117,109,98,101,114,32,48,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,49,45,57,57,32,111,114,32,49,55,48,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,108,101,97,100,45,111,117,116,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,105,110,100,101,120,32,112,111,105,110,116,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,39,115,32,102,105,114,115,116,32,105,110,100,101,120,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,48,32,111,114,32,49,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,105,110,100,101,120,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,105,110,100,101,120,32,110,117,109,98,101,114,115,32,109,117,115,116,32,105,110,99,114,101,97,115,101,32,98,121,32,49,0,77,73,77,69,32,116,121,112,101,32,115,116,114,105,110,103,32,109,117,115,116,32,99,111,110,116,97,105,110,32,111,110,108,121,32,112,114,105,110,116,97,98,108,101,32,65,83,67,73,73,32,99,104,97,114,97,99,116,101,114,115,32,40,48,120,50,48,45,48,120,55,101,41,0,100,101,115,99,114,105,112,116,105,111,110,32,115,116,114,105,110,103,32,109,117,115,116,32,98,101,32,118,97,108,105,100,32,85,84,70,45,56,0,114,101,102,101,114,101,110,99,101,32,108,105,98,70,76,65,67,32,49,46,51,46,50,32,50,48,49,55,48,49,48,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,68,51,98,97,114,116,108,101,116,116,0,98,97,114,116,108,101,116,116,95,104,97,110,110,0,98,108,97,99,107,109,97,110,0,98,108,97,99,107,109,97,110,95,104,97,114,114,105,115,95,52,116,101,114,109,95,57,50,100,98,0,99,111,110,110,101,115,0,102,108,97,116,116,111,112,0,103,97,117,115,115,40,0,104,97,109,109,105,110,103,0,104,97,110,110,0,107,97,105,115,101,114,95,98,101,115,115,101,108,0,110,117,116,116,97,108,108,0,114,101,99,116,97,110,103,108,101,0,116,114,105,97,110,103,108,101,0,116,117,107,101,121,40,0,112,97,114,116,105,97,108,95,116,117,107,101,121,40,0,112,117,110,99,104,111,117,116,95,116,117,107,101,121,40,0,119,101,108,99,104,0,116,117,107,101,121,40,53,101,45,49,41,0,116,117,107,101,121,40,53,101,45,49,41,59,112,97,114,116,105,97,108,95,116,117,107,101,121,40,50,41,0,116,117,107,101,121,40,53,101,45,49,41,59,112,97,114,116,105,97,108,95,116,117,107,101,121,40,50,41,59,112,117,110,99,104,111,117,116,95,116,117,107,101,121,40,51,41,0,105,109,97,103,101,47,112,110,103,0,45,45,62,0,105,110,102,105,110,105,116,121,0,110,97,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _UItoD=true;

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _llvm_ctlz_i32=true;

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _cos=Math_cos;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _BItoD=true;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_viiiiiii": invoke_viiiiiii, "jsCall_viiiiiii": jsCall_viiiiiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_iiiiiii": invoke_iiiiiii, "jsCall_iiiiiii": jsCall_iiiiiii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "_fabs": _fabs, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_exp": _exp, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___setErrNo": ___setErrNo, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fabsf": _fabsf, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_cos": _cos, "_pthread_self": _pthread_self, "_log": _log, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___lock": ___lock, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "_time": _time, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var jsCall_viiiiiii=env.jsCall_viiiiiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var jsCall_iiiiiii=env.jsCall_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var _fabs=env._fabs;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _exp=env._exp;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _cos=env._cos;
  var _pthread_self=env._pthread_self;
  var _log=env._log;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _time=env._time;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _FLAC__bitreader_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,40)|0);
 return ($0|0);
}
function _FLAC__bitreader_delete($br) {
 $br = $br|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FLAC__bitreader_free($br);
 _free($br);
 return;
}
function _FLAC__bitreader_free($br) {
 $br = $br|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$br>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _free($0);
 }
 $2 = ((($br)) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($br)) + 36|0);
 HEAP32[$3>>2] = 0;
 ;HEAP32[$br>>2]=0|0;HEAP32[$br+4>>2]=0|0;HEAP32[$br+8>>2]=0|0;HEAP32[$br+12>>2]=0|0;HEAP32[$br+16>>2]=0|0;HEAP32[$br+20>>2]=0|0;
 return;
}
function _FLAC__bitreader_init($br,$rcb,$cd) {
 $br = $br|0;
 $rcb = $rcb|0;
 $cd = $cd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 8|0);
 $1 = ((($br)) + 4|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 HEAP32[$1>>2] = 2048;
 $2 = (_malloc(8192)|0);
 HEAP32[$br>>2] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($br)) + 32|0);
 HEAP32[$4>>2] = $rcb;
 $5 = ((($br)) + 36|0);
 HEAP32[$5>>2] = $cd;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitreader_clear($br) {
 $br = $br|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 8|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return 1;
}
function _FLAC__bitreader_reset_read_crc16($br,$seed) {
 $br = $br|0;
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $seed&65535;
 $1 = ((($br)) + 24|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($br)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($br)) + 28|0);
 HEAP32[$4>>2] = $3;
 return;
}
function _FLAC__bitreader_get_read_crc16($br) {
 $br = $br|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($br)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$br>>2]|0;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($br)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if ($11) {
   $12 = ((($br)) + 24|0);
   $18 = $9;
   while(1) {
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 << 8;
    $15 = $14 & 65280;
    $16 = $13 >>> 8;
    $17 = (24 - ($18))|0;
    $19 = $7 >>> $17;
    $20 = $19 & 255;
    $21 = $16 ^ $20;
    $22 = (8 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $15 ^ $23;
    HEAP32[$12>>2] = $24;
    $25 = HEAP32[$8>>2]|0;
    $26 = (($25) + 8)|0;
    HEAP32[$8>>2] = $26;
    $27 = HEAP32[$0>>2]|0;
    $28 = ($26>>>0)<($27>>>0);
    if ($28) {
     $18 = $26;
    } else {
     break;
    }
   }
  }
 }
 $29 = ((($br)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30&65535;
 return ($31|0);
}
function _FLAC__bitreader_is_consumed_byte_aligned($br) {
 $br = $br|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 7;
 $3 = ($2|0)==(0);
 $4 = $3&1;
 return ($4|0);
}
function _FLAC__bitreader_bits_left_for_byte_alignment($br) {
 $br = $br|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 7;
 $3 = (8 - ($2))|0;
 return ($3|0);
}
function _FLAC__bitreader_get_input_bits_unconsumed($br) {
 $br = $br|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($br)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = $4 << 5;
 $6 = ((($br)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 3;
 $9 = (($5) + ($8))|0;
 $10 = ((($br)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 return ($12|0);
}
function _FLAC__bitreader_read_raw_uint32($br,$val,$bits) {
 $br = $br|0;
 $val = $val|0;
 $bits = $bits|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa32 = 0, $$lcssa34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits|0)==(0);
 if ($0) {
  HEAP32[$val>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ((($br)) + 8|0);
 $2 = ((($br)) + 16|0);
 $3 = ((($br)) + 12|0);
 $4 = ((($br)) + 20|0);
 while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($5) - ($6))|0;
  $8 = $7 << 5;
  $9 = HEAP32[$3>>2]|0;
  $10 = $9 << 3;
  $11 = (($8) + ($10))|0;
  $12 = HEAP32[$4>>2]|0;
  $13 = (($11) - ($12))|0;
  $14 = ($13>>>0)<($bits>>>0);
  if (!($14)) {
   $$lcssa = $5;$$lcssa32 = $6;$$lcssa34 = $12;
   break;
  }
  $15 = (_bitreader_read_from_client_($br)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = 0;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return ($$0|0);
 }
 $17 = ($$lcssa>>>0)>($$lcssa32>>>0);
 $18 = ($$lcssa34|0)!=(0);
 if (!($17)) {
  $51 = HEAP32[$br>>2]|0;
  $52 = (($51) + ($$lcssa32<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  if ($18) {
   $54 = -1 >>> $$lcssa34;
   $55 = $53 & $54;
   $56 = (32 - ($bits))|0;
   $57 = (($56) - ($$lcssa34))|0;
   $58 = $55 >>> $57;
   HEAP32[$val>>2] = $58;
   $59 = HEAP32[$4>>2]|0;
   $60 = (($59) + ($bits))|0;
   HEAP32[$4>>2] = $60;
   $$0 = 1;
   return ($$0|0);
  } else {
   $61 = (32 - ($bits))|0;
   $62 = $53 >>> $61;
   HEAP32[$val>>2] = $62;
   $63 = HEAP32[$4>>2]|0;
   $64 = (($63) + ($bits))|0;
   HEAP32[$4>>2] = $64;
   $$0 = 1;
   return ($$0|0);
  }
 }
 if (!($18)) {
  $43 = HEAP32[$br>>2]|0;
  $44 = (($43) + ($$lcssa32<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($bits>>>0)<(32);
  if ($46) {
   $47 = (32 - ($bits))|0;
   $48 = $45 >>> $47;
   HEAP32[$val>>2] = $48;
   HEAP32[$4>>2] = $bits;
   $$0 = 1;
   return ($$0|0);
  } else {
   HEAP32[$val>>2] = $45;
   _crc16_update_word_($br,$45);
   $49 = HEAP32[$2>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$2>>2] = $50;
   $$0 = 1;
   return ($$0|0);
  }
 }
 $19 = (32 - ($$lcssa34))|0;
 $20 = HEAP32[$br>>2]|0;
 $21 = (($20) + ($$lcssa32<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19>>>0)>($bits>>>0);
 $24 = -1 >>> $$lcssa34;
 $25 = $22 & $24;
 if ($23) {
  $26 = (($19) - ($bits))|0;
  $27 = $25 >>> $26;
  HEAP32[$val>>2] = $27;
  $28 = HEAP32[$4>>2]|0;
  $29 = (($28) + ($bits))|0;
  HEAP32[$4>>2] = $29;
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$val>>2] = $25;
 $30 = (($bits) - ($19))|0;
 _crc16_update_word_($br,$22);
 $31 = HEAP32[$2>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$2>>2] = $32;
 HEAP32[$4>>2] = 0;
 $33 = ($19|0)==($bits|0);
 if ($33) {
  $$0 = 1;
  return ($$0|0);
 }
 $34 = HEAP32[$val>>2]|0;
 $35 = $34 << $30;
 HEAP32[$val>>2] = $35;
 $36 = HEAP32[$2>>2]|0;
 $37 = HEAP32[$br>>2]|0;
 $38 = (($37) + ($36<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (32 - ($30))|0;
 $41 = $39 >>> $40;
 $42 = $41 | $35;
 HEAP32[$val>>2] = $42;
 HEAP32[$4>>2] = $30;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitreader_read_raw_int32($br,$val,$bits) {
 $br = $br|0;
 $val = $val|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $uval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uval = sp;
 $0 = (_FLAC__bitreader_read_raw_uint32($br,$uval,$bits)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($bits) + -1)|0;
 $3 = 1 << $2;
 $4 = HEAP32[$uval>>2]|0;
 $5 = $4 ^ $3;
 $6 = (($5) - ($3))|0;
 HEAP32[$val>>2] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_read_raw_uint64($br,$val,$bits) {
 $br = $br|0;
 $val = $val|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $hi = 0, $lo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hi = sp + 4|0;
 $lo = sp;
 $0 = ($bits>>>0)>(32);
 do {
  if ($0) {
   $1 = (($bits) + -32)|0;
   $2 = (_FLAC__bitreader_read_raw_uint32($br,$hi,$1)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $4 = (_FLAC__bitreader_read_raw_uint32($br,$lo,32)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = HEAP32[$hi>>2]|0;
    $7 = $val;
    $8 = $7;
    HEAP32[$8>>2] = 0;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $6;
    $11 = HEAP32[$lo>>2]|0;
    $17 = $11;$20 = $6;
    break;
   }
  } else {
   $12 = (_FLAC__bitreader_read_raw_uint32($br,$lo,$bits)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $14 = HEAP32[$lo>>2]|0;
    $17 = $14;$20 = 0;
    break;
   }
  }
 } while(0);
 $15 = $val;
 $16 = $15;
 HEAP32[$16>>2] = $17;
 $18 = (($15) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $20;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_read_uint32_little_endian($br,$val) {
 $br = $br|0;
 $val = $val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $x32 = 0, $x8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x8 = sp + 4|0;
 $x32 = sp;
 HEAP32[$x32>>2] = 0;
 $0 = (_FLAC__bitreader_read_raw_uint32($br,$x32,8)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_FLAC__bitreader_read_raw_uint32($br,$x8,8)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$x8>>2]|0;
 $5 = $4 << 8;
 $6 = HEAP32[$x32>>2]|0;
 $7 = $6 | $5;
 HEAP32[$x32>>2] = $7;
 $8 = (_FLAC__bitreader_read_raw_uint32($br,$x8,8)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$x8>>2]|0;
 $11 = $10 << 16;
 $12 = HEAP32[$x32>>2]|0;
 $13 = $12 | $11;
 HEAP32[$x32>>2] = $13;
 $14 = (_FLAC__bitreader_read_raw_uint32($br,$x8,8)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$x8>>2]|0;
 $17 = $16 << 24;
 $18 = HEAP32[$x32>>2]|0;
 $19 = $18 | $17;
 HEAP32[$x32>>2] = $19;
 HEAP32[$val>>2] = $19;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_skip_bits_no_crc($br,$bits) {
 $br = $br|0;
 $bits = $bits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ($bits|0)==(0);
 if (!($0)) {
  $1 = ((($br)) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 & 7;
  $4 = ($3|0)==(0);
  do {
   if ($4) {
    $$01 = $bits;
   } else {
    $5 = (8 - ($3))|0;
    $6 = ($5>>>0)<($bits>>>0);
    $7 = $6 ? $5 : $bits;
    $8 = (_FLAC__bitreader_read_raw_uint32($br,$x,$7)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $10 = (($bits) - ($7))|0;
     $$01 = $10;
     break;
    }
   }
  } while(0);
  $11 = $$01 >>> 3;
  $12 = ($11|0)==(0);
  do {
   if ($12) {
    $$1 = $$01;
   } else {
    $13 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($br,$11)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $15 = $$01 & 7;
     $$1 = $15;
     break;
    }
   }
  } while(0);
  $16 = ($$1|0)==(0);
  if (!($16)) {
   $17 = (_FLAC__bitreader_read_raw_uint32($br,$x,$$1)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_skip_byte_block_aligned_no_crc($br,$nvals) {
 $br = $br|0;
 $nvals = $nvals|0;
 var $$01 = 0, $$014 = 0, $$014$lcssa = 0, $$1$ph = 0, $$1$ph$lcssa = 0, $$210 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond13 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $cond13 = ($nvals|0)==(0);
 L1: do {
  if ($cond13) {
   $$01 = 1;
  } else {
   $0 = ((($br)) + 20|0);
   $$014 = $nvals;
   while(1) {
    $1 = HEAP32[$0>>2]|0;
    $2 = ($1|0)==(0);
    if ($2) {
     $$014$lcssa = $$014;
     break;
    }
    $5 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $$01 = 0;
     break L1;
    }
    $7 = (($$014) + -1)|0;
    $cond = ($7|0)==(0);
    if ($cond) {
     $$01 = 1;
     break L1;
    } else {
     $$014 = $7;
    }
   }
   $3 = ((($br)) + 16|0);
   $4 = ((($br)) + 8|0);
   $$1$ph = $$014$lcssa;
   L8: while(1) {
    $14 = ($$1$ph>>>0)>(3);
    while(1) {
     if (!($14)) {
      $$1$ph$lcssa = $$1$ph;
      break L8;
     }
     $9 = HEAP32[$3>>2]|0;
     $10 = HEAP32[$4>>2]|0;
     $11 = ($9>>>0)<($10>>>0);
     if ($11) {
      $$lcssa = $9;
      break;
     }
     $15 = (_bitreader_read_from_client_($br)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $$01 = 0;
      break L1;
     }
    }
    $12 = (($$lcssa) + 1)|0;
    HEAP32[$3>>2] = $12;
    $13 = (($$1$ph) + -4)|0;
    $$1$ph = $13;
   }
   $8 = ($$1$ph$lcssa|0)==(0);
   if ($8) {
    $$01 = 1;
   } else {
    $$210 = $$1$ph$lcssa;
    while(1) {
     $19 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
     $20 = ($19|0)==(0);
     $17 = (($$210) + -1)|0;
     if ($20) {
      $$01 = 0;
      break L1;
     }
     $18 = ($17|0)==(0);
     if ($18) {
      $$01 = 1;
      break;
     } else {
      $$210 = $17;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function _FLAC__bitreader_read_byte_block_aligned_no_crc($br,$val,$nvals) {
 $br = $br|0;
 $val = $val|0;
 $nvals = $nvals|0;
 var $$0 = 0, $$0121 = 0, $$0121$lcssa = 0, $$0220 = 0, $$0220$lcssa = 0, $$1$ph = 0, $$1$ph$lcssa = 0, $$13$ph = 0, $$13$ph$lcssa = 0, $$216 = 0, $$2415 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond19 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $cond19 = ($nvals|0)==(0);
 if ($cond19) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $0 = ((($br)) + 20|0);
 $$0121 = $nvals;$$0220 = $val;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $$0121$lcssa = $$0121;$$0220$lcssa = $$0220;
   label = 4;
   break;
  }
  $5 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
   label = 15;
   break;
  }
  $7 = HEAP32[$x>>2]|0;
  $8 = $7&255;
  $9 = ((($$0220)) + 1|0);
  HEAP8[$$0220>>0] = $8;
  $10 = (($$0121) + -1)|0;
  $cond = ($10|0)==(0);
  if ($cond) {
   $$0 = 1;
   label = 15;
   break;
  } else {
   $$0121 = $10;$$0220 = $9;
  }
 }
 if ((label|0) == 4) {
  $3 = ((($br)) + 16|0);
  $4 = ((($br)) + 8|0);
  $$1$ph = $$0121$lcssa;$$13$ph = $$0220$lcssa;
  L10: while(1) {
   $31 = ($$1$ph>>>0)>(3);
   while(1) {
    if (!($31)) {
     $$1$ph$lcssa = $$1$ph;$$13$ph$lcssa = $$13$ph;
     break L10;
    }
    $12 = HEAP32[$3>>2]|0;
    $13 = HEAP32[$4>>2]|0;
    $14 = ($12>>>0)<($13>>>0);
    if ($14) {
     $$lcssa = $12;
     break;
    }
    $32 = (_bitreader_read_from_client_($br)|0);
    $33 = ($32|0)==(0);
    if ($33) {
     $$0 = 0;
     label = 15;
     break L10;
    }
   }
   $15 = (($$lcssa) + 1)|0;
   HEAP32[$3>>2] = $15;
   $16 = HEAP32[$br>>2]|0;
   $17 = (($16) + ($$lcssa<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 >>> 24;
   $20 = $19&255;
   HEAP8[$$13$ph>>0] = $20;
   $21 = $18 >>> 16;
   $22 = $21&255;
   $23 = ((($$13$ph)) + 1|0);
   HEAP8[$23>>0] = $22;
   $24 = $18 >>> 8;
   $25 = $24&255;
   $26 = ((($$13$ph)) + 2|0);
   HEAP8[$26>>0] = $25;
   $27 = $18&255;
   $28 = ((($$13$ph)) + 3|0);
   HEAP8[$28>>0] = $27;
   $29 = ((($$13$ph)) + 4|0);
   $30 = (($$1$ph) + -4)|0;
   $$1$ph = $30;$$13$ph = $29;
  }
  if ((label|0) == 15) {
   STACKTOP = sp;return ($$0|0);
  }
  $11 = ($$1$ph$lcssa|0)==(0);
  if ($11) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$216 = $$1$ph$lcssa;$$2415 = $$13$ph$lcssa;
  }
  while(1) {
   $34 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = 0;
    label = 15;
    break;
   }
   $36 = HEAP32[$x>>2]|0;
   $37 = $36&255;
   $38 = ((($$2415)) + 1|0);
   HEAP8[$$2415>>0] = $37;
   $39 = (($$216) + -1)|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $$0 = 1;
    label = 15;
    break;
   } else {
    $$216 = $39;$$2415 = $38;
   }
  }
  if ((label|0) == 15) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitreader_read_unary_unsigned($br,$val) {
 $br = $br|0;
 $val = $val|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$val>>2] = 0;
 $0 = ((($br)) + 16|0);
 $1 = ((($br)) + 8|0);
 $2 = ((($br)) + 20|0);
 $3 = ((($br)) + 12|0);
 $4 = ((($br)) + 20|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $8 = HEAP32[$br>>2]|0;
   $9 = (($8) + ($5<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$2>>2]|0;
   $12 = $10 << $11;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $$lcssa13 = $12;
    label = 4;
    break;
   }
   $27 = (32 - ($11))|0;
   $28 = HEAP32[$val>>2]|0;
   $29 = (($27) + ($28))|0;
   HEAP32[$val>>2] = $29;
   $30 = HEAP32[$0>>2]|0;
   $31 = HEAP32[$br>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   _crc16_update_word_($br,$33);
   $34 = HEAP32[$0>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$0>>2] = $35;
   HEAP32[$2>>2] = 0;
   continue;
  }
  $36 = HEAP32[$3>>2]|0;
  $37 = $36 << 3;
  $38 = HEAP32[$4>>2]|0;
  $39 = ($37>>>0)>($38>>>0);
  if ($39) {
   $40 = HEAP32[$br>>2]|0;
   $41 = (($40) + ($5<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (32 - ($37))|0;
   $44 = -1 << $43;
   $45 = $42 & $44;
   $46 = $45 << $38;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $$lcssa = $46;
    label = 9;
    break;
   }
   $54 = (($37) - ($38))|0;
   $55 = HEAP32[$val>>2]|0;
   $56 = (($54) + ($55))|0;
   HEAP32[$val>>2] = $56;
   HEAP32[$4>>2] = $37;
  }
  $57 = (_bitreader_read_from_client_($br)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = (_FLAC__clz_uint32($$lcssa13)|0);
  $15 = HEAP32[$val>>2]|0;
  $16 = (($15) + ($14))|0;
  HEAP32[$val>>2] = $16;
  $17 = (($14) + 1)|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = (($17) + ($18))|0;
  HEAP32[$2>>2] = $19;
  $20 = ($19>>>0)>(31);
  if (!($20)) {
   $$0 = 1;
   return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = HEAP32[$br>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  _crc16_update_word_($br,$24);
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$0>>2] = $26;
  HEAP32[$2>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $48 = (_FLAC__clz_uint32($$lcssa)|0);
  $49 = HEAP32[$val>>2]|0;
  $50 = (($49) + ($48))|0;
  HEAP32[$val>>2] = $50;
  $51 = (($48) + 1)|0;
  $52 = HEAP32[$4>>2]|0;
  $53 = (($51) + ($52))|0;
  HEAP32[$4>>2] = $53;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitreader_read_rice_signed_block($br,$vals,$nvals,$parameter) {
 $br = $br|0;
 $vals = $vals|0;
 $nvals = $nvals|0;
 $parameter = $parameter|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa83 = 0, $$lcssa85 = 0, $$lcssa87 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0$ph = 0, $b$023 = 0, $b$1 = 0, $b$2 = 0, $cwords$0$lcssa = 0, $cwords$0$ph = 0, $cwords$021 = 0, $cwords$1 = 0;
 var $cwords$2 = 0, $cwords$3 = 0, $cwords$4 = 0, $lsbs = 0, $msbs = 0, $or$cond = 0, $or$cond1 = 0, $ucbits$0$lcssa = 0, $ucbits$0$ph = 0, $ucbits$022 = 0, $ucbits$1 = 0, $ucbits$2 = 0, $ucbits$3 = 0, $val$018 = 0, $val$1$ph = 0, $val$124 = 0, $val$124$lcssa = 0, $val$124$lcssa81 = 0, $val$2 = 0, $val$3 = 0;
 var $words$0$ph = 0, $x$0 = 0, $x$0$lcssa = 0, $x$1 = 0, $x$2 = 0, $x$3 = 0, $x$4 = 0, $y$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $lsbs = sp + 4|0;
 $msbs = sp;
 $0 = (($vals) + ($nvals<<2)|0);
 $1 = ($parameter|0)==(0);
 if ($1) {
  $2 = ($nvals|0)>(0);
  if ($2) {
   $val$018 = $vals;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $3 = (_FLAC__bitreader_read_unary_unsigned($br,$msbs)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
    label = 26;
    break;
   }
   $5 = HEAP32[$msbs>>2]|0;
   $6 = $5 >>> 1;
   $7 = $5 & 1;
   $8 = (0 - ($7))|0;
   $9 = $6 ^ $8;
   $10 = ((($val$018)) + 4|0);
   HEAP32[$val$018>>2] = $9;
   $11 = ($10>>>0)<($0>>>0);
   if ($11) {
    $val$018 = $10;
   } else {
    $$0 = 1;
    label = 26;
    break;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = ((($br)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($br)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)<($15>>>0);
 if ($16) {
  $17 = ((($br)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$br>>2]|0;
  $20 = (($19) + ($13<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 << $18;
  $$pn = $18;$b$0$ph = $22;$cwords$0$ph = $13;$val$1$ph = $vals;$words$0$ph = $15;
  label = 7;
 } else {
  $val$2 = $vals;$x$3 = 0;
  label = 18;
 }
 L14: while(1) {
  do {
   if ((label|0) == 7) {
    label = 0;
    $ucbits$0$ph = (32 - ($$pn))|0;
    $23 = ($val$1$ph>>>0)<($0>>>0);
    if (!($23)) {
     $cwords$0$lcssa = $cwords$0$ph;$ucbits$0$lcssa = $ucbits$0$ph;
     label = 23;
     break L14;
    }
    $24 = (32 - ($parameter))|0;
    $b$023 = $b$0$ph;$cwords$021 = $cwords$0$ph;$ucbits$022 = $ucbits$0$ph;$val$124 = $val$1$ph;
    L18: while(1) {
     $25 = (_FLAC__clz2_uint32($b$023)|0);
     $26 = ($25|0)==(32);
     if ($26) {
      $cwords$1 = $cwords$021;$x$0 = $ucbits$022;
      while(1) {
       $27 = (($cwords$1) + 1)|0;
       $28 = HEAP32[$br>>2]|0;
       $29 = (($28) + ($cwords$1<<2)|0);
       $30 = HEAP32[$29>>2]|0;
       _crc16_update_word_($br,$30);
       $31 = ($27>>>0)<($words$0$ph>>>0);
       if (!($31)) {
        $$lcssa = $27;$val$124$lcssa = $val$124;$x$0$lcssa = $x$0;
        label = 17;
        break L18;
       }
       $32 = HEAP32[$br>>2]|0;
       $33 = (($32) + ($27<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (_FLAC__clz2_uint32($34)|0);
       $36 = (($35) + ($x$0))|0;
       $37 = ($35|0)==(32);
       if ($37) {
        $cwords$1 = $27;$x$0 = $36;
       } else {
        $b$1 = $34;$cwords$2 = $27;$x$1 = $36;$y$0 = $35;
        break;
       }
      }
     } else {
      $b$1 = $b$023;$cwords$2 = $cwords$021;$x$1 = $25;$y$0 = $25;
     }
     $38 = $b$1 << $y$0;
     $39 = $38 << 1;
     $40 = (($ucbits$022) + 31)|0;
     $41 = (($40) - ($x$1))|0;
     $42 = $41 & 31;
     HEAP32[$msbs>>2] = $x$1;
     $43 = $39 >>> $24;
     $44 = ($42>>>0)<($parameter>>>0);
     if ($44) {
      $47 = (($cwords$2) + 1)|0;
      $48 = HEAP32[$br>>2]|0;
      $49 = (($48) + ($cwords$2<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      _crc16_update_word_($br,$50);
      $51 = ($47>>>0)<($words$0$ph>>>0);
      if (!($51)) {
       $$lcssa83 = $42;$$lcssa85 = $43;$$lcssa87 = $47;$val$124$lcssa81 = $val$124;
       label = 20;
       break;
      }
      $52 = HEAP32[$br>>2]|0;
      $53 = (($52) + ($47<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (($42) + ($24))|0;
      $56 = $54 >>> $55;
      $57 = $56 | $43;
      $58 = (32 - ($55))|0;
      $59 = $54 << $58;
      $b$2 = $59;$cwords$3 = $47;$ucbits$1 = $55;$x$2 = $57;
     } else {
      $45 = (($42) - ($parameter))|0;
      $46 = $39 << $parameter;
      $b$2 = $46;$cwords$3 = $cwords$2;$ucbits$1 = $45;$x$2 = $43;
     }
     HEAP32[$lsbs>>2] = $x$2;
     $60 = HEAP32[$msbs>>2]|0;
     $61 = $60 << $parameter;
     $62 = $61 | $x$2;
     $63 = $62 >>> 1;
     $64 = $62 & 1;
     $65 = (0 - ($64))|0;
     $66 = $63 ^ $65;
     $67 = ((($val$124)) + 4|0);
     HEAP32[$val$124>>2] = $66;
     $68 = ($67>>>0)<($0>>>0);
     if ($68) {
      $b$023 = $b$2;$cwords$021 = $cwords$3;$ucbits$022 = $ucbits$1;$val$124 = $67;
     } else {
      $cwords$0$lcssa = $cwords$3;$ucbits$0$lcssa = $ucbits$1;
      label = 23;
      break L14;
     }
    }
    if ((label|0) == 17) {
     label = 0;
     $69 = ((($br)) + 20|0);
     HEAP32[$69>>2] = 0;
     HEAP32[$12>>2] = $$lcssa;
     $val$2 = $val$124$lcssa;$x$3 = $x$0$lcssa;
     label = 18;
     continue L14;
    }
    else if ((label|0) == 20) {
     label = 0;
     $74 = ((($br)) + 20|0);
     HEAP32[$74>>2] = 0;
     HEAP32[$12>>2] = $$lcssa87;
     $ucbits$2 = $$lcssa83;$val$3 = $val$124$lcssa81;$x$4 = $$lcssa85;
     break;
    }
   }
   else if ((label|0) == 18) {
    label = 0;
    $70 = (_FLAC__bitreader_read_unary_unsigned($br,$msbs)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     $$0 = 0;
     label = 26;
     break L14;
    }
    $72 = HEAP32[$msbs>>2]|0;
    $73 = (($72) + ($x$3))|0;
    HEAP32[$msbs>>2] = $73;
    $ucbits$2 = 0;$val$3 = $val$2;$x$4 = 0;
   }
  } while(0);
  $75 = (($parameter) - ($ucbits$2))|0;
  $76 = (_FLAC__bitreader_read_raw_uint32($br,$lsbs,$75)|0);
  $77 = ($76|0)==(0);
  if ($77) {
   $$0 = 0;
   label = 26;
   break;
  }
  $78 = HEAP32[$lsbs>>2]|0;
  $79 = $78 | $x$4;
  HEAP32[$lsbs>>2] = $79;
  $80 = HEAP32[$msbs>>2]|0;
  $81 = $80 << $parameter;
  $82 = $81 | $79;
  $83 = $82 >>> 1;
  $84 = $82 & 1;
  $85 = (0 - ($84))|0;
  $86 = $83 ^ $85;
  $87 = ((($val$3)) + 4|0);
  HEAP32[$val$3>>2] = $86;
  $88 = HEAP32[$12>>2]|0;
  $89 = HEAP32[$14>>2]|0;
  $90 = ((($br)) + 20|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[$br>>2]|0;
  $93 = (($92) + ($88<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 << $91;
  $96 = ($88>>>0)>=($89>>>0);
  $97 = ($87>>>0)<($0>>>0);
  $or$cond = $97 & $96;
  if ($or$cond) {
   $val$2 = $87;$x$3 = 0;
   label = 18;
  } else {
   $$pn = $91;$b$0$ph = $95;$cwords$0$ph = $88;$val$1$ph = $87;$words$0$ph = $89;
   label = 7;
  }
 }
 if ((label|0) == 23) {
  $98 = ($ucbits$0$lcssa|0)==(0);
  $99 = ($cwords$0$lcssa>>>0)<($words$0$ph>>>0);
  $or$cond1 = $99 & $98;
  if ($or$cond1) {
   $100 = (($cwords$0$lcssa) + 1)|0;
   $101 = HEAP32[$br>>2]|0;
   $102 = (($101) + ($cwords$0$lcssa<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   _crc16_update_word_($br,$103);
   $cwords$4 = $100;$ucbits$3 = 32;
  } else {
   $cwords$4 = $cwords$0$lcssa;$ucbits$3 = $ucbits$0$lcssa;
  }
  $104 = (32 - ($ucbits$3))|0;
  $105 = ((($br)) + 20|0);
  HEAP32[$105>>2] = $104;
  HEAP32[$12>>2] = $cwords$4;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitreader_read_utf8_uint32($br,$val,$raw,$rawlen) {
 $br = $br|0;
 $val = $val|0;
 $raw = $raw|0;
 $rawlen = $rawlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$015 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $v$0$lcssa = 0, $v$014 = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($raw|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$x>>2]|0;
  $4 = $3&255;
  $5 = HEAP32[$rawlen>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$rawlen>>2] = $6;
  $7 = (($raw) + ($5)|0);
  HEAP8[$7>>0] = $4;
 }
 $8 = HEAP32[$x>>2]|0;
 $9 = $8 & 128;
 $10 = ($9|0)==(0);
 L7: do {
  if ($10) {
   $v$0$lcssa = $8;
  } else {
   $11 = $8 & 192;
   $12 = ($11|0)!=(0);
   $13 = $8 & 32;
   $14 = ($13|0)==(0);
   $or$cond = $12 & $14;
   do {
    if ($or$cond) {
     $15 = $8 & 31;
     $i$015 = 1;$v$014 = $15;
    } else {
     $16 = $8 & 224;
     $17 = ($16|0)!=(0);
     $18 = $8 & 16;
     $19 = ($18|0)==(0);
     $or$cond3 = $17 & $19;
     if ($or$cond3) {
      $20 = $8 & 15;
      $i$015 = 2;$v$014 = $20;
      break;
     }
     $21 = $8 & 240;
     $22 = ($21|0)!=(0);
     $23 = $8 & 8;
     $24 = ($23|0)==(0);
     $or$cond5 = $22 & $24;
     if ($or$cond5) {
      $25 = $8 & 7;
      $i$015 = 3;$v$014 = $25;
      break;
     }
     $26 = $8 & 248;
     $27 = ($26|0)!=(0);
     $28 = $8 & 4;
     $29 = ($28|0)==(0);
     $or$cond7 = $27 & $29;
     if ($or$cond7) {
      $30 = $8 & 3;
      $i$015 = 4;$v$014 = $30;
      break;
     }
     $31 = $8 & 252;
     $32 = ($31|0)!=(0);
     $33 = $8 & 2;
     $34 = ($33|0)==(0);
     $or$cond9 = $32 & $34;
     if ($or$cond9) {
      $35 = $8 & 1;
      $i$015 = 5;$v$014 = $35;
      break;
     }
     HEAP32[$val>>2] = -1;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   while(1) {
    $36 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     $$0 = 0;
     label = 23;
     break;
    }
    if ($2) {
     $38 = HEAP32[$x>>2]|0;
     $39 = $38&255;
     $40 = HEAP32[$rawlen>>2]|0;
     $41 = (($40) + 1)|0;
     HEAP32[$rawlen>>2] = $41;
     $42 = (($raw) + ($40)|0);
     HEAP8[$42>>0] = $39;
    }
    $43 = HEAP32[$x>>2]|0;
    $44 = $43 & 192;
    $45 = ($44|0)==(128);
    if (!($45)) {
     break;
    }
    $46 = $v$014 << 6;
    $47 = $43 & 63;
    $48 = $47 | $46;
    $49 = (($i$015) + -1)|0;
    $50 = ($49|0)==(0);
    if ($50) {
     $v$0$lcssa = $48;
     break L7;
    } else {
     $i$015 = $49;$v$014 = $48;
    }
   }
   if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$val>>2] = -1;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$val>>2] = $v$0$lcssa;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitreader_read_utf8_uint64($br,$val,$raw,$rawlen) {
 $br = $br|0;
 $val = $val|0;
 $raw = $raw|0;
 $rawlen = $rawlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i$017 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($raw|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$x>>2]|0;
  $4 = $3&255;
  $5 = HEAP32[$rawlen>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$rawlen>>2] = $6;
  $7 = (($raw) + ($5)|0);
  HEAP8[$7>>0] = $4;
 }
 $8 = HEAP32[$x>>2]|0;
 $9 = $8 & 128;
 $10 = ($9|0)==(0);
 L7: do {
  if ($10) {
   $68 = $8;$71 = 0;
  } else {
   $11 = $8 & 192;
   $12 = ($11|0)!=(0);
   $13 = $8 & 32;
   $14 = ($13|0)==(0);
   $or$cond = $12 & $14;
   do {
    if ($or$cond) {
     $15 = $8 & 31;
     $58 = $15;$59 = 0;$i$017 = 1;
    } else {
     $16 = $8 & 224;
     $17 = ($16|0)!=(0);
     $18 = $8 & 16;
     $19 = ($18|0)==(0);
     $or$cond3 = $17 & $19;
     if ($or$cond3) {
      $20 = $8 & 15;
      $58 = $20;$59 = 0;$i$017 = 2;
      break;
     }
     $21 = $8 & 240;
     $22 = ($21|0)!=(0);
     $23 = $8 & 8;
     $24 = ($23|0)==(0);
     $or$cond5 = $22 & $24;
     if ($or$cond5) {
      $25 = $8 & 7;
      $58 = $25;$59 = 0;$i$017 = 3;
      break;
     }
     $26 = $8 & 248;
     $27 = ($26|0)!=(0);
     $28 = $8 & 4;
     $29 = ($28|0)==(0);
     $or$cond7 = $27 & $29;
     if ($or$cond7) {
      $30 = $8 & 3;
      $58 = $30;$59 = 0;$i$017 = 4;
      break;
     }
     $31 = $8 & 252;
     $32 = ($31|0)!=(0);
     $33 = $8 & 2;
     $34 = ($33|0)==(0);
     $or$cond9 = $32 & $34;
     if ($or$cond9) {
      $35 = $8 & 1;
      $58 = $35;$59 = 0;$i$017 = 5;
      break;
     }
     $36 = $8 & 254;
     $37 = ($36|0)!=(0);
     $38 = $8 & 1;
     $39 = ($38|0)==(0);
     $or$cond11 = $37 & $39;
     if ($or$cond11) {
      $58 = 0;$59 = 0;$i$017 = 6;
     } else {
      $40 = $val;
      $41 = $40;
      HEAP32[$41>>2] = -1;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = -1;
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   while(1) {
    $44 = (_FLAC__bitreader_read_raw_uint32($br,$x,8)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $$0 = 0;
     label = 25;
     break;
    }
    if ($2) {
     $46 = HEAP32[$x>>2]|0;
     $47 = $46&255;
     $48 = HEAP32[$rawlen>>2]|0;
     $49 = (($48) + 1)|0;
     HEAP32[$rawlen>>2] = $49;
     $50 = (($raw) + ($48)|0);
     HEAP8[$50>>0] = $47;
    }
    $51 = HEAP32[$x>>2]|0;
    $52 = $51 & 192;
    $53 = ($52|0)==(128);
    if (!($53)) {
     break;
    }
    $60 = (_bitshift64Shl(($58|0),($59|0),6)|0);
    $61 = tempRet0;
    $62 = $51 & 63;
    $63 = $62 | $60;
    $64 = (($i$017) + -1)|0;
    $65 = ($64|0)==(0);
    if ($65) {
     $68 = $63;$71 = $61;
     break L7;
    } else {
     $58 = $63;$59 = $61;$i$017 = $64;
    }
   }
   if ((label|0) == 25) {
    STACKTOP = sp;return ($$0|0);
   }
   $54 = $val;
   $55 = $54;
   HEAP32[$55>>2] = -1;
   $56 = (($54) + 4)|0;
   $57 = $56;
   HEAP32[$57>>2] = -1;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $66 = $val;
 $67 = $66;
 HEAP32[$67>>2] = $68;
 $69 = (($66) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $71;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _bitreader_read_from_client_($br) {
 $br = $br|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $exitcond = 0, $start$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bytes = sp;
 $0 = ((($br)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($br)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($br)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  $8 = $7&1;
  $9 = HEAP32[$br>>2]|0;
  $10 = (($9) + ($1<<2)|0);
  $11 = (($4) - ($1))|0;
  $12 = (($11) + ($8))|0;
  $13 = $12 << 2;
  _memmove(($9|0),($10|0),($13|0))|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = (($14) - ($1))|0;
  HEAP32[$3>>2] = $15;
  HEAP32[$0>>2] = 0;
 }
 $16 = ((($br)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($br)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = $20 << 2;
 $22 = ((($br)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) - ($23))|0;
 HEAP32[$bytes>>2] = $24;
 $25 = ($21|0)==($23|0);
 if ($25) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = HEAP32[$br>>2]|0;
 $27 = HEAP32[$18>>2]|0;
 $28 = (($26) + ($27<<2)|0);
 $29 = HEAP32[$22>>2]|0;
 $30 = (($28) + ($29)|0);
 $31 = ($29|0)==(0);
 if (!($31)) {
  $32 = HEAP32[$28>>2]|0;
  $33 = (_llvm_bswap_i32(($32|0))|0);
  HEAP32[$28>>2] = $33;
 }
 $34 = ((($br)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($br)) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_iiii[$35 & 31]($30,$bytes,$37)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$18>>2]|0;
 $41 = $40 << 2;
 $42 = HEAP32[$22>>2]|0;
 $43 = HEAP32[$bytes>>2]|0;
 $44 = (($42) + 3)|0;
 $45 = (($44) + ($41))|0;
 $46 = (($45) + ($43))|0;
 $47 = $46 >>> 2;
 $48 = ($40>>>0)<($47>>>0);
 if ($48) {
  $49 = HEAP32[$br>>2]|0;
  $50 = (($42) + ($43))|0;
  $51 = $40 << 2;
  $52 = (($50) + ($51))|0;
  $53 = (($52) + 3)|0;
  $54 = $53 >>> 2;
  $start$01 = $40;
  while(1) {
   $55 = (($49) + ($start$01<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_llvm_bswap_i32(($56|0))|0);
   HEAP32[$55>>2] = $57;
   $58 = (($start$01) + 1)|0;
   $exitcond = ($58|0)==($54|0);
   if ($exitcond) {
    break;
   } else {
    $start$01 = $58;
   }
  }
 }
 $59 = HEAP32[$18>>2]|0;
 $60 = $59 << 2;
 $61 = HEAP32[$22>>2]|0;
 $62 = (($60) + ($61))|0;
 $63 = HEAP32[$bytes>>2]|0;
 $64 = (($62) + ($63))|0;
 $65 = $64 >>> 2;
 HEAP32[$18>>2] = $65;
 $66 = $64 & 3;
 HEAP32[$22>>2] = $66;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _crc16_update_word_($br,$word) {
 $br = $br|0;
 $word = $word|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc$0 = 0, $crc$1 = 0;
 var $crc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($br)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($br)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  $4 = $1 << 8;
  $5 = $4 & 65280;
  $6 = $1 >>> 8;
  $7 = $word >>> 24;
  $8 = $6 ^ $7;
  $9 = (8 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 ^ $5;
  $crc$0 = $11;
  label = 3;
  break;
 }
 case 8:  {
  $crc$0 = $1;
  label = 3;
  break;
 }
 case 16:  {
  $crc$1 = $1;
  label = 4;
  break;
 }
 case 24:  {
  $crc$2 = $1;
  break;
 }
 default: {
  HEAP32[$2>>2] = 0;
  return;
 }
 }
 if ((label|0) == 3) {
  $12 = $crc$0 << 8;
  $13 = $12 & 65280;
  $14 = $crc$0 >>> 8;
  $15 = $word >>> 16;
  $16 = $15 & 255;
  $17 = $14 ^ $16;
  $18 = (8 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $13 ^ $19;
  $crc$1 = $20;
  label = 4;
 }
 if ((label|0) == 4) {
  $21 = $crc$1 << 8;
  $22 = $21 & 65280;
  $23 = $crc$1 >>> 8;
  $24 = $word >>> 8;
  $25 = $24 & 255;
  $26 = $23 ^ $25;
  $27 = (8 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $22 ^ $28;
  $crc$2 = $29;
 }
 $30 = $crc$2 << 8;
 $31 = $30 & 65280;
 $32 = $crc$2 >>> 8;
 $33 = $word & 255;
 $34 = $32 ^ $33;
 $35 = (8 + ($34<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $31 ^ $36;
 HEAP32[$0>>2] = $37;
 HEAP32[$2>>2] = 0;
 return;
}
function _FLAC__clz_uint32($v) {
 $v = $v|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Math_clz32(($v|0))|0);
 return ($0|0);
}
function _FLAC__clz2_uint32($v) {
 $v = $v|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v|0)==(0);
 if ($0) {
  $$0 = 32;
 } else {
  $1 = (_FLAC__clz_uint32($v)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _FLAC__bitwriter_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,20)|0);
 return ($0|0);
}
function _FLAC__bitwriter_delete($bw) {
 $bw = $bw|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FLAC__bitwriter_free($bw);
 _free($bw);
 return;
}
function _FLAC__bitwriter_free($bw) {
 $bw = $bw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$bw>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _free($0);
 }
 HEAP32[$bw>>2] = 0;
 $2 = ((($bw)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($bw)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($bw)) + 12|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _FLAC__bitwriter_init($bw) {
 $bw = $bw|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bw)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($bw)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($bw)) + 8|0);
 HEAP32[$2>>2] = 8192;
 $3 = (_malloc(32768)|0);
 HEAP32[$bw>>2] = $3;
 $not$ = ($3|0)!=(0|0);
 $$ = $not$&1;
 return ($$|0);
}
function _FLAC__bitwriter_clear($bw) {
 $bw = $bw|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bw)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($bw)) + 12|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _FLAC__bitwriter_get_write_crc16($bw,$crc) {
 $bw = $bw|0;
 $crc = $crc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buffer = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buffer = sp + 4|0;
 $bytes = sp;
 $0 = (_FLAC__bitwriter_get_buffer($bw,$buffer,$bytes)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$buffer>>2]|0;
 $3 = HEAP32[$bytes>>2]|0;
 $4 = (_FLAC__crc16($2,$3)|0);
 $5 = $4&65535;
 HEAP16[$crc>>1] = $5;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitwriter_get_buffer($bw,$buffer,$bytes) {
 $bw = $bw|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bw)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 7;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($bw)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($bw)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if ($9) {
   $10 = (_bitwriter_grow_($bw,32)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $12 = ((($bw)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (32 - ($14))|0;
  $16 = $13 << $15;
  $17 = (_llvm_bswap_i32(($16|0))|0);
  $18 = HEAP32[$5>>2]|0;
  $19 = HEAP32[$bw>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  HEAP32[$20>>2] = $17;
 }
 $21 = HEAP32[$bw>>2]|0;
 HEAP32[$buffer>>2] = $21;
 $22 = ((($bw)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 << 2;
 $25 = HEAP32[$0>>2]|0;
 $26 = $25 >>> 3;
 $27 = (($26) + ($24))|0;
 HEAP32[$bytes>>2] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitwriter_release_buffer($bw) {
 $bw = $bw|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FLAC__bitwriter_get_write_crc8($bw,$crc) {
 $bw = $bw|0;
 $crc = $crc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buffer = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buffer = sp + 4|0;
 $bytes = sp;
 $0 = (_FLAC__bitwriter_get_buffer($bw,$buffer,$bytes)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$buffer>>2]|0;
 $3 = HEAP32[$bytes>>2]|0;
 $4 = (_FLAC__crc8($2,$3)|0);
 HEAP8[$crc>>0] = $4;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__bitwriter_write_zeroes($bw,$bits) {
 $bw = $bw|0;
 $bits = $bits|0;
 var $$0 = 0, $$01$lcssa = 0, $$01$ph = 0, $$012 = 0, $$bits = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits|0)==(0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ((($bw)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($bw)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($bits))|0;
 $6 = ($2>>>0)>($5>>>0);
 if (!($6)) {
  $7 = (_bitwriter_grow_($bw,$bits)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $9 = ((($bw)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $$01$ph = $bits;
  } else {
   $12 = (32 - ($10))|0;
   $13 = ($12>>>0)<($bits>>>0);
   $$bits = $13 ? $12 : $bits;
   $14 = ((($bw)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 << $$bits;
   HEAP32[$14>>2] = $16;
   $17 = HEAP32[$9>>2]|0;
   $18 = (($17) + ($$bits))|0;
   HEAP32[$9>>2] = $18;
   $19 = ($18|0)==(32);
   if ($19) {
    $20 = (($bits) - ($$bits))|0;
    $21 = HEAP32[$14>>2]|0;
    $22 = (_llvm_bswap_i32(($21|0))|0);
    $23 = HEAP32[$3>>2]|0;
    $24 = (($23) + 1)|0;
    HEAP32[$3>>2] = $24;
    $25 = HEAP32[$bw>>2]|0;
    $26 = (($25) + ($23<<2)|0);
    HEAP32[$26>>2] = $22;
    HEAP32[$9>>2] = 0;
    $$01$ph = $20;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 $27 = ($$01$ph>>>0)>(31);
 if ($27) {
  $28 = HEAP32[$bw>>2]|0;
  $$012 = $$01$ph;
  while(1) {
   $29 = HEAP32[$3>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$3>>2] = $30;
   $31 = (($28) + ($29<<2)|0);
   HEAP32[$31>>2] = 0;
   $32 = (($$012) + -32)|0;
   $33 = ($32>>>0)>(31);
   if ($33) {
    $$012 = $32;
   } else {
    break;
   }
  }
  $34 = $$01$ph & 31;
  $$01$lcssa = $34;
 } else {
  $$01$lcssa = $$01$ph;
 }
 $35 = ($$01$lcssa|0)==(0);
 if ($35) {
  $$0 = 1;
  return ($$0|0);
 }
 $36 = ((($bw)) + 4|0);
 HEAP32[$36>>2] = 0;
 HEAP32[$9>>2] = $$01$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_uint32($bw,$val,$bits) {
 $bw = $bw|0;
 $val = $val|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(31);
 $1 = $val >>> $bits;
 $2 = ($1|0)==(0);
 $or$cond = $0 | $2;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$val,$bits)|0);
 $$0 = $3;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_int32($bw,$val,$bits) {
 $bw = $bw|0;
 $val = $val|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)<(32);
 if ($0) {
  $1 = -1 << $bits;
  $2 = $1 ^ -1;
  $3 = $2 & $val;
  $$0 = $3;
 } else {
  $$0 = $val;
 }
 $4 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$$0,$bits)|0);
 return ($4|0);
}
function _FLAC__bitwriter_write_raw_uint64($bw,$0,$1,$bits) {
 $bw = $bw|0;
 $0 = $0|0;
 $1 = $1|0;
 $bits = $bits|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($bits>>>0)>(32);
 if (!($2)) {
  $10 = (_FLAC__bitwriter_write_raw_uint32($bw,$0,$bits)|0);
  $$0 = $10;
  return ($$0|0);
 }
 $3 = (($bits) + -32)|0;
 $4 = (_FLAC__bitwriter_write_raw_uint32($bw,$1,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = 0;
 } else {
  $6 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$0,32)|0);
  $7 = ($6|0)!=(0);
  $9 = $7;
 }
 $8 = $9&1;
 $$0 = $8;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_uint32_little_endian($bw,$val) {
 $bw = $bw|0;
 $val = $val|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $val & 255;
 $1 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$0,8)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = $val >>> 8;
 $4 = $3 & 255;
 $5 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$4,8)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = $val >>> 16;
 $8 = $7 & 255;
 $9 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$8,8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = $val >>> 24;
 $12 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$11,8)|0);
 $not$ = ($12|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _FLAC__bitwriter_write_byte_block($bw,$vals,$nvals) {
 $bw = $bw|0;
 $vals = $vals|0;
 $nvals = $nvals|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nvals|0)==(0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $3 = (($vals) + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$5,8)|0);
  $7 = ($6|0)==(0);
  $1 = (($i$01) + 1)|0;
  if ($7) {
   $$0 = 0;
   label = 4;
   break;
  }
  $2 = ($1>>>0)<($nvals>>>0);
  if ($2) {
   $i$01 = $1;
  } else {
   $$0 = 1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_unary_unsigned($bw,$val) {
 $bw = $bw|0;
 $val = $val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val>>>0)<(32);
 if ($0) {
  $1 = (($val) + 1)|0;
  $2 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,1,$1)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = (_FLAC__bitwriter_write_zeroes($bw,$val)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = 0;
 } else {
  $5 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,1,1)|0);
  $6 = ($5|0)!=(0);
  $8 = $6;
 }
 $7 = $8&1;
 $$0 = $7;
 return ($$0|0);
}
function _FLAC__bitwriter_write_rice_signed_block($bw,$vals,$nvals,$parameter) {
 $bw = $bw|0;
 $vals = $vals|0;
 $nvals = $nvals|0;
 $parameter = $parameter|0;
 var $$0 = 0, $$015 = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $msbits$0$lcssa = 0, $msbits$0$ph = 0, $msbits$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = -1 << $parameter;
 $1 = (31 - ($parameter))|0;
 $2 = -1 >>> $1;
 $3 = (($parameter) + 1)|0;
 $4 = ($nvals|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($bw)) + 16|0);
 $6 = ((($bw)) + 8|0);
 $7 = ((($bw)) + 12|0);
 $8 = ((($bw)) + 4|0);
 $9 = ((($bw)) + 4|0);
 $10 = ((($bw)) + 4|0);
 $11 = ((($bw)) + 4|0);
 $$015 = $vals;$$024 = $nvals;
 L4: while(1) {
  $12 = HEAP32[$$015>>2]|0;
  $13 = $12 << 1;
  $14 = $12 >> 31;
  $15 = $13 ^ $14;
  $16 = $15 >>> $parameter;
  $17 = (($16) + ($3))|0;
  $18 = HEAP32[$5>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 6;
  } else {
   $20 = (($17) + ($18))|0;
   $21 = ($20>>>0)<(32);
   if ($21) {
    HEAP32[$5>>2] = $20;
    $22 = $15 | $0;
    $23 = $22 & $2;
    $24 = HEAP32[$11>>2]|0;
    $25 = $24 << $17;
    $26 = $25 | $23;
    HEAP32[$11>>2] = $26;
   } else {
    label = 6;
   }
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $27 = HEAP32[$6>>2]|0;
    $28 = HEAP32[$7>>2]|0;
    $29 = HEAP32[$5>>2]|0;
    $30 = (($16) + 1)|0;
    $31 = (($30) + ($28))|0;
    $32 = (($31) + ($29))|0;
    $33 = ($27>>>0)>($32>>>0);
    if (!($33)) {
     $34 = (_bitwriter_grow_($bw,$17)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $$0 = 0;
      label = 23;
      break L4;
     }
    }
    $36 = ($16|0)==(0);
    L14: do {
     if (!($36)) {
      $37 = HEAP32[$5>>2]|0;
      $38 = ($37|0)==(0);
      do {
       if ($38) {
        $msbits$0$ph = $16;
       } else {
        $39 = (32 - ($37))|0;
        $40 = ($16>>>0)<($39>>>0);
        $41 = HEAP32[$9>>2]|0;
        if ($40) {
         $42 = $41 << $16;
         HEAP32[$9>>2] = $42;
         $43 = HEAP32[$5>>2]|0;
         $44 = (($43) + ($16))|0;
         HEAP32[$5>>2] = $44;
         break L14;
        } else {
         $45 = $41 << $39;
         HEAP32[$9>>2] = $45;
         $46 = (($16) - ($39))|0;
         $47 = (_llvm_bswap_i32(($45|0))|0);
         $48 = HEAP32[$7>>2]|0;
         $49 = (($48) + 1)|0;
         HEAP32[$7>>2] = $49;
         $50 = HEAP32[$bw>>2]|0;
         $51 = (($50) + ($48<<2)|0);
         HEAP32[$51>>2] = $47;
         HEAP32[$5>>2] = 0;
         $msbits$0$ph = $46;
         break;
        }
       }
      } while(0);
      $52 = ($msbits$0$ph>>>0)>(31);
      if ($52) {
       $53 = HEAP32[$bw>>2]|0;
       $msbits$03 = $msbits$0$ph;
       while(1) {
        $54 = HEAP32[$7>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[$7>>2] = $55;
        $56 = (($53) + ($54<<2)|0);
        HEAP32[$56>>2] = 0;
        $57 = (($msbits$03) + -32)|0;
        $58 = ($57>>>0)>(31);
        if ($58) {
         $msbits$03 = $57;
        } else {
         break;
        }
       }
       $59 = $msbits$0$ph & 31;
       $msbits$0$lcssa = $59;
      } else {
       $msbits$0$lcssa = $msbits$0$ph;
      }
      $60 = ($msbits$0$lcssa|0)==(0);
      if (!($60)) {
       HEAP32[$10>>2] = 0;
       HEAP32[$5>>2] = $msbits$0$lcssa;
      }
     }
    } while(0);
    $61 = $15 | $0;
    $62 = $61 & $2;
    $63 = HEAP32[$5>>2]|0;
    $64 = (32 - ($63))|0;
    $65 = ($3>>>0)<($64>>>0);
    $66 = HEAP32[$8>>2]|0;
    if ($65) {
     $67 = $66 << $3;
     $68 = $67 | $62;
     HEAP32[$8>>2] = $68;
     $69 = HEAP32[$5>>2]|0;
     $70 = (($69) + ($3))|0;
     HEAP32[$5>>2] = $70;
     break;
    } else {
     $71 = $66 << $64;
     HEAP32[$8>>2] = $71;
     $72 = (($3) - ($64))|0;
     HEAP32[$5>>2] = $72;
     $73 = $62 >>> $72;
     $74 = HEAP32[$8>>2]|0;
     $75 = $74 | $73;
     $76 = $75 >>> 24;
     $77 = $75 >>> 8;
     $78 = $77 & 65280;
     $79 = $75 << 8;
     $80 = $79 & 16711680;
     $81 = $75 << 24;
     $82 = $81 | $76;
     $83 = $82 | $78;
     $84 = $83 | $80;
     $85 = HEAP32[$7>>2]|0;
     $86 = (($85) + 1)|0;
     HEAP32[$7>>2] = $86;
     $87 = HEAP32[$bw>>2]|0;
     $88 = (($87) + ($85<<2)|0);
     HEAP32[$88>>2] = $84;
     HEAP32[$8>>2] = $62;
     break;
    }
   }
  } while(0);
  $89 = ((($$015)) + 4|0);
  $90 = (($$024) + -1)|0;
  $91 = ($90|0)==(0);
  if ($91) {
   $$0 = 1;
   label = 23;
   break;
  } else {
   $$015 = $89;$$024 = $90;
  }
 }
 if ((label|0) == 23) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_utf8_uint32($bw,$val) {
 $bw = $bw|0;
 $val = $val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($val>>>0)<(128);
 if ($1) {
  $2 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$val,8)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = ($val>>>0)<(2048);
 if ($3) {
  $4 = $val >>> 6;
  $5 = $4 | 192;
  $6 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$5,8)|0);
  $7 = $6 & 1;
  $8 = $val & 63;
  $9 = $8 | 128;
  $10 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$9,8)|0);
  $11 = $7 & $10;
  $$0 = $11;
  return ($$0|0);
 }
 $12 = ($val>>>0)<(65536);
 if ($12) {
  $13 = $val >>> 12;
  $14 = $13 | 224;
  $15 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$14,8)|0);
  $16 = $15 & 1;
  $17 = $val >>> 6;
  $18 = $17 & 63;
  $19 = $18 | 128;
  $20 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$19,8)|0);
  $21 = $16 & $20;
  $22 = $val & 63;
  $23 = $22 | 128;
  $24 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$23,8)|0);
  $25 = $21 & $24;
  $$0 = $25;
  return ($$0|0);
 }
 $26 = ($val>>>0)<(2097152);
 if ($26) {
  $27 = $val >>> 18;
  $28 = $27 | 240;
  $29 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$28,8)|0);
  $30 = $29 & 1;
  $31 = $val >>> 12;
  $32 = $31 & 63;
  $33 = $32 | 128;
  $34 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$33,8)|0);
  $35 = $30 & $34;
  $36 = $val >>> 6;
  $37 = $36 & 63;
  $38 = $37 | 128;
  $39 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$38,8)|0);
  $40 = $35 & $39;
  $41 = $val & 63;
  $42 = $41 | 128;
  $43 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$42,8)|0);
  $44 = $40 & $43;
  $$0 = $44;
  return ($$0|0);
 }
 $45 = ($val>>>0)<(67108864);
 if ($45) {
  $46 = $val >>> 24;
  $47 = $46 | 248;
  $48 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$47,8)|0);
  $49 = $48 & 1;
  $50 = $val >>> 18;
  $51 = $50 & 63;
  $52 = $51 | 128;
  $53 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$52,8)|0);
  $54 = $49 & $53;
  $55 = $val >>> 12;
  $56 = $55 & 63;
  $57 = $56 | 128;
  $58 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$57,8)|0);
  $59 = $54 & $58;
  $60 = $val >>> 6;
  $61 = $60 & 63;
  $62 = $61 | 128;
  $63 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$62,8)|0);
  $64 = $59 & $63;
  $65 = $val & 63;
  $66 = $65 | 128;
  $67 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$66,8)|0);
  $68 = $64 & $67;
  $$0 = $68;
  return ($$0|0);
 } else {
  $69 = $val >>> 30;
  $70 = $69 | 252;
  $71 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$70,8)|0);
  $72 = $71 & 1;
  $73 = $val >>> 24;
  $74 = $73 & 63;
  $75 = $74 | 128;
  $76 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$75,8)|0);
  $77 = $72 & $76;
  $78 = $val >>> 18;
  $79 = $78 & 63;
  $80 = $79 | 128;
  $81 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$80,8)|0);
  $82 = $77 & $81;
  $83 = $val >>> 12;
  $84 = $83 & 63;
  $85 = $84 | 128;
  $86 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$85,8)|0);
  $87 = $82 & $86;
  $88 = $val >>> 6;
  $89 = $88 & 63;
  $90 = $89 | 128;
  $91 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$90,8)|0);
  $92 = $87 & $91;
  $93 = $val & 63;
  $94 = $93 | 128;
  $95 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$94,8)|0);
  $96 = $92 & $95;
  $$0 = $96;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_utf8_uint64($bw,$0,$1) {
 $bw = $bw|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(15);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(15);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($1>>>0)<(0);
 $8 = ($0>>>0)<(128);
 $9 = ($1|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  $12 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$0,8)|0);
  $$0 = $12;
  return ($$0|0);
 }
 $13 = ($1>>>0)<(0);
 $14 = ($0>>>0)<(2048);
 $15 = ($1|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  $18 = (_bitshift64Lshr(($0|0),($1|0),6)|0);
  $19 = tempRet0;
  $20 = $18 | 192;
  $21 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$20,8)|0);
  $22 = $21 & 1;
  $23 = $0 & 63;
  $24 = $23 | 128;
  $25 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$24,8)|0);
  $26 = $22 & $25;
  $$0 = $26;
  return ($$0|0);
 }
 $27 = ($1>>>0)<(0);
 $28 = ($0>>>0)<(65536);
 $29 = ($1|0)==(0);
 $30 = $29 & $28;
 $31 = $27 | $30;
 if ($31) {
  $32 = (_bitshift64Lshr(($0|0),($1|0),12)|0);
  $33 = tempRet0;
  $34 = $32 | 224;
  $35 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$34,8)|0);
  $36 = $35 & 1;
  $37 = (_bitshift64Lshr(($0|0),($1|0),6)|0);
  $38 = tempRet0;
  $39 = $37 & 63;
  $40 = $39 | 128;
  $41 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$40,8)|0);
  $42 = $36 & $41;
  $43 = $0 & 63;
  $44 = $43 | 128;
  $45 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$44,8)|0);
  $46 = $42 & $45;
  $$0 = $46;
  return ($$0|0);
 }
 $47 = ($1>>>0)<(0);
 $48 = ($0>>>0)<(2097152);
 $49 = ($1|0)==(0);
 $50 = $49 & $48;
 $51 = $47 | $50;
 if ($51) {
  $52 = (_bitshift64Lshr(($0|0),($1|0),18)|0);
  $53 = tempRet0;
  $54 = $52 | 240;
  $55 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$54,8)|0);
  $56 = $55 & 1;
  $57 = (_bitshift64Lshr(($0|0),($1|0),12)|0);
  $58 = tempRet0;
  $59 = $57 & 63;
  $60 = $59 | 128;
  $61 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$60,8)|0);
  $62 = $56 & $61;
  $63 = (_bitshift64Lshr(($0|0),($1|0),6)|0);
  $64 = tempRet0;
  $65 = $63 & 63;
  $66 = $65 | 128;
  $67 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$66,8)|0);
  $68 = $62 & $67;
  $69 = $0 & 63;
  $70 = $69 | 128;
  $71 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$70,8)|0);
  $72 = $68 & $71;
  $$0 = $72;
  return ($$0|0);
 }
 $73 = ($1>>>0)<(0);
 $74 = ($0>>>0)<(67108864);
 $75 = ($1|0)==(0);
 $76 = $75 & $74;
 $77 = $73 | $76;
 if ($77) {
  $78 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $79 = tempRet0;
  $80 = $78 | 248;
  $81 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$80,8)|0);
  $82 = $81 & 1;
  $83 = (_bitshift64Lshr(($0|0),($1|0),18)|0);
  $84 = tempRet0;
  $85 = $83 & 63;
  $86 = $85 | 128;
  $87 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$86,8)|0);
  $88 = $82 & $87;
  $89 = (_bitshift64Lshr(($0|0),($1|0),12)|0);
  $90 = tempRet0;
  $91 = $89 & 63;
  $92 = $91 | 128;
  $93 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$92,8)|0);
  $94 = $88 & $93;
  $95 = (_bitshift64Lshr(($0|0),($1|0),6)|0);
  $96 = tempRet0;
  $97 = $95 & 63;
  $98 = $97 | 128;
  $99 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$98,8)|0);
  $100 = $94 & $99;
  $101 = $0 & 63;
  $102 = $101 | 128;
  $103 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$102,8)|0);
  $104 = $100 & $103;
  $$0 = $104;
  return ($$0|0);
 }
 $105 = ($1>>>0)<(0);
 $106 = ($0>>>0)<(2147483648);
 $107 = ($1|0)==(0);
 $108 = $107 & $106;
 $109 = $105 | $108;
 if ($109) {
  $110 = (_bitshift64Lshr(($0|0),($1|0),30)|0);
  $111 = tempRet0;
  $112 = $110 | 252;
  $113 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$112,8)|0);
  $114 = $113 & 1;
  $115 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $116 = tempRet0;
  $117 = $115 & 63;
  $118 = $117 | 128;
  $119 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$118,8)|0);
  $120 = $114 & $119;
  $121 = (_bitshift64Lshr(($0|0),($1|0),18)|0);
  $122 = tempRet0;
  $123 = $121 & 63;
  $124 = $123 | 128;
  $125 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$124,8)|0);
  $126 = $120 & $125;
  $127 = (_bitshift64Lshr(($0|0),($1|0),12)|0);
  $128 = tempRet0;
  $129 = $127 & 63;
  $130 = $129 | 128;
  $131 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$130,8)|0);
  $132 = $126 & $131;
  $133 = (_bitshift64Lshr(($0|0),($1|0),6)|0);
  $134 = tempRet0;
  $135 = $133 & 63;
  $136 = $135 | 128;
  $137 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$136,8)|0);
  $138 = $132 & $137;
  $139 = $0 & 63;
  $140 = $139 | 128;
  $141 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$140,8)|0);
  $142 = $138 & $141;
  $$0 = $142;
  return ($$0|0);
 } else {
  $143 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,254,8)|0);
  $144 = $143 & 1;
  $145 = (_bitshift64Lshr(($0|0),($1|0),30)|0);
  $146 = tempRet0;
  $147 = $145 & 63;
  $148 = $147 | 128;
  $149 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$148,8)|0);
  $150 = $144 & $149;
  $151 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $152 = tempRet0;
  $153 = $151 & 63;
  $154 = $153 | 128;
  $155 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$154,8)|0);
  $156 = $150 & $155;
  $157 = (_bitshift64Lshr(($0|0),($1|0),18)|0);
  $158 = tempRet0;
  $159 = $157 & 63;
  $160 = $159 | 128;
  $161 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$160,8)|0);
  $162 = $156 & $161;
  $163 = (_bitshift64Lshr(($0|0),($1|0),12)|0);
  $164 = tempRet0;
  $165 = $163 & 63;
  $166 = $165 | 128;
  $167 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$166,8)|0);
  $168 = $162 & $167;
  $169 = (_bitshift64Lshr(($0|0),($1|0),6)|0);
  $170 = tempRet0;
  $171 = $169 & 63;
  $172 = $171 | 128;
  $173 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$172,8)|0);
  $174 = $168 & $173;
  $175 = $0 & 63;
  $176 = $175 | 128;
  $177 = (_FLAC__bitwriter_write_raw_uint32_nocheck($bw,$176,8)|0);
  $178 = $174 & $177;
  $$0 = $178;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitwriter_zero_pad_to_byte_boundary($bw) {
 $bw = $bw|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bw)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 7;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (8 - ($2))|0;
 $5 = (_FLAC__bitwriter_write_zeroes($bw,$4)|0);
 $$0 = $5;
 return ($$0|0);
}
function _bitwriter_grow_($bw,$bits_to_add) {
 $bw = $bw|0;
 $bits_to_add = $bits_to_add|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $new_capacity$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bw)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($bw)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($bits_to_add) + 31)|0;
 $5 = (($4) + ($3))|0;
 $6 = $5 >>> 5;
 $7 = (($6) + ($1))|0;
 $8 = ((($bw)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if (!($10)) {
  $$0 = 1;
  return ($$0|0);
 }
 $11 = (($7) - ($9))|0;
 $12 = $11 & 1023;
 $13 = ($12|0)==(0);
 $14 = (1024 - ($12))|0;
 $15 = $13 ? 0 : $14;
 $new_capacity$0 = (($15) + ($7))|0;
 $16 = HEAP32[$bw>>2]|0;
 $17 = (_safe_realloc_mul_2op_($16,$new_capacity$0)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$bw>>2] = $17;
 HEAP32[$8>>2] = $new_capacity$0;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__bitwriter_write_raw_uint32_nocheck($bw,$val,$bits) {
 $bw = $bw|0;
 $val = $val|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bw|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$bw>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = ($bits>>>0)>(32);
 $or$cond = $3 | $2;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($bits|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($bw)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($bw)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($bits))|0;
 $10 = ($6>>>0)>($9>>>0);
 if (!($10)) {
  $11 = (_bitwriter_grow_($bw,$bits)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $13 = ((($bw)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (32 - ($14))|0;
 $16 = ($15>>>0)>($bits>>>0);
 if ($16) {
  $17 = ((($bw)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 << $bits;
  $20 = $19 | $val;
  HEAP32[$17>>2] = $20;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + ($bits))|0;
  HEAP32[$13>>2] = $22;
  $$0 = 1;
  return ($$0|0);
 }
 $23 = ($14|0)==(0);
 if ($23) {
  $44 = (_llvm_bswap_i32(($val|0))|0);
  $45 = HEAP32[$7>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$7>>2] = $46;
  $47 = HEAP32[$bw>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  HEAP32[$48>>2] = $44;
  $$0 = 1;
  return ($$0|0);
 } else {
  $24 = ((($bw)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 << $15;
  HEAP32[$24>>2] = $26;
  $27 = (($bits) - ($15))|0;
  HEAP32[$13>>2] = $27;
  $28 = $val >>> $27;
  $29 = HEAP32[$24>>2]|0;
  $30 = $29 | $28;
  $31 = $30 >>> 24;
  $32 = $30 >>> 8;
  $33 = $32 & 65280;
  $34 = $30 << 8;
  $35 = $34 & 16711680;
  $36 = $30 << 24;
  $37 = $36 | $31;
  $38 = $37 | $33;
  $39 = $38 | $35;
  $40 = HEAP32[$7>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$7>>2] = $41;
  $42 = HEAP32[$bw>>2]|0;
  $43 = (($42) + ($40<<2)|0);
  HEAP32[$43>>2] = $39;
  HEAP32[$24>>2] = $val;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _safe_realloc_mul_2op_($ptr,$size2) {
 $ptr = $ptr|0;
 $size2 = $size2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size2|0)==(0);
 if ($0) {
  $1 = (_realloc($ptr,0)|0);
  $$0 = $1;
  return ($$0|0);
 }
 $2 = (4294967295 / ($size2>>>0))&-1;
 $3 = ($2>>>0)<(4);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $size2 << 2;
 $5 = (_safe_realloc_($ptr,$4)|0);
 $$0 = $5;
 return ($$0|0);
}
function _safe_realloc_($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_realloc($ptr,$size)|0);
 $1 = ($size|0)!=(0);
 $2 = ($0|0)==(0|0);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  return ($0|0);
 }
 _free($ptr);
 return ($0|0);
}
function _FLAC__cpu_info($info) {
 $info = $info|0;
 var $0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$info; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($info)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$info>>2] = 0;
 return;
}
function _FLAC__crc8($data,$len) {
 $data = $data|0;
 $len = $len|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $crc$0$lcssa = 0, $crc$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  $crc$0$lcssa = 0;
  return ($crc$0$lcssa|0);
 } else {
  $$012 = $data;$$03 = $len;$crc$04 = 0;
 }
 while(1) {
  $1 = (($$03) + -1)|0;
  $2 = ((($$012)) + 1|0);
  $3 = HEAP8[$$012>>0]|0;
  $4 = $3 ^ $crc$04;
  $5 = $4&255;
  $6 = (2336 + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($1|0)==(0);
  if ($8) {
   $crc$0$lcssa = $7;
   break;
  } else {
   $$012 = $2;$$03 = $1;$crc$04 = $7;
  }
 }
 return ($crc$0$lcssa|0);
}
function _FLAC__crc16($data,$len) {
 $data = $data|0;
 $len = $len|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc$0$lcssa = 0, $crc$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  $crc$0$lcssa = 0;
  return ($crc$0$lcssa|0);
 } else {
  $$012 = $data;$$03 = $len;$crc$04 = 0;
 }
 while(1) {
  $1 = (($$03) + -1)|0;
  $2 = $crc$04 << 8;
  $3 = $crc$04 >>> 8;
  $4 = ((($$012)) + 1|0);
  $5 = HEAP8[$$012>>0]|0;
  $6 = $5&255;
  $7 = $6 ^ $3;
  $8 = (8 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 ^ $2;
  $11 = $10 & 65535;
  $12 = ($1|0)==(0);
  if ($12) {
   $crc$0$lcssa = $11;
   break;
  } else {
   $$012 = $4;$$03 = $1;$crc$04 = $11;
  }
 }
 return ($crc$0$lcssa|0);
}
function _FLAC__fixed_compute_best_predictor($data,$data_len,$residual_bits_per_sample) {
 $data = $data|0;
 $data_len = $data_len|0;
 $residual_bits_per_sample = $residual_bits_per_sample|0;
 var $$ = 0, $$$ = 0, $$neg8 = 0, $$neg9 = 0, $$total_error_3$0 = 0, $$total_error_4$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $exitcond = 0, $i$019 = 0, $last_error_0$013 = 0, $last_error_1$012 = 0, $last_error_2$010 = 0, $last_error_3$011 = 0, $order$0 = 0, $phitmp = 0.0, $phitmp1 = 0.0, $phitmp2 = 0.0, $phitmp3 = 0.0, $phitmp4 = 0.0, $total_error_0$0$lcssa = 0, $total_error_0$014 = 0, $total_error_1$0$lcssa = 0, $total_error_1$015 = 0;
 var $total_error_2$0$lcssa = 0, $total_error_2$016 = 0, $total_error_3$0$lcssa = 0, $total_error_3$017 = 0, $total_error_4$0$lcssa = 0, $total_error_4$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($data)) + -4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($data)) + -8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ((($data)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($3))|0;
 $8 = (($7) + ($4))|0;
 $9 = ($data_len|0)==(0);
 if ($9) {
  $total_error_0$0$lcssa = 0;$total_error_1$0$lcssa = 0;$total_error_2$0$lcssa = 0;$total_error_3$0$lcssa = 0;$total_error_4$0$lcssa = 0;
 } else {
  $10 = $6 << 1;
  $$neg8 = (($10) - ($3))|0;
  $11 = ((($data)) + -16|0);
  $12 = HEAP32[$11>>2]|0;
  $$neg9 = (($$neg8) - ($12))|0;
  $13 = (($$neg9) + ($8))|0;
  $i$019 = 0;$last_error_0$013 = $1;$last_error_1$012 = $4;$last_error_2$010 = $8;$last_error_3$011 = $13;$total_error_0$014 = 0;$total_error_1$015 = 0;$total_error_2$016 = 0;$total_error_3$017 = 0;$total_error_4$018 = 0;
  while(1) {
   $14 = (($data) + ($i$019<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)<(0);
   $17 = (0 - ($15))|0;
   $18 = $16 ? $17 : $15;
   $19 = (($18) + ($total_error_0$014))|0;
   $20 = (($15) - ($last_error_0$013))|0;
   $21 = ($20|0)<(0);
   $22 = (0 - ($20))|0;
   $23 = $21 ? $22 : $20;
   $24 = (($23) + ($total_error_1$015))|0;
   $25 = (($20) - ($last_error_1$012))|0;
   $26 = ($25|0)<(0);
   $27 = (0 - ($25))|0;
   $28 = $26 ? $27 : $25;
   $29 = (($28) + ($total_error_2$016))|0;
   $30 = (($25) - ($last_error_2$010))|0;
   $31 = ($30|0)<(0);
   $32 = (0 - ($30))|0;
   $33 = $31 ? $32 : $30;
   $34 = (($33) + ($total_error_3$017))|0;
   $35 = (($30) - ($last_error_3$011))|0;
   $36 = ($35|0)<(0);
   $37 = (0 - ($35))|0;
   $38 = $36 ? $37 : $35;
   $39 = (($38) + ($total_error_4$018))|0;
   $40 = (($i$019) + 1)|0;
   $exitcond = ($40|0)==($data_len|0);
   if ($exitcond) {
    $total_error_0$0$lcssa = $19;$total_error_1$0$lcssa = $24;$total_error_2$0$lcssa = $29;$total_error_3$0$lcssa = $34;$total_error_4$0$lcssa = $39;
    break;
   } else {
    $i$019 = $40;$last_error_0$013 = $15;$last_error_1$012 = $20;$last_error_2$010 = $25;$last_error_3$011 = $30;$total_error_0$014 = $19;$total_error_1$015 = $24;$total_error_2$016 = $29;$total_error_3$017 = $34;$total_error_4$018 = $39;
   }
  }
 }
 $41 = ($total_error_1$0$lcssa>>>0)<($total_error_2$0$lcssa>>>0);
 $42 = $41 ? $total_error_1$0$lcssa : $total_error_2$0$lcssa;
 $43 = ($42>>>0)<($total_error_3$0$lcssa>>>0);
 $$total_error_3$0 = $43 ? $42 : $total_error_3$0$lcssa;
 $44 = ($$total_error_3$0>>>0)<($total_error_4$0$lcssa>>>0);
 $45 = $44 ? $$total_error_3$0 : $total_error_4$0$lcssa;
 $46 = ($total_error_0$0$lcssa>>>0)<($45>>>0);
 if ($46) {
  $order$0 = 0;
 } else {
  $47 = ($total_error_2$0$lcssa>>>0)<($total_error_3$0$lcssa>>>0);
  $48 = $47 ? $total_error_2$0$lcssa : $total_error_3$0$lcssa;
  $49 = ($48>>>0)<($total_error_4$0$lcssa>>>0);
  $$total_error_4$0 = $49 ? $48 : $total_error_4$0$lcssa;
  $50 = ($total_error_1$0$lcssa>>>0)<($$total_error_4$0>>>0);
  if ($50) {
   $order$0 = 1;
  } else {
   $51 = ($total_error_3$0$lcssa>>>0)<($total_error_4$0$lcssa>>>0);
   $52 = $51 ? $total_error_3$0$lcssa : $total_error_4$0$lcssa;
   $53 = ($total_error_2$0$lcssa>>>0)<($52>>>0);
   $$ = $51 ? 3 : 4;
   $$$ = $53 ? 2 : $$;
   $order$0 = $$$;
  }
 }
 $54 = ($total_error_0$0$lcssa|0)==(0);
 if ($54) {
  $61 = 0.0;
 } else {
  $55 = (+($total_error_0$0$lcssa>>>0));
  $56 = $55 * 0.69314718055994529;
  $57 = (+($data_len>>>0));
  $58 = $56 / $57;
  $59 = (+Math_log((+$58)));
  $60 = $59 / 0.69314718055994529;
  $phitmp = $60;
  $61 = $phitmp;
 }
 HEAPF32[$residual_bits_per_sample>>2] = $61;
 $62 = ($total_error_1$0$lcssa|0)==(0);
 if ($62) {
  $70 = 0.0;
 } else {
  $63 = (+($total_error_1$0$lcssa>>>0));
  $64 = $63 * 0.69314718055994529;
  $65 = (+($data_len>>>0));
  $66 = $64 / $65;
  $67 = (+Math_log((+$66)));
  $68 = $67 / 0.69314718055994529;
  $phitmp1 = $68;
  $70 = $phitmp1;
 }
 $69 = ((($residual_bits_per_sample)) + 4|0);
 HEAPF32[$69>>2] = $70;
 $71 = ($total_error_2$0$lcssa|0)==(0);
 if ($71) {
  $79 = 0.0;
 } else {
  $72 = (+($total_error_2$0$lcssa>>>0));
  $73 = $72 * 0.69314718055994529;
  $74 = (+($data_len>>>0));
  $75 = $73 / $74;
  $76 = (+Math_log((+$75)));
  $77 = $76 / 0.69314718055994529;
  $phitmp2 = $77;
  $79 = $phitmp2;
 }
 $78 = ((($residual_bits_per_sample)) + 8|0);
 HEAPF32[$78>>2] = $79;
 $80 = ($total_error_3$0$lcssa|0)==(0);
 if ($80) {
  $88 = 0.0;
 } else {
  $81 = (+($total_error_3$0$lcssa>>>0));
  $82 = $81 * 0.69314718055994529;
  $83 = (+($data_len>>>0));
  $84 = $82 / $83;
  $85 = (+Math_log((+$84)));
  $86 = $85 / 0.69314718055994529;
  $phitmp3 = $86;
  $88 = $phitmp3;
 }
 $87 = ((($residual_bits_per_sample)) + 12|0);
 HEAPF32[$87>>2] = $88;
 $89 = ($total_error_4$0$lcssa|0)==(0);
 if ($89) {
  $97 = 0.0;
  $96 = ((($residual_bits_per_sample)) + 16|0);
  HEAPF32[$96>>2] = $97;
  return ($order$0|0);
 }
 $90 = (+($total_error_4$0$lcssa>>>0));
 $91 = $90 * 0.69314718055994529;
 $92 = (+($data_len>>>0));
 $93 = $91 / $92;
 $94 = (+Math_log((+$93)));
 $95 = $94 / 0.69314718055994529;
 $phitmp4 = $95;
 $97 = $phitmp4;
 $96 = ((($residual_bits_per_sample)) + 16|0);
 HEAPF32[$96>>2] = $97;
 return ($order$0|0);
}
function _FLAC__fixed_compute_best_predictor_wide($data,$data_len,$residual_bits_per_sample) {
 $data = $data|0;
 $data_len = $data_len|0;
 $residual_bits_per_sample = $residual_bits_per_sample|0;
 var $$ = 0, $$$ = 0, $$neg8 = 0, $$neg9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0;
 var $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0;
 var $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $i$019 = 0, $last_error_0$013 = 0, $last_error_1$012 = 0, $last_error_2$010 = 0, $last_error_3$011 = 0, $order$0 = 0, $phitmp = 0.0, $phitmp1 = 0.0, $phitmp2 = 0.0, $phitmp3 = 0.0, $phitmp4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($data)) + -4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($data)) + -8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ((($data)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($3))|0;
 $8 = (($7) + ($4))|0;
 $9 = ($data_len|0)==(0);
 if ($9) {
  $56 = 0;$58 = 0;$59 = 0;$61 = 0;$68 = 0;$70 = 0;$77 = 0;$79 = 0;$85 = 0;$87 = 0;
 } else {
  $10 = $6 << 1;
  $$neg8 = (($10) - ($3))|0;
  $11 = ((($data)) + -16|0);
  $12 = HEAP32[$11>>2]|0;
  $$neg9 = (($$neg8) - ($12))|0;
  $13 = (($$neg9) + ($8))|0;
  $19 = 0;$20 = 0;$27 = 0;$28 = 0;$35 = 0;$36 = 0;$43 = 0;$44 = 0;$51 = 0;$52 = 0;$i$019 = 0;$last_error_0$013 = $1;$last_error_1$012 = $4;$last_error_2$010 = $8;$last_error_3$011 = $13;
  while(1) {
   $14 = (($data) + ($i$019<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)<(0);
   $17 = (0 - ($15))|0;
   $18 = $16 ? $17 : $15;
   $21 = (_i64Add(($18|0),0,($19|0),($20|0))|0);
   $22 = tempRet0;
   $23 = (($15) - ($last_error_0$013))|0;
   $24 = ($23|0)<(0);
   $25 = (0 - ($23))|0;
   $26 = $24 ? $25 : $23;
   $29 = (_i64Add(($26|0),0,($27|0),($28|0))|0);
   $30 = tempRet0;
   $31 = (($23) - ($last_error_1$012))|0;
   $32 = ($31|0)<(0);
   $33 = (0 - ($31))|0;
   $34 = $32 ? $33 : $31;
   $37 = (_i64Add(($34|0),0,($35|0),($36|0))|0);
   $38 = tempRet0;
   $39 = (($31) - ($last_error_2$010))|0;
   $40 = ($39|0)<(0);
   $41 = (0 - ($39))|0;
   $42 = $40 ? $41 : $39;
   $45 = (_i64Add(($42|0),0,($43|0),($44|0))|0);
   $46 = tempRet0;
   $47 = (($39) - ($last_error_3$011))|0;
   $48 = ($47|0)<(0);
   $49 = (0 - ($47))|0;
   $50 = $48 ? $49 : $47;
   $53 = (_i64Add(($50|0),0,($51|0),($52|0))|0);
   $54 = tempRet0;
   $55 = (($i$019) + 1)|0;
   $exitcond = ($55|0)==($data_len|0);
   if ($exitcond) {
    $56 = $30;$58 = $38;$59 = $29;$61 = $37;$68 = $46;$70 = $45;$77 = $54;$79 = $53;$85 = $22;$87 = $21;
    break;
   } else {
    $19 = $21;$20 = $22;$27 = $29;$28 = $30;$35 = $37;$36 = $38;$43 = $45;$44 = $46;$51 = $53;$52 = $54;$i$019 = $55;$last_error_0$013 = $15;$last_error_1$012 = $23;$last_error_2$010 = $31;$last_error_3$011 = $39;
   }
  }
 }
 $57 = ($56>>>0)<($58>>>0);
 $60 = ($59>>>0)<($61>>>0);
 $62 = ($56|0)==($58|0);
 $63 = $62 & $60;
 $64 = $57 | $63;
 $65 = $64 ? $59 : $61;
 $66 = $64 ? $56 : $58;
 $67 = ($66>>>0)<($68>>>0);
 $69 = ($65>>>0)<($70>>>0);
 $71 = ($66|0)==($68|0);
 $72 = $71 & $69;
 $73 = $67 | $72;
 $74 = $73 ? $65 : $70;
 $75 = $73 ? $66 : $68;
 $76 = ($75>>>0)<($77>>>0);
 $78 = ($74>>>0)<($79>>>0);
 $80 = ($75|0)==($77|0);
 $81 = $80 & $78;
 $82 = $76 | $81;
 $83 = $82 ? $74 : $79;
 $84 = $82 ? $75 : $77;
 $86 = ($85>>>0)<($84>>>0);
 $88 = ($87>>>0)<($83>>>0);
 $89 = ($85|0)==($84|0);
 $90 = $89 & $88;
 $91 = $86 | $90;
 if ($91) {
  $order$0 = 0;
 } else {
  $92 = ($58>>>0)<($68>>>0);
  $93 = ($61>>>0)<($70>>>0);
  $94 = ($58|0)==($68|0);
  $95 = $94 & $93;
  $96 = $92 | $95;
  $97 = $96 ? $61 : $70;
  $98 = $96 ? $58 : $68;
  $99 = ($98>>>0)<($77>>>0);
  $100 = ($97>>>0)<($79>>>0);
  $101 = ($98|0)==($77|0);
  $102 = $101 & $100;
  $103 = $99 | $102;
  $104 = $103 ? $97 : $79;
  $105 = $103 ? $98 : $77;
  $106 = ($56>>>0)<($105>>>0);
  $107 = ($59>>>0)<($104>>>0);
  $108 = ($56|0)==($105|0);
  $109 = $108 & $107;
  $110 = $106 | $109;
  if ($110) {
   $order$0 = 1;
  } else {
   $111 = ($68>>>0)<($77>>>0);
   $112 = ($70>>>0)<($79>>>0);
   $113 = ($68|0)==($77|0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $116 = $115 ? $70 : $79;
   $117 = $115 ? $68 : $77;
   $118 = ($58>>>0)<($117>>>0);
   $119 = ($61>>>0)<($116>>>0);
   $120 = ($58|0)==($117|0);
   $121 = $120 & $119;
   $122 = $118 | $121;
   $$ = $115 ? 3 : 4;
   $$$ = $122 ? 2 : $$;
   $order$0 = $$$;
  }
 }
 $123 = ($87|0)==(0);
 $124 = ($85|0)==(0);
 $125 = $123 & $124;
 if ($125) {
  $132 = 0.0;
 } else {
  $126 = (+($87>>>0)) + (4294967296.0*(+($85>>>0)));
  $127 = $126 * 0.69314718055994529;
  $128 = (+($data_len>>>0));
  $129 = $127 / $128;
  $130 = (+Math_log((+$129)));
  $131 = $130 / 0.69314718055994529;
  $phitmp = $131;
  $132 = $phitmp;
 }
 HEAPF32[$residual_bits_per_sample>>2] = $132;
 $133 = ($59|0)==(0);
 $134 = ($56|0)==(0);
 $135 = $133 & $134;
 if ($135) {
  $143 = 0.0;
 } else {
  $136 = (+($59>>>0)) + (4294967296.0*(+($56>>>0)));
  $137 = $136 * 0.69314718055994529;
  $138 = (+($data_len>>>0));
  $139 = $137 / $138;
  $140 = (+Math_log((+$139)));
  $141 = $140 / 0.69314718055994529;
  $phitmp1 = $141;
  $143 = $phitmp1;
 }
 $142 = ((($residual_bits_per_sample)) + 4|0);
 HEAPF32[$142>>2] = $143;
 $144 = ($61|0)==(0);
 $145 = ($58|0)==(0);
 $146 = $144 & $145;
 if ($146) {
  $154 = 0.0;
 } else {
  $147 = (+($61>>>0)) + (4294967296.0*(+($58>>>0)));
  $148 = $147 * 0.69314718055994529;
  $149 = (+($data_len>>>0));
  $150 = $148 / $149;
  $151 = (+Math_log((+$150)));
  $152 = $151 / 0.69314718055994529;
  $phitmp2 = $152;
  $154 = $phitmp2;
 }
 $153 = ((($residual_bits_per_sample)) + 8|0);
 HEAPF32[$153>>2] = $154;
 $155 = ($70|0)==(0);
 $156 = ($68|0)==(0);
 $157 = $155 & $156;
 if ($157) {
  $165 = 0.0;
 } else {
  $158 = (+($70>>>0)) + (4294967296.0*(+($68>>>0)));
  $159 = $158 * 0.69314718055994529;
  $160 = (+($data_len>>>0));
  $161 = $159 / $160;
  $162 = (+Math_log((+$161)));
  $163 = $162 / 0.69314718055994529;
  $phitmp3 = $163;
  $165 = $phitmp3;
 }
 $164 = ((($residual_bits_per_sample)) + 12|0);
 HEAPF32[$164>>2] = $165;
 $166 = ($79|0)==(0);
 $167 = ($77|0)==(0);
 $168 = $166 & $167;
 if ($168) {
  $176 = 0.0;
  $175 = ((($residual_bits_per_sample)) + 16|0);
  HEAPF32[$175>>2] = $176;
  return ($order$0|0);
 }
 $169 = (+($79>>>0)) + (4294967296.0*(+($77>>>0)));
 $170 = $169 * 0.69314718055994529;
 $171 = (+($data_len>>>0));
 $172 = $170 / $171;
 $173 = (+Math_log((+$172)));
 $174 = $173 / 0.69314718055994529;
 $phitmp4 = $174;
 $176 = $phitmp4;
 $175 = ((($residual_bits_per_sample)) + 16|0);
 HEAPF32[$175>>2] = $176;
 return ($order$0|0);
}
function _FLAC__fixed_compute_residual($data,$data_len,$order,$residual) {
 $data = $data|0;
 $data_len = $data_len|0;
 $order = $order|0;
 $residual = $residual|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond18 = 0, $exitcond19 = 0, $exitcond20 = 0, $i$011 = 0, $i$112 = 0, $i$214 = 0, $i$316 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($order|0) {
 case 0:  {
  $4 = $data_len << 2;
  _memcpy(($residual|0),($data|0),($4|0))|0;
  return;
  break;
 }
 case 1:  {
  $3 = ($data_len|0)>(0);
  if ($3) {
   $i$011 = 0;
  } else {
   return;
  }
  while(1) {
   $5 = (($data) + ($i$011<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($i$011) + -1)|0;
   $8 = (($data) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($6) - ($9))|0;
   $11 = (($residual) + ($i$011<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = (($i$011) + 1)|0;
   $exitcond = ($12|0)==($data_len|0);
   if ($exitcond) {
    break;
   } else {
    $i$011 = $12;
   }
  }
  return;
  break;
 }
 case 2:  {
  $2 = ($data_len|0)>(0);
  if ($2) {
   $i$112 = 0;
  } else {
   return;
  }
  while(1) {
   $13 = (($data) + ($i$112<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($i$112) + -1)|0;
   $16 = (($data) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 << 1;
   $19 = (($14) - ($18))|0;
   $20 = (($i$112) + -2)|0;
   $21 = (($data) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($19) + ($22))|0;
   $24 = (($residual) + ($i$112<<2)|0);
   HEAP32[$24>>2] = $23;
   $25 = (($i$112) + 1)|0;
   $exitcond18 = ($25|0)==($data_len|0);
   if ($exitcond18) {
    break;
   } else {
    $i$112 = $25;
   }
  }
  return;
  break;
 }
 case 3:  {
  $1 = ($data_len|0)>(0);
  if ($1) {
   $i$214 = 0;
  } else {
   return;
  }
  while(1) {
   $26 = (($data) + ($i$214<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($i$214) + -1)|0;
   $29 = (($data) + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = Math_imul($30, -3)|0;
   $32 = (($31) + ($27))|0;
   $33 = (($i$214) + -2)|0;
   $34 = (($data) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35*3)|0;
   $37 = (($32) + ($36))|0;
   $38 = (($i$214) + -3)|0;
   $39 = (($data) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($37) - ($40))|0;
   $42 = (($residual) + ($i$214<<2)|0);
   HEAP32[$42>>2] = $41;
   $43 = (($i$214) + 1)|0;
   $exitcond19 = ($43|0)==($data_len|0);
   if ($exitcond19) {
    break;
   } else {
    $i$214 = $43;
   }
  }
  return;
  break;
 }
 case 4:  {
  $0 = ($data_len|0)>(0);
  if ($0) {
   $i$316 = 0;
  } else {
   return;
  }
  while(1) {
   $44 = (($data) + ($i$316<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($i$316) + -1)|0;
   $47 = (($data) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 << 2;
   $50 = (($45) - ($49))|0;
   $51 = (($i$316) + -2)|0;
   $52 = (($data) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53*6)|0;
   $55 = (($50) + ($54))|0;
   $56 = (($i$316) + -3)|0;
   $57 = (($data) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 << 2;
   $60 = (($55) - ($59))|0;
   $61 = (($i$316) + -4)|0;
   $62 = (($data) + ($61<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($60) + ($63))|0;
   $65 = (($residual) + ($i$316<<2)|0);
   HEAP32[$65>>2] = $64;
   $66 = (($i$316) + 1)|0;
   $exitcond20 = ($66|0)==($data_len|0);
   if ($exitcond20) {
    break;
   } else {
    $i$316 = $66;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FLAC__fixed_restore_signal($residual,$data_len,$order,$data) {
 $residual = $residual|0;
 $data_len = $data_len|0;
 $order = $order|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond18 = 0, $exitcond19 = 0, $exitcond20 = 0, $i$011 = 0, $i$112 = 0, $i$214 = 0, $i$316 = 0, $tmp = 0, $tmp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($order|0) {
 case 0:  {
  $4 = $data_len << 2;
  _memcpy(($data|0),($residual|0),($4|0))|0;
  return;
  break;
 }
 case 1:  {
  $3 = ($data_len|0)>(0);
  if ($3) {
   $i$011 = 0;
  } else {
   return;
  }
  while(1) {
   $5 = (($residual) + ($i$011<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($i$011) + -1)|0;
   $8 = (($data) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($6))|0;
   $11 = (($data) + ($i$011<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = (($i$011) + 1)|0;
   $exitcond = ($12|0)==($data_len|0);
   if ($exitcond) {
    break;
   } else {
    $i$011 = $12;
   }
  }
  return;
  break;
 }
 case 2:  {
  $2 = ($data_len|0)>(0);
  if ($2) {
   $i$112 = 0;
  } else {
   return;
  }
  while(1) {
   $13 = (($residual) + ($i$112<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($i$112) + -1)|0;
   $16 = (($data) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 << 1;
   $19 = (($18) + ($14))|0;
   $20 = (($i$112) + -2)|0;
   $21 = (($data) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($19) - ($22))|0;
   $24 = (($data) + ($i$112<<2)|0);
   HEAP32[$24>>2] = $23;
   $25 = (($i$112) + 1)|0;
   $exitcond18 = ($25|0)==($data_len|0);
   if ($exitcond18) {
    break;
   } else {
    $i$112 = $25;
   }
  }
  return;
  break;
 }
 case 3:  {
  $1 = ($data_len|0)>(0);
  if ($1) {
   $i$214 = 0;
  } else {
   return;
  }
  while(1) {
   $26 = (($residual) + ($i$214<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($i$214) + -1)|0;
   $29 = (($data) + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30*3)|0;
   $32 = (($31) + ($27))|0;
   $33 = (($i$214) + -2)|0;
   $34 = (($data) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($35, -3)|0;
   $37 = (($32) + ($36))|0;
   $38 = (($i$214) + -3)|0;
   $39 = (($data) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($37) + ($40))|0;
   $42 = (($data) + ($i$214<<2)|0);
   HEAP32[$42>>2] = $41;
   $43 = (($i$214) + 1)|0;
   $exitcond19 = ($43|0)==($data_len|0);
   if ($exitcond19) {
    break;
   } else {
    $i$214 = $43;
   }
  }
  return;
  break;
 }
 case 4:  {
  $0 = ($data_len|0)>(0);
  if ($0) {
   $i$316 = 0;
  } else {
   return;
  }
  while(1) {
   $44 = (($residual) + ($i$316<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($i$316) + -1)|0;
   $47 = (($data) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($i$316) + -2)|0;
   $50 = (($data) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($51, -6)|0;
   $53 = (($i$316) + -3)|0;
   $54 = (($data) + ($53<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($i$316) + -4)|0;
   $57 = (($data) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $tmp = (($55) + ($48))|0;
   $tmp4 = $tmp << 2;
   $59 = (($52) + ($45))|0;
   $60 = (($59) - ($58))|0;
   $61 = (($60) + ($tmp4))|0;
   $62 = (($data) + ($i$316<<2)|0);
   HEAP32[$62>>2] = $61;
   $63 = (($i$316) + 1)|0;
   $exitcond20 = ($63|0)==($data_len|0);
   if ($exitcond20) {
    break;
   } else {
    $i$316 = $63;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FLAC__format_sample_rate_is_valid($sample_rate) {
 $sample_rate = $sample_rate|0;
 var $$ = 0, $0 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sample_rate) + -1)|0;
 $not$ = ($0>>>0)<(655350);
 $$ = $not$&1;
 return ($$|0);
}
function _FLAC__format_blocksize_is_subset($blocksize,$sample_rate) {
 $blocksize = $blocksize|0;
 $sample_rate = $sample_rate|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($blocksize>>>0)>(16384);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($sample_rate>>>0)<(48001);
 $2 = ($blocksize>>>0)>(4608);
 $or$cond = $2 & $1;
 $3 = $or$cond&1;
 $$ = $3 ^ 1;
 $$0 = $$;
 return ($$0|0);
}
function _FLAC__format_sample_rate_is_subset($sample_rate) {
 $sample_rate = $sample_rate|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FLAC__format_sample_rate_is_valid($sample_rate)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  return 0;
 } else {
  $2 = ($sample_rate>>>0)<(65536);
  $3 = (($sample_rate>>>0) % 1000)&-1;
  $4 = ($3|0)==(0);
  $or$cond = $2 | $4;
  $5 = (($sample_rate>>>0) % 10)&-1;
  $6 = ($5|0)==(0);
  $or$cond3 = $or$cond | $6;
  $$ = $or$cond3&1;
  return ($$|0);
 }
 return (0)|0;
}
function _FLAC__format_seektable_is_legal($seek_table) {
 $seek_table = $seek_table|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $got_prev$03 = 0, $i$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$seek_table>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = ((($seek_table)) + 4|0);
 $3 = ((($seek_table)) + 4|0);
 $16 = 0;$18 = 0;$got_prev$03 = 1;$i$01 = 0;
 while(1) {
  if (!($got_prev$03)) {
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + (($i$01*24)|0)|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($8|0)==(-1);
   $13 = ($11|0)==(-1);
   $14 = $12 & $13;
   $15 = ($11>>>0)>($16>>>0);
   $17 = ($8>>>0)>($18>>>0);
   $19 = ($11|0)==($16|0);
   $20 = $19 & $17;
   $21 = $15 | $20;
   $or$cond = $14 | $21;
   if (!($or$cond)) {
    $$0 = 0;
    label = 6;
    break;
   }
  }
  $22 = HEAP32[$2>>2]|0;
  $23 = (($22) + (($i$01*24)|0)|0);
  $24 = $23;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($i$01) + 1)|0;
  $31 = HEAP32[$seek_table>>2]|0;
  $32 = ($30>>>0)<($31>>>0);
  if ($32) {
   $16 = $29;$18 = $26;$got_prev$03 = 0;$i$01 = $30;
  } else {
   $$0 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__format_seektable_sort($seek_table) {
 $seek_table = $seek_table|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first$05 = 0, $first$1 = 0, $i$03 = 0, $i$12 = 0, $j$0$lcssa = 0, $j$04 = 0;
 var $j$1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$seek_table>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($seek_table)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _qsort($3,$0,24,12);
 $4 = HEAP32[$seek_table>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $j$0$lcssa = 0;
 } else {
  $first$05 = 1;$i$03 = 0;$j$04 = 0;
  while(1) {
   $10 = HEAP32[$2>>2]|0;
   $11 = (($10) + (($i$03*24)|0)|0);
   $12 = $11;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14|0)==(-1);
   $19 = ($17|0)==(-1);
   $20 = $18 & $19;
   $21 = ($first$05|0)!=(0);
   $or$cond = $21 | $20;
   if ($or$cond) {
    label = 7;
   } else {
    $22 = (($j$04) + -1)|0;
    $23 = (($10) + (($22*24)|0)|0);
    $24 = $23;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($14|0)==($26|0);
    $31 = ($17|0)==($29|0);
    $32 = $30 & $31;
    if ($32) {
     $first$1 = $first$05;$j$1 = $j$04;
    } else {
     label = 7;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $33 = (($j$04) + 1)|0;
    $34 = HEAP32[$2>>2]|0;
    $35 = (($34) + (($j$04*24)|0)|0);
    $36 = (($34) + (($i$03*24)|0)|0);
    ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$36+16>>2]|0;HEAP32[$35+20>>2]=HEAP32[$36+20>>2]|0;
    $first$1 = 0;$j$1 = $33;
   }
   $37 = (($i$03) + 1)|0;
   $38 = HEAP32[$seek_table>>2]|0;
   $39 = ($37>>>0)<($38>>>0);
   if ($39) {
    $first$05 = $first$1;$i$03 = $37;$j$04 = $j$1;
   } else {
    $j$0$lcssa = $j$1;
    break;
   }
  }
 }
 $6 = HEAP32[$seek_table>>2]|0;
 $7 = ($j$0$lcssa>>>0)<($6>>>0);
 if (!($7)) {
  $$0 = $j$0$lcssa;
  return ($$0|0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$seek_table>>2]|0;
 $i$12 = $j$0$lcssa;
 while(1) {
  $40 = (($8) + (($i$12*24)|0)|0);
  $41 = $40;
  $42 = $41;
  HEAP32[$42>>2] = -1;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = -1;
  $45 = (((($8) + (($i$12*24)|0)|0)) + 8|0);
  $46 = $45;
  $47 = $46;
  HEAP32[$47>>2] = 0;
  $48 = (($46) + 4)|0;
  $49 = $48;
  HEAP32[$49>>2] = 0;
  $50 = (((($8) + (($i$12*24)|0)|0)) + 16|0);
  HEAP32[$50>>2] = 0;
  $51 = (($i$12) + 1)|0;
  $52 = ($51>>>0)<($9>>>0);
  if ($52) {
   $i$12 = $51;
  } else {
   $$0 = $j$0$lcssa;
   break;
  }
 }
 return ($$0|0);
}
function _FLAC__format_cuesheet_is_legal($cue_sheet,$check_cd_da_subset,$violation) {
 $cue_sheet = $cue_sheet|0;
 $check_cd_da_subset = $check_cd_da_subset|0;
 $violation = $violation|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$011 = 0, $i$011$lcssa43 = 0, $j$010 = 0;
 var $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($check_cd_da_subset|0)!=(0);
 if ($0) {
  $1 = ((($cue_sheet)) + 136|0);
  $2 = $1;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)<(0);
  $9 = ($4>>>0)<(88200);
  $10 = ($7|0)==(0);
  $11 = $10 & $9;
  $12 = $8 | $11;
  if ($12) {
   $13 = ($violation|0)==(0|0);
   if ($13) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$violation>>2] = 2596;
   $$0 = 0;
   return ($$0|0);
  }
  $14 = (___uremdi3(($4|0),($7|0),588,0)|0);
  $15 = tempRet0;
  $16 = ($14|0)==(0);
  $17 = ($15|0)==(0);
  $18 = $16 & $17;
  if (!($18)) {
   $19 = ($violation|0)==(0|0);
   if ($19) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$violation>>2] = 2661;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $20 = ((($cue_sheet)) + 148|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = ($violation|0)==(0|0);
  if ($23) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 2732;
  $$0 = 0;
  return ($$0|0);
 }
 if ($0) {
  $28 = (($21) + -1)|0;
  $29 = ((($cue_sheet)) + 152|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (((($30) + ($28<<5)|0)) + 8|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)==(-86);
  if (!($33)) {
   $34 = ($violation|0)==(0|0);
   if ($34) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$violation>>2] = 2786;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $24 = HEAP32[$20>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 1;
  return ($$0|0);
 }
 $26 = ((($cue_sheet)) + 152|0);
 $27 = HEAP32[$26>>2]|0;
 $i$011 = 0;
 L34: while(1) {
  $35 = (((($27) + ($i$011<<5)|0)) + 8|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)==(0);
  if ($37) {
   label = 18;
   break;
  }
  if ($0) {
   $39 = ($36&255)<(100);
   $40 = ($36<<24>>24)==(-86);
   $or$cond1 = $39 | $40;
   if (!($or$cond1)) {
    label = 22;
    break;
   }
   $42 = HEAP32[$26>>2]|0;
   $43 = (($42) + ($i$011<<5)|0);
   $44 = $43;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (___uremdi3(($46|0),($49|0),588,0)|0);
   $51 = tempRet0;
   $52 = ($50|0)==(0);
   $53 = ($51|0)==(0);
   $54 = $52 & $53;
   if (!($54)) {
    $i$011$lcssa43 = $i$011;
    label = 25;
    break;
   }
  }
  $59 = HEAP32[$20>>2]|0;
  $60 = (($59) + -1)|0;
  $61 = ($i$011>>>0)<($60>>>0);
  if ($61) {
   $66 = HEAP32[$26>>2]|0;
   $67 = (((($66) + ($i$011<<5)|0)) + 23|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = ($68<<24>>24)==(0);
   if ($69) {
    label = 32;
    break;
   }
   $71 = (((($66) + ($i$011<<5)|0)) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 8|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = ($74&255)>(1);
   if ($75) {
    label = 35;
    break;
   }
  }
  $62 = HEAP32[$26>>2]|0;
  $63 = (((($62) + ($i$011<<5)|0)) + 23|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = ($64<<24>>24)==(0);
  if (!($65)) {
   $78 = $62;$j$010 = 0;
   while(1) {
    if ($0) {
     $77 = (((($78) + ($i$011<<5)|0)) + 24|0);
     $79 = HEAP32[$77>>2]|0;
     $80 = (($79) + ($j$010<<4)|0);
     $81 = $80;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = (___uremdi3(($83|0),($86|0),588,0)|0);
     $88 = tempRet0;
     $89 = ($87|0)==(0);
     $90 = ($88|0)==(0);
     $91 = $89 & $90;
     if (!($91)) {
      label = 39;
      break L34;
     }
    }
    $93 = ($j$010|0)==(0);
    if (!($93)) {
     $94 = HEAP32[$26>>2]|0;
     $95 = (((($94) + ($i$011<<5)|0)) + 24|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (((($96) + ($j$010<<4)|0)) + 8|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = (($j$010) + -1)|0;
     $101 = (((($96) + ($100<<4)|0)) + 8|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = $102&255;
     $104 = (($103) + 1)|0;
     $105 = ($99|0)==($104|0);
     if (!($105)) {
      label = 43;
      break L34;
     }
    }
    $107 = (($j$010) + 1)|0;
    $108 = HEAP32[$26>>2]|0;
    $109 = (((($108) + ($i$011<<5)|0)) + 23|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = ($107>>>0)<($111>>>0);
    if ($112) {
     $78 = $108;$j$010 = $107;
    } else {
     break;
    }
   }
  }
  $113 = (($i$011) + 1)|0;
  $114 = HEAP32[$20>>2]|0;
  $115 = ($113>>>0)<($114>>>0);
  if ($115) {
   $i$011 = $113;
  } else {
   $$0 = 1;
   label = 47;
   break;
  }
 }
 if ((label|0) == 18) {
  $38 = ($violation|0)==(0|0);
  if ($38) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 2847;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 22) {
  $41 = ($violation|0)==(0|0);
  if ($41) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 2887;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 25) {
  $55 = ($violation|0)==(0|0);
  if ($55) {
   $$0 = 0;
   return ($$0|0);
  }
  $56 = HEAP32[$20>>2]|0;
  $57 = (($56) + -1)|0;
  $58 = ($i$011$lcssa43|0)==($57|0);
  if ($58) {
   HEAP32[$violation>>2] = 2936;
   $$0 = 0;
   return ($$0|0);
  } else {
   HEAP32[$violation>>2] = 3008;
   $$0 = 0;
   return ($$0|0);
  }
 }
 else if ((label|0) == 32) {
  $70 = ($violation|0)==(0|0);
  if ($70) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 3077;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 35) {
  $76 = ($violation|0)==(0|0);
  if ($76) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 3128;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  $92 = ($violation|0)==(0|0);
  if ($92) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 3180;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 43) {
  $106 = ($violation|0)==(0|0);
  if ($106) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$violation>>2] = 3255;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 47) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__format_picture_is_legal($picture,$violation) {
 $picture = $picture|0;
 $violation = $violation|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b$01 = 0, $or$cond = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($picture)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if (!($3)) {
   $7 = $2;$p$02 = $1;
   while(1) {
    $8 = ($7<<24>>24)<(32);
    $9 = ($7<<24>>24)==(127);
    $or$cond = $8 | $9;
    $5 = ((($p$02)) + 1|0);
    if ($or$cond) {
     break;
    }
    $4 = HEAP8[$5>>0]|0;
    $6 = ($4<<24>>24)==(0);
    if ($6) {
     break L1;
    } else {
     $7 = $4;$p$02 = $5;
    }
   }
   $10 = ($violation|0)==(0|0);
   if ($10) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$violation>>2] = 3304;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $11 = ((($picture)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $b$01 = $12;
 }
 while(1) {
  $15 = (_utf8len_($b$01)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  }
  $18 = (($b$01) + ($15)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $$0 = 1;
   label = 11;
   break;
  } else {
   $b$01 = $18;
  }
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 $17 = ($violation|0)==(0|0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$violation>>2] = 3378;
 $$0 = 0;
 return ($$0|0);
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($limit,$blocksize,$predictor_order) {
 $limit = $limit|0;
 $blocksize = $blocksize|0;
 $predictor_order = $predictor_order|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $max_rice_partition_order$0 = 0, $max_rice_partition_order$0$lcssa = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $max_rice_partition_order$0 = $limit;
 while(1) {
  $0 = $blocksize >>> $max_rice_partition_order$0;
  $1 = ($0>>>0)<=($predictor_order>>>0);
  $not$ = ($max_rice_partition_order$0|0)!=(0);
  $2 = $not$ & $1;
  $3 = (($max_rice_partition_order$0) + -1)|0;
  if ($2) {
   $max_rice_partition_order$0 = $3;
  } else {
   $max_rice_partition_order$0$lcssa = $max_rice_partition_order$0;
   break;
  }
 }
 return ($max_rice_partition_order$0$lcssa|0);
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize($blocksize) {
 $blocksize = $blocksize|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $max_rice_partition_order$0$lcssa = 0, $max_rice_partition_order$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $blocksize & 1;
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = $blocksize;$max_rice_partition_order$02 = 0;
  while(1) {
   $2 = (($max_rice_partition_order$02) + 1)|0;
   $3 = $$01 >>> 1;
   $4 = $3 & 1;
   $5 = ($4|0)==(0);
   if ($5) {
    $$01 = $3;$max_rice_partition_order$02 = $2;
   } else {
    $max_rice_partition_order$0$lcssa = $2;
    break;
   }
  }
 } else {
  $max_rice_partition_order$0$lcssa = 0;
 }
 $6 = ($max_rice_partition_order$0$lcssa>>>0)>(15);
 $7 = $6 ? 15 : $max_rice_partition_order$0$lcssa;
 return ($7|0);
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$object>>2] = 0;
 $0 = ((($object)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($object)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$object>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _free($0);
 }
 $2 = ((($object)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _free($3);
 }
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($object);
 return;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($object,$max_partition_order) {
 $object = $object|0;
 $max_partition_order = $max_partition_order|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($object)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($max_partition_order>>>0);
 if (!($2)) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = HEAP32[$object>>2]|0;
 $4 = 4 << $max_partition_order;
 $5 = (_safe_realloc_13($3,$4)|0);
 HEAP32[$object>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($object)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_safe_realloc_13($8,$4)|0);
 HEAP32[$7>>2] = $9;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($9|0),0,($4|0))|0;
 HEAP32[$0>>2] = $max_partition_order;
 $$0 = 1;
 return ($$0|0);
}
function _seekpoint_compare_($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $l;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $r;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($2|0)==($8|0);
 $13 = ($5|0)==($11|0);
 $14 = $12 & $13;
 $15 = ($5>>>0)<($11>>>0);
 $16 = ($2>>>0)<($8>>>0);
 $17 = ($5|0)==($11|0);
 $18 = $17 & $16;
 $19 = $15 | $18;
 $$ = $19 ? -1 : 1;
 $$0 = $14 ? 0 : $$;
 return ($$0|0);
}
function _utf8len_($utf8) {
 $utf8 = $utf8|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$8 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$utf8>>0]|0;
 $1 = $0&255;
 $2 = $1 & 128;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = $1 & 224;
 $5 = ($4|0)==(192);
 if ($5) {
  $6 = ((($utf8)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 & -64;
  $9 = ($8<<24>>24)==(-128);
  if ($9) {
   $10 = $1 & 254;
   $11 = ($10|0)==(192);
   $$ = $11 ? 0 : 2;
   $$0 = $$;
   return ($$0|0);
  }
 }
 $12 = HEAP8[$utf8>>0]|0;
 $13 = $12 & -16;
 $14 = ($13<<24>>24)==(-32);
 if ($14) {
  $15 = ((($utf8)) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 192;
  $19 = ($18|0)==(128);
  if ($19) {
   $20 = ((($utf8)) + 2|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 & -64;
   $23 = ($22<<24>>24)==(-128);
   if ($23) {
    $24 = ($12<<24>>24)==(-32);
    $25 = $17 & 224;
    $26 = ($25|0)==(128);
    $or$cond = $24 & $26;
    if ($or$cond) {
     $$0 = 0;
     return ($$0|0);
    }
    $27 = ($12<<24>>24)==(-19);
    $28 = $16 & -32;
    $29 = ($28<<24>>24)==(-96);
    $or$cond12 = $27 & $29;
    if ($or$cond12) {
     $$0 = 0;
     return ($$0|0);
    }
    $30 = HEAP8[$utf8>>0]|0;
    $31 = ($30<<24>>24)==(-17);
    if ($31) {
     $32 = HEAP8[$15>>0]|0;
     $33 = ($32<<24>>24)==(-65);
     if ($33) {
      $34 = HEAP8[$20>>0]|0;
      $35 = $34 & -2;
      $36 = ($35<<24>>24)==(-66);
      if ($36) {
       $$0 = 0;
       return ($$0|0);
      }
     }
    }
    $$0 = 3;
    return ($$0|0);
   }
  }
 }
 $37 = HEAP8[$utf8>>0]|0;
 $38 = $37 & -8;
 $39 = ($38<<24>>24)==(-16);
 if ($39) {
  $40 = ((($utf8)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $42 & 192;
  $44 = ($43|0)==(128);
  if ($44) {
   $45 = ((($utf8)) + 2|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 & -64;
   $48 = ($47<<24>>24)==(-128);
   if ($48) {
    $49 = ((($utf8)) + 3|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if ($52) {
     $53 = ($37<<24>>24)==(-16);
     $54 = $42 & 240;
     $55 = ($54|0)==(128);
     $or$cond3 = $53 & $55;
     $$8 = $or$cond3 ? 0 : 4;
     return ($$8|0);
    }
   }
  }
 }
 $56 = HEAP8[$utf8>>0]|0;
 $57 = $56 & -4;
 $58 = ($57<<24>>24)==(-8);
 if ($58) {
  $59 = ((($utf8)) + 1|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 & 192;
  $63 = ($62|0)==(128);
  if ($63) {
   $64 = ((($utf8)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 & -64;
   $67 = ($66<<24>>24)==(-128);
   if ($67) {
    $68 = ((($utf8)) + 3|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 & -64;
    $71 = ($70<<24>>24)==(-128);
    if ($71) {
     $72 = ((($utf8)) + 4|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = $73 & -64;
     $75 = ($74<<24>>24)==(-128);
     if ($75) {
      $76 = ($56<<24>>24)==(-8);
      $77 = $61 & 248;
      $78 = ($77|0)==(128);
      $or$cond5 = $76 & $78;
      $$9 = $or$cond5 ? 0 : 5;
      $$0 = $$9;
      return ($$0|0);
     }
    }
   }
  }
 }
 $79 = HEAP8[$utf8>>0]|0;
 $80 = $79 & -2;
 $81 = ($80<<24>>24)==(-4);
 if (!($81)) {
  $$0 = 0;
  return ($$0|0);
 }
 $82 = ((($utf8)) + 1|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = $84 & 192;
 $86 = ($85|0)==(128);
 if (!($86)) {
  $$0 = 0;
  return ($$0|0);
 }
 $87 = ((($utf8)) + 2|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88 & -64;
 $90 = ($89<<24>>24)==(-128);
 if (!($90)) {
  $$0 = 0;
  return ($$0|0);
 }
 $91 = ((($utf8)) + 3|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92 & -64;
 $94 = ($93<<24>>24)==(-128);
 if (!($94)) {
  $$0 = 0;
  return ($$0|0);
 }
 $95 = ((($utf8)) + 4|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96 & -64;
 $98 = ($97<<24>>24)==(-128);
 if (!($98)) {
  $$0 = 0;
  return ($$0|0);
 }
 $99 = ((($utf8)) + 5|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100 & -64;
 $102 = ($101<<24>>24)==(-128);
 if (!($102)) {
  $$0 = 0;
  return ($$0|0);
 }
 $103 = ($79<<24>>24)==(-4);
 $104 = $84 & 252;
 $105 = ($104|0)==(128);
 $or$cond7 = $103 & $105;
 $$10 = $or$cond7 ? 0 : 6;
 $$0 = $$10;
 return ($$0|0);
}
function _safe_realloc_13($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_realloc($ptr,$size)|0);
 $1 = ($size|0)!=(0);
 $2 = ($0|0)==(0|0);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  return ($0|0);
 }
 _free($ptr);
 return ($0|0);
}
function _FLAC__lpc_window_data($in,$window,$out,$data_len) {
 $in = $in|0;
 $window = $window|0;
 $out = $out|0;
 $data_len = $data_len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data_len|0)==(0);
 if ($0) {
  return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $1 = (($in) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (+($2|0));
  $4 = (($window) + ($i$01<<2)|0);
  $5 = +HEAPF32[$4>>2];
  $6 = $3 * $5;
  $7 = (($out) + ($i$01<<2)|0);
  HEAPF32[$7>>2] = $6;
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($data_len|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 return;
}
function _FLAC__lpc_compute_autocorrelation($data,$data_len,$lag,$autoc) {
 $data = $data|0;
 $data_len = $data_len|0;
 $lag = $lag|0;
 $autoc = $autoc|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $coeff$17 = 0, $coeff$22 = 0, $exitcond = 0, $exitcond16 = 0, $sample$011 = 0, $sample$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($data_len) - ($lag))|0;
 $1 = ($lag|0)==(0);
 if (!($1)) {
  $2 = $lag << 2;
  _memset(($autoc|0),0,($2|0))|0;
 }
 $3 = ($lag|0)==(0);
 $sample$011 = 0;
 while(1) {
  $5 = (($data) + ($sample$011<<2)|0);
  $6 = +HEAPF32[$5>>2];
  if (!($3)) {
   $coeff$17 = 0;
   while(1) {
    $7 = (($coeff$17) + ($sample$011))|0;
    $8 = (($data) + ($7<<2)|0);
    $9 = +HEAPF32[$8>>2];
    $10 = $6 * $9;
    $11 = (($autoc) + ($coeff$17<<2)|0);
    $12 = +HEAPF32[$11>>2];
    $13 = $12 + $10;
    HEAPF32[$11>>2] = $13;
    $14 = (($coeff$17) + 1)|0;
    $exitcond16 = ($14|0)==($lag|0);
    if ($exitcond16) {
     break;
    } else {
     $coeff$17 = $14;
    }
   }
  }
  $15 = (($sample$011) + 1)|0;
  $16 = ($15>>>0)>($0>>>0);
  if ($16) {
   $$lcssa = $15;
   break;
  } else {
   $sample$011 = $15;
  }
 }
 $4 = ($$lcssa>>>0)<($data_len>>>0);
 if ($4) {
  $sample$13 = $$lcssa;
 } else {
  return;
 }
 while(1) {
  $17 = (($data) + ($sample$13<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = (($data_len) - ($sample$13))|0;
  $coeff$22 = 0;
  while(1) {
   $20 = (($coeff$22) + ($sample$13))|0;
   $21 = (($data) + ($20<<2)|0);
   $22 = +HEAPF32[$21>>2];
   $23 = $18 * $22;
   $24 = (($autoc) + ($coeff$22<<2)|0);
   $25 = +HEAPF32[$24>>2];
   $26 = $25 + $23;
   HEAPF32[$24>>2] = $26;
   $27 = (($coeff$22) + 1)|0;
   $28 = ($27>>>0)<($19>>>0);
   if ($28) {
    $coeff$22 = $27;
   } else {
    break;
   }
  }
  $29 = (($sample$13) + 1)|0;
  $exitcond = ($29|0)==($data_len|0);
  if ($exitcond) {
   break;
  } else {
   $sample$13 = $29;
  }
 }
 return;
}
function _FLAC__lpc_compute_lp_coefficients($autoc,$max_order,$lp_coeff,$error) {
 $autoc = $autoc|0;
 $max_order = $max_order|0;
 $lp_coeff = $lp_coeff|0;
 $error = $error|0;
 var $$lcssa = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $err$0 = 0.0, $exitcond = 0, $exitcond13 = 0, $indvars$iv$next12 = 0;
 var $indvars$iv$next12$lcssa = 0, $indvars$iv11 = 0, $j$01 = 0, $j$1$lcssa = 0, $j$13 = 0, $j$28 = 0, $lpc = 0, $r$02 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $lpc = sp;
 $0 = +HEAPF32[$autoc>>2];
 $1 = $0;
 $2 = HEAP32[$max_order>>2]|0;
 $err$0 = $1;$indvars$iv11 = 0;
 while(1) {
  $3 = $indvars$iv11 >>> 1;
  $4 = ($indvars$iv11>>>0)<($2>>>0);
  if (!($4)) {
   label = 15;
   break;
  }
  $indvars$iv$next12 = (($indvars$iv11) + 1)|0;
  $5 = (($autoc) + ($indvars$iv$next12<<2)|0);
  $6 = +HEAPF32[$5>>2];
  $7 = -$6;
  $8 = $7;
  $9 = ($indvars$iv11|0)==(0);
  if ($9) {
   $10 = $8 / $err$0;
   $11 = (($lpc) + ($indvars$iv11<<3)|0);
   HEAPF64[$11>>3] = $10;
   $43 = $10;
  } else {
   $j$01 = 0;$r$02 = $8;
   while(1) {
    $12 = (($lpc) + ($j$01<<3)|0);
    $13 = +HEAPF64[$12>>3];
    $14 = (($indvars$iv11) - ($j$01))|0;
    $15 = (($autoc) + ($14<<2)|0);
    $16 = +HEAPF32[$15>>2];
    $17 = $16;
    $18 = $13 * $17;
    $19 = $r$02 - $18;
    $20 = (($j$01) + 1)|0;
    $exitcond = ($20|0)==($indvars$iv11|0);
    if ($exitcond) {
     $$lcssa = $19;
     break;
    } else {
     $j$01 = $20;$r$02 = $19;
    }
   }
   $21 = $$lcssa / $err$0;
   $22 = (($lpc) + ($indvars$iv11<<3)|0);
   HEAPF64[$22>>3] = $21;
   $23 = ($indvars$iv11>>>0)<(2);
   if ($23) {
    $j$1$lcssa = 0;
   } else {
    $24 = (($indvars$iv11) + -1)|0;
    $j$13 = 0;
    while(1) {
     $25 = (($lpc) + ($j$13<<3)|0);
     $26 = +HEAPF64[$25>>3];
     $27 = (($24) - ($j$13))|0;
     $28 = (($lpc) + ($27<<3)|0);
     $29 = +HEAPF64[$28>>3];
     $30 = $21 * $29;
     $31 = $26 + $30;
     HEAPF64[$25>>3] = $31;
     $32 = $21 * $26;
     $33 = +HEAPF64[$28>>3];
     $34 = $32 + $33;
     HEAPF64[$28>>3] = $34;
     $35 = (($j$13) + 1)|0;
     $exitcond13 = ($35|0)==($3|0);
     if ($exitcond13) {
      $j$1$lcssa = $3;
      break;
     } else {
      $j$13 = $35;
     }
    }
   }
   $36 = $indvars$iv11 & 1;
   $37 = ($36|0)==(0);
   if ($37) {
    $43 = $21;
   } else {
    $38 = (($lpc) + ($j$1$lcssa<<3)|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $21 * $39;
    $41 = $39 + $40;
    HEAPF64[$38>>3] = $41;
    $43 = $21;
   }
  }
  $42 = $43 * $43;
  $44 = 1.0 - $42;
  $j$28 = 0;
  while(1) {
   $45 = (($lpc) + ($j$28<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $46;
   $48 = -$47;
   $49 = ((($lp_coeff) + ($indvars$iv11<<7)|0) + ($j$28<<2)|0);
   HEAPF32[$49>>2] = $48;
   $50 = (($j$28) + 1)|0;
   $51 = ($50>>>0)>($indvars$iv11>>>0);
   if ($51) {
    break;
   } else {
    $j$28 = $50;
   }
  }
  $52 = $err$0 * $44;
  $53 = (($error) + ($indvars$iv11<<3)|0);
  HEAPF64[$53>>3] = $52;
  $54 = $52 == 0.0;
  if ($54) {
   $indvars$iv$next12$lcssa = $indvars$iv$next12;
   break;
  } else {
   $err$0 = $52;$indvars$iv11 = $indvars$iv$next12;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
 HEAP32[$max_order>>2] = $indvars$iv$next12$lcssa;
 STACKTOP = sp;return;
}
function _FLAC__lpc_quantize_coefficients($lp_coeff,$order,$precision,$qlp_coeff,$shift) {
 $lp_coeff = $lp_coeff|0;
 $order = $order|0;
 $precision = $precision|0;
 $qlp_coeff = $qlp_coeff|0;
 $shift = $shift|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$neg = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $cmax$07 = 0.0;
 var $cmax$1 = 0.0, $cmax$1$lcssa = 0.0, $error$03 = 0.0, $error1$05 = 0.0, $exitcond = 0, $exitcond12 = 0, $exitcond13 = 0, $fabsf = 0.0, $i$08 = 0, $i$12 = 0, $i$24 = 0, $log2cmax = 0, $q$0 = 0, $q2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $log2cmax = sp;
 $0 = (($precision) + -1)|0;
 $1 = 1 << $0;
 $2 = (0 - ($1))|0;
 $3 = (($1) + -1)|0;
 $4 = ($order|0)==(0);
 if ($4) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $cmax$07 = 0.0;$i$08 = 0;
 }
 while(1) {
  $5 = (($lp_coeff) + ($i$08<<2)|0);
  $6 = +HEAPF32[$5>>2];
  $fabsf = (+Math_abs((+$6)));
  $7 = $fabsf;
  $8 = $7 > $cmax$07;
  $cmax$1 = $8 ? $7 : $cmax$07;
  $9 = (($i$08) + 1)|0;
  $exitcond13 = ($9|0)==($order|0);
  if ($exitcond13) {
   $cmax$1$lcssa = $cmax$1;
   break;
  } else {
   $cmax$07 = $cmax$1;$i$08 = $9;
  }
 }
 $10 = !($cmax$1$lcssa <= 0.0);
 if (!($10)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[1100>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = 1 << $12;
 $14 = (($13) + -1)|0;
 (+_frexp($cmax$1$lcssa,$log2cmax));
 $15 = HEAP32[$log2cmax>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$log2cmax>>2] = $16;
 $17 = (($0) - ($16))|0;
 $18 = (($17) + -1)|0;
 HEAP32[$shift>>2] = $18;
 $19 = ($18|0)>($14|0);
 do {
  if ($19) {
   HEAP32[$shift>>2] = $14;
   $21 = $14;
  } else {
   $$neg = (0 - ($13))|0;
   $20 = ($17|0)>($$neg|0);
   if ($20) {
    $$pr = HEAP32[$shift>>2]|0;
    $21 = $$pr;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $22 = ($21|0)>(-1);
 $23 = ($order|0)==(0);
 if ($22) {
  if ($23) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $error$03 = 0.0;$i$12 = 0;
  }
  while(1) {
   $24 = (($lp_coeff) + ($i$12<<2)|0);
   $25 = +HEAPF32[$24>>2];
   $26 = HEAP32[$shift>>2]|0;
   $27 = 1 << $26;
   $28 = (+($27|0));
   $29 = $25 * $28;
   $30 = $29;
   $31 = $error$03 + $30;
   $32 = (_lround($31)|0);
   $33 = ($32|0)>($3|0);
   $34 = ($32|0)<($2|0);
   $$ = $34 ? $2 : $32;
   $q$0 = $33 ? $3 : $$;
   $35 = (+($q$0|0));
   $36 = $31 - $35;
   $37 = (($qlp_coeff) + ($i$12<<2)|0);
   HEAP32[$37>>2] = $q$0;
   $38 = (($i$12) + 1)|0;
   $exitcond = ($38|0)==($order|0);
   if ($exitcond) {
    $$0 = 0;
    break;
   } else {
    $error$03 = $36;$i$12 = $38;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 if (!($23)) {
  $39 = (0 - ($21))|0;
  $40 = 1 << $39;
  $41 = (+($40|0));
  $error1$05 = 0.0;$i$24 = 0;
  while(1) {
   $42 = (($lp_coeff) + ($i$24<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $43 / $41;
   $45 = $44;
   $46 = $error1$05 + $45;
   $47 = (_lround($46)|0);
   $48 = ($47|0)>($3|0);
   $49 = ($47|0)<($2|0);
   $$1 = $49 ? $2 : $47;
   $q2$0 = $48 ? $3 : $$1;
   $50 = (+($q2$0|0));
   $51 = $46 - $50;
   $52 = (($qlp_coeff) + ($i$24<<2)|0);
   HEAP32[$52>>2] = $q2$0;
   $53 = (($i$24) + 1)|0;
   $exitcond12 = ($53|0)==($order|0);
   if ($exitcond12) {
    break;
   } else {
    $error1$05 = $51;$i$24 = $53;
   }
  }
 }
 HEAP32[$shift>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients($data,$data_len,$qlp_coeff,$order,$lp_quantization,$residual) {
 $data = $data|0;
 $data_len = $data_len|0;
 $qlp_coeff = $qlp_coeff|0;
 $order = $order|0;
 $lp_quantization = $lp_quantization|0;
 $residual = $residual|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond69 = 0, $exitcond70 = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $exitcond74 = 0, $exitcond75 = 0, $exitcond76 = 0, $exitcond77 = 0, $exitcond78 = 0, $exitcond79 = 0, $exitcond80 = 0, $i$025 = 0, $i$1044 = 0, $i$1146 = 0, $i$1248 = 0, $i$126 = 0, $i$228 = 0;
 var $i$330 = 0, $i$432 = 0, $i$534 = 0, $i$636 = 0, $i$738 = 0, $i$840 = 0, $i$942 = 0, $sum$0 = 0, $sum$1 = 0, $sum$10 = 0, $sum$11 = 0, $sum$12 = 0, $sum$13 = 0, $sum$14 = 0, $sum$15 = 0, $sum$16 = 0, $sum$17 = 0, $sum$18 = 0, $sum$19 = 0, $sum$2 = 0;
 var $sum$3 = 0, $sum$4 = 0, $sum$5 = 0, $sum$6 = 0, $sum$7 = 0, $sum$8 = 0, $sum$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($order>>>0)<(13);
 if (!($0)) {
  $1 = ($data_len|0)>(0);
  if (!($1)) {
   return;
  }
  $2 = ((($qlp_coeff)) + 124|0);
  $3 = ((($qlp_coeff)) + 120|0);
  $4 = ((($qlp_coeff)) + 116|0);
  $5 = ((($qlp_coeff)) + 112|0);
  $6 = ((($qlp_coeff)) + 108|0);
  $7 = ((($qlp_coeff)) + 104|0);
  $8 = ((($qlp_coeff)) + 100|0);
  $9 = ((($qlp_coeff)) + 96|0);
  $10 = ((($qlp_coeff)) + 92|0);
  $11 = ((($qlp_coeff)) + 88|0);
  $12 = ((($qlp_coeff)) + 84|0);
  $13 = ((($qlp_coeff)) + 80|0);
  $14 = ((($qlp_coeff)) + 76|0);
  $15 = ((($qlp_coeff)) + 72|0);
  $16 = ((($qlp_coeff)) + 68|0);
  $17 = ((($qlp_coeff)) + 64|0);
  $18 = ((($qlp_coeff)) + 60|0);
  $19 = ((($qlp_coeff)) + 56|0);
  $20 = ((($qlp_coeff)) + 52|0);
  $21 = ((($qlp_coeff)) + 48|0);
  $22 = ((($qlp_coeff)) + 44|0);
  $23 = ((($qlp_coeff)) + 40|0);
  $24 = ((($qlp_coeff)) + 36|0);
  $25 = ((($qlp_coeff)) + 32|0);
  $26 = ((($qlp_coeff)) + 28|0);
  $27 = ((($qlp_coeff)) + 24|0);
  $28 = ((($qlp_coeff)) + 20|0);
  $29 = ((($qlp_coeff)) + 16|0);
  $30 = ((($qlp_coeff)) + 12|0);
  $31 = ((($qlp_coeff)) + 8|0);
  $32 = ((($qlp_coeff)) + 4|0);
  $i$1248 = 0;
  while(1) {
   switch ($order|0) {
   case 32:  {
    $644 = HEAP32[$2>>2]|0;
    $645 = (($i$1248) + -32)|0;
    $646 = (($data) + ($645<<2)|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = Math_imul($647, $644)|0;
    $sum$0 = $648;
    label = 53;
    break;
   }
   case 31:  {
    $sum$0 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $sum$1 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $sum$2 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $sum$3 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $sum$4 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $sum$5 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $sum$6 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $sum$7 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $sum$8 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $sum$9 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $sum$10 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $sum$11 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $sum$12 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $sum$13 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $sum$14 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $sum$15 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $sum$16 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $sum$17 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $sum$18 = 0;
    label = 71;
    break;
   }
   default: {
    $sum$19 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $649 = HEAP32[$3>>2]|0;
    $650 = (($i$1248) + -31)|0;
    $651 = (($data) + ($650<<2)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = Math_imul($652, $649)|0;
    $654 = (($653) + ($sum$0))|0;
    $sum$1 = $654;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $655 = HEAP32[$4>>2]|0;
    $656 = (($i$1248) + -30)|0;
    $657 = (($data) + ($656<<2)|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = Math_imul($658, $655)|0;
    $660 = (($659) + ($sum$1))|0;
    $sum$2 = $660;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $661 = HEAP32[$5>>2]|0;
    $662 = (($i$1248) + -29)|0;
    $663 = (($data) + ($662<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = Math_imul($664, $661)|0;
    $666 = (($665) + ($sum$2))|0;
    $sum$3 = $666;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $667 = HEAP32[$6>>2]|0;
    $668 = (($i$1248) + -28)|0;
    $669 = (($data) + ($668<<2)|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = Math_imul($670, $667)|0;
    $672 = (($671) + ($sum$3))|0;
    $sum$4 = $672;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $673 = HEAP32[$7>>2]|0;
    $674 = (($i$1248) + -27)|0;
    $675 = (($data) + ($674<<2)|0);
    $676 = HEAP32[$675>>2]|0;
    $677 = Math_imul($676, $673)|0;
    $678 = (($677) + ($sum$4))|0;
    $sum$5 = $678;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $679 = HEAP32[$8>>2]|0;
    $680 = (($i$1248) + -26)|0;
    $681 = (($data) + ($680<<2)|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = Math_imul($682, $679)|0;
    $684 = (($683) + ($sum$5))|0;
    $sum$6 = $684;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $685 = HEAP32[$9>>2]|0;
    $686 = (($i$1248) + -25)|0;
    $687 = (($data) + ($686<<2)|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = Math_imul($688, $685)|0;
    $690 = (($689) + ($sum$6))|0;
    $sum$7 = $690;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $691 = HEAP32[$10>>2]|0;
    $692 = (($i$1248) + -24)|0;
    $693 = (($data) + ($692<<2)|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = Math_imul($694, $691)|0;
    $696 = (($695) + ($sum$7))|0;
    $sum$8 = $696;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $697 = HEAP32[$11>>2]|0;
    $698 = (($i$1248) + -23)|0;
    $699 = (($data) + ($698<<2)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = Math_imul($700, $697)|0;
    $702 = (($701) + ($sum$8))|0;
    $sum$9 = $702;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $703 = HEAP32[$12>>2]|0;
    $704 = (($i$1248) + -22)|0;
    $705 = (($data) + ($704<<2)|0);
    $706 = HEAP32[$705>>2]|0;
    $707 = Math_imul($706, $703)|0;
    $708 = (($707) + ($sum$9))|0;
    $sum$10 = $708;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $709 = HEAP32[$13>>2]|0;
    $710 = (($i$1248) + -21)|0;
    $711 = (($data) + ($710<<2)|0);
    $712 = HEAP32[$711>>2]|0;
    $713 = Math_imul($712, $709)|0;
    $714 = (($713) + ($sum$10))|0;
    $sum$11 = $714;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $715 = HEAP32[$14>>2]|0;
    $716 = (($i$1248) + -20)|0;
    $717 = (($data) + ($716<<2)|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = Math_imul($718, $715)|0;
    $720 = (($719) + ($sum$11))|0;
    $sum$12 = $720;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $721 = HEAP32[$15>>2]|0;
    $722 = (($i$1248) + -19)|0;
    $723 = (($data) + ($722<<2)|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = Math_imul($724, $721)|0;
    $726 = (($725) + ($sum$12))|0;
    $sum$13 = $726;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $727 = HEAP32[$16>>2]|0;
    $728 = (($i$1248) + -18)|0;
    $729 = (($data) + ($728<<2)|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = Math_imul($730, $727)|0;
    $732 = (($731) + ($sum$13))|0;
    $sum$14 = $732;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $733 = HEAP32[$17>>2]|0;
    $734 = (($i$1248) + -17)|0;
    $735 = (($data) + ($734<<2)|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = Math_imul($736, $733)|0;
    $738 = (($737) + ($sum$14))|0;
    $sum$15 = $738;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $739 = HEAP32[$18>>2]|0;
    $740 = (($i$1248) + -16)|0;
    $741 = (($data) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = Math_imul($742, $739)|0;
    $744 = (($743) + ($sum$15))|0;
    $sum$16 = $744;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $745 = HEAP32[$19>>2]|0;
    $746 = (($i$1248) + -15)|0;
    $747 = (($data) + ($746<<2)|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = Math_imul($748, $745)|0;
    $750 = (($749) + ($sum$16))|0;
    $sum$17 = $750;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $751 = HEAP32[$20>>2]|0;
    $752 = (($i$1248) + -14)|0;
    $753 = (($data) + ($752<<2)|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = Math_imul($754, $751)|0;
    $756 = (($755) + ($sum$17))|0;
    $sum$18 = $756;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $757 = HEAP32[$21>>2]|0;
    $758 = (($i$1248) + -13)|0;
    $759 = (($data) + ($758<<2)|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = Math_imul($760, $757)|0;
    $762 = (($761) + ($sum$18))|0;
    $763 = HEAP32[$22>>2]|0;
    $764 = (($i$1248) + -12)|0;
    $765 = (($data) + ($764<<2)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = Math_imul($766, $763)|0;
    $768 = (($762) + ($767))|0;
    $769 = HEAP32[$23>>2]|0;
    $770 = (($i$1248) + -11)|0;
    $771 = (($data) + ($770<<2)|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = Math_imul($772, $769)|0;
    $774 = (($768) + ($773))|0;
    $775 = HEAP32[$24>>2]|0;
    $776 = (($i$1248) + -10)|0;
    $777 = (($data) + ($776<<2)|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = Math_imul($778, $775)|0;
    $780 = (($774) + ($779))|0;
    $781 = HEAP32[$25>>2]|0;
    $782 = (($i$1248) + -9)|0;
    $783 = (($data) + ($782<<2)|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = Math_imul($784, $781)|0;
    $786 = (($780) + ($785))|0;
    $787 = HEAP32[$26>>2]|0;
    $788 = (($i$1248) + -8)|0;
    $789 = (($data) + ($788<<2)|0);
    $790 = HEAP32[$789>>2]|0;
    $791 = Math_imul($790, $787)|0;
    $792 = (($786) + ($791))|0;
    $793 = HEAP32[$27>>2]|0;
    $794 = (($i$1248) + -7)|0;
    $795 = (($data) + ($794<<2)|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = Math_imul($796, $793)|0;
    $798 = (($792) + ($797))|0;
    $799 = HEAP32[$28>>2]|0;
    $800 = (($i$1248) + -6)|0;
    $801 = (($data) + ($800<<2)|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = Math_imul($802, $799)|0;
    $804 = (($798) + ($803))|0;
    $805 = HEAP32[$29>>2]|0;
    $806 = (($i$1248) + -5)|0;
    $807 = (($data) + ($806<<2)|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = Math_imul($808, $805)|0;
    $810 = (($804) + ($809))|0;
    $811 = HEAP32[$30>>2]|0;
    $812 = (($i$1248) + -4)|0;
    $813 = (($data) + ($812<<2)|0);
    $814 = HEAP32[$813>>2]|0;
    $815 = Math_imul($814, $811)|0;
    $816 = (($810) + ($815))|0;
    $817 = HEAP32[$31>>2]|0;
    $818 = (($i$1248) + -3)|0;
    $819 = (($data) + ($818<<2)|0);
    $820 = HEAP32[$819>>2]|0;
    $821 = Math_imul($820, $817)|0;
    $822 = (($816) + ($821))|0;
    $823 = HEAP32[$32>>2]|0;
    $824 = (($i$1248) + -2)|0;
    $825 = (($data) + ($824<<2)|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = Math_imul($826, $823)|0;
    $828 = (($822) + ($827))|0;
    $829 = HEAP32[$qlp_coeff>>2]|0;
    $830 = (($i$1248) + -1)|0;
    $831 = (($data) + ($830<<2)|0);
    $832 = HEAP32[$831>>2]|0;
    $833 = Math_imul($832, $829)|0;
    $834 = (($828) + ($833))|0;
    $sum$19 = $834;
   }
   $835 = (($data) + ($i$1248<<2)|0);
   $836 = HEAP32[$835>>2]|0;
   $837 = $sum$19 >> $lp_quantization;
   $838 = (($836) - ($837))|0;
   $839 = (($residual) + ($i$1248<<2)|0);
   HEAP32[$839>>2] = $838;
   $840 = (($i$1248) + 1)|0;
   $exitcond80 = ($840|0)==($data_len|0);
   if ($exitcond80) {
    break;
   } else {
    $i$1248 = $840;
   }
  }
  return;
 }
 $33 = ($order>>>0)>(8);
 if ($33) {
  $34 = ($order>>>0)>(10);
  if ($34) {
   $35 = ($order|0)==(12);
   $36 = ($data_len|0)>(0);
   if ($35) {
    if (!($36)) {
     return;
    }
    $58 = ((($qlp_coeff)) + 44|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($qlp_coeff)) + 40|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($qlp_coeff)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($qlp_coeff)) + 32|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($qlp_coeff)) + 28|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($qlp_coeff)) + 24|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($qlp_coeff)) + 20|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($qlp_coeff)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($qlp_coeff)) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($qlp_coeff)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($qlp_coeff)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = HEAP32[$qlp_coeff>>2]|0;
    $i$025 = 0;
    while(1) {
     $81 = (($i$025) + -12)|0;
     $82 = (($data) + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = Math_imul($83, $59)|0;
     $85 = (($i$025) + -11)|0;
     $86 = (($data) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = Math_imul($87, $61)|0;
     $89 = (($88) + ($84))|0;
     $90 = (($i$025) + -10)|0;
     $91 = (($data) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = Math_imul($92, $63)|0;
     $94 = (($89) + ($93))|0;
     $95 = (($i$025) + -9)|0;
     $96 = (($data) + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = Math_imul($97, $65)|0;
     $99 = (($94) + ($98))|0;
     $100 = (($i$025) + -8)|0;
     $101 = (($data) + ($100<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = Math_imul($102, $67)|0;
     $104 = (($99) + ($103))|0;
     $105 = (($i$025) + -7)|0;
     $106 = (($data) + ($105<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = Math_imul($107, $69)|0;
     $109 = (($104) + ($108))|0;
     $110 = (($i$025) + -6)|0;
     $111 = (($data) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = Math_imul($112, $71)|0;
     $114 = (($109) + ($113))|0;
     $115 = (($i$025) + -5)|0;
     $116 = (($data) + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = Math_imul($117, $73)|0;
     $119 = (($114) + ($118))|0;
     $120 = (($i$025) + -4)|0;
     $121 = (($data) + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = Math_imul($122, $75)|0;
     $124 = (($119) + ($123))|0;
     $125 = (($i$025) + -3)|0;
     $126 = (($data) + ($125<<2)|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = Math_imul($127, $77)|0;
     $129 = (($124) + ($128))|0;
     $130 = (($i$025) + -2)|0;
     $131 = (($data) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = Math_imul($132, $79)|0;
     $134 = (($129) + ($133))|0;
     $135 = (($i$025) + -1)|0;
     $136 = (($data) + ($135<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = Math_imul($137, $80)|0;
     $139 = (($134) + ($138))|0;
     $140 = (($data) + ($i$025<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $139 >> $lp_quantization;
     $143 = (($141) - ($142))|0;
     $144 = (($residual) + ($i$025<<2)|0);
     HEAP32[$144>>2] = $143;
     $145 = (($i$025) + 1)|0;
     $exitcond = ($145|0)==($data_len|0);
     if ($exitcond) {
      break;
     } else {
      $i$025 = $145;
     }
    }
    return;
   } else {
    if (!($36)) {
     return;
    }
    $37 = ((($qlp_coeff)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($qlp_coeff)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($qlp_coeff)) + 32|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($qlp_coeff)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($qlp_coeff)) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($qlp_coeff)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($qlp_coeff)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($qlp_coeff)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($qlp_coeff)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($qlp_coeff)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$qlp_coeff>>2]|0;
    $i$126 = 0;
    while(1) {
     $146 = (($i$126) + -11)|0;
     $147 = (($data) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = Math_imul($148, $38)|0;
     $150 = (($i$126) + -10)|0;
     $151 = (($data) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = Math_imul($152, $40)|0;
     $154 = (($153) + ($149))|0;
     $155 = (($i$126) + -9)|0;
     $156 = (($data) + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = Math_imul($157, $42)|0;
     $159 = (($154) + ($158))|0;
     $160 = (($i$126) + -8)|0;
     $161 = (($data) + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = Math_imul($162, $44)|0;
     $164 = (($159) + ($163))|0;
     $165 = (($i$126) + -7)|0;
     $166 = (($data) + ($165<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = Math_imul($167, $46)|0;
     $169 = (($164) + ($168))|0;
     $170 = (($i$126) + -6)|0;
     $171 = (($data) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = Math_imul($172, $48)|0;
     $174 = (($169) + ($173))|0;
     $175 = (($i$126) + -5)|0;
     $176 = (($data) + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = Math_imul($177, $50)|0;
     $179 = (($174) + ($178))|0;
     $180 = (($i$126) + -4)|0;
     $181 = (($data) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = Math_imul($182, $52)|0;
     $184 = (($179) + ($183))|0;
     $185 = (($i$126) + -3)|0;
     $186 = (($data) + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = Math_imul($187, $54)|0;
     $189 = (($184) + ($188))|0;
     $190 = (($i$126) + -2)|0;
     $191 = (($data) + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = Math_imul($192, $56)|0;
     $194 = (($189) + ($193))|0;
     $195 = (($i$126) + -1)|0;
     $196 = (($data) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = Math_imul($197, $57)|0;
     $199 = (($194) + ($198))|0;
     $200 = (($data) + ($i$126<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $199 >> $lp_quantization;
     $203 = (($201) - ($202))|0;
     $204 = (($residual) + ($i$126<<2)|0);
     HEAP32[$204>>2] = $203;
     $205 = (($i$126) + 1)|0;
     $exitcond69 = ($205|0)==($data_len|0);
     if ($exitcond69) {
      break;
     } else {
      $i$126 = $205;
     }
    }
    return;
   }
  } else {
   $206 = ($order|0)==(10);
   $207 = ($data_len|0)>(0);
   if ($206) {
    if (!($207)) {
     return;
    }
    $225 = ((($qlp_coeff)) + 36|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ((($qlp_coeff)) + 32|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ((($qlp_coeff)) + 28|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ((($qlp_coeff)) + 24|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ((($qlp_coeff)) + 20|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ((($qlp_coeff)) + 16|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ((($qlp_coeff)) + 12|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ((($qlp_coeff)) + 8|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ((($qlp_coeff)) + 4|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = HEAP32[$qlp_coeff>>2]|0;
    $i$228 = 0;
    while(1) {
     $244 = (($i$228) + -10)|0;
     $245 = (($data) + ($244<<2)|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = Math_imul($246, $226)|0;
     $248 = (($i$228) + -9)|0;
     $249 = (($data) + ($248<<2)|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = Math_imul($250, $228)|0;
     $252 = (($251) + ($247))|0;
     $253 = (($i$228) + -8)|0;
     $254 = (($data) + ($253<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = Math_imul($255, $230)|0;
     $257 = (($252) + ($256))|0;
     $258 = (($i$228) + -7)|0;
     $259 = (($data) + ($258<<2)|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = Math_imul($260, $232)|0;
     $262 = (($257) + ($261))|0;
     $263 = (($i$228) + -6)|0;
     $264 = (($data) + ($263<<2)|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = Math_imul($265, $234)|0;
     $267 = (($262) + ($266))|0;
     $268 = (($i$228) + -5)|0;
     $269 = (($data) + ($268<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = Math_imul($270, $236)|0;
     $272 = (($267) + ($271))|0;
     $273 = (($i$228) + -4)|0;
     $274 = (($data) + ($273<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = Math_imul($275, $238)|0;
     $277 = (($272) + ($276))|0;
     $278 = (($i$228) + -3)|0;
     $279 = (($data) + ($278<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = Math_imul($280, $240)|0;
     $282 = (($277) + ($281))|0;
     $283 = (($i$228) + -2)|0;
     $284 = (($data) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = Math_imul($285, $242)|0;
     $287 = (($282) + ($286))|0;
     $288 = (($i$228) + -1)|0;
     $289 = (($data) + ($288<<2)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = Math_imul($290, $243)|0;
     $292 = (($287) + ($291))|0;
     $293 = (($data) + ($i$228<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $292 >> $lp_quantization;
     $296 = (($294) - ($295))|0;
     $297 = (($residual) + ($i$228<<2)|0);
     HEAP32[$297>>2] = $296;
     $298 = (($i$228) + 1)|0;
     $exitcond70 = ($298|0)==($data_len|0);
     if ($exitcond70) {
      break;
     } else {
      $i$228 = $298;
     }
    }
    return;
   } else {
    if (!($207)) {
     return;
    }
    $208 = ((($qlp_coeff)) + 32|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ((($qlp_coeff)) + 28|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ((($qlp_coeff)) + 24|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ((($qlp_coeff)) + 20|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ((($qlp_coeff)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = ((($qlp_coeff)) + 12|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ((($qlp_coeff)) + 8|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = ((($qlp_coeff)) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = HEAP32[$qlp_coeff>>2]|0;
    $i$330 = 0;
    while(1) {
     $299 = (($i$330) + -9)|0;
     $300 = (($data) + ($299<<2)|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = Math_imul($301, $209)|0;
     $303 = (($i$330) + -8)|0;
     $304 = (($data) + ($303<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = Math_imul($305, $211)|0;
     $307 = (($306) + ($302))|0;
     $308 = (($i$330) + -7)|0;
     $309 = (($data) + ($308<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = Math_imul($310, $213)|0;
     $312 = (($307) + ($311))|0;
     $313 = (($i$330) + -6)|0;
     $314 = (($data) + ($313<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = Math_imul($315, $215)|0;
     $317 = (($312) + ($316))|0;
     $318 = (($i$330) + -5)|0;
     $319 = (($data) + ($318<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = Math_imul($320, $217)|0;
     $322 = (($317) + ($321))|0;
     $323 = (($i$330) + -4)|0;
     $324 = (($data) + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = Math_imul($325, $219)|0;
     $327 = (($322) + ($326))|0;
     $328 = (($i$330) + -3)|0;
     $329 = (($data) + ($328<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = Math_imul($330, $221)|0;
     $332 = (($327) + ($331))|0;
     $333 = (($i$330) + -2)|0;
     $334 = (($data) + ($333<<2)|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = Math_imul($335, $223)|0;
     $337 = (($332) + ($336))|0;
     $338 = (($i$330) + -1)|0;
     $339 = (($data) + ($338<<2)|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = Math_imul($340, $224)|0;
     $342 = (($337) + ($341))|0;
     $343 = (($data) + ($i$330<<2)|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = $342 >> $lp_quantization;
     $346 = (($344) - ($345))|0;
     $347 = (($residual) + ($i$330<<2)|0);
     HEAP32[$347>>2] = $346;
     $348 = (($i$330) + 1)|0;
     $exitcond71 = ($348|0)==($data_len|0);
     if ($exitcond71) {
      break;
     } else {
      $i$330 = $348;
     }
    }
    return;
   }
  }
 }
 $349 = ($order>>>0)>(4);
 if ($349) {
  $350 = ($order>>>0)>(6);
  if ($350) {
   $351 = ($order|0)==(8);
   $352 = ($data_len|0)>(0);
   if ($351) {
    if (!($352)) {
     return;
    }
    $366 = ((($qlp_coeff)) + 28|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = ((($qlp_coeff)) + 24|0);
    $369 = HEAP32[$368>>2]|0;
    $370 = ((($qlp_coeff)) + 20|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ((($qlp_coeff)) + 16|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ((($qlp_coeff)) + 12|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ((($qlp_coeff)) + 8|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = ((($qlp_coeff)) + 4|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = HEAP32[$qlp_coeff>>2]|0;
    $i$432 = 0;
    while(1) {
     $381 = (($i$432) + -8)|0;
     $382 = (($data) + ($381<<2)|0);
     $383 = HEAP32[$382>>2]|0;
     $384 = Math_imul($383, $367)|0;
     $385 = (($i$432) + -7)|0;
     $386 = (($data) + ($385<<2)|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = Math_imul($387, $369)|0;
     $389 = (($388) + ($384))|0;
     $390 = (($i$432) + -6)|0;
     $391 = (($data) + ($390<<2)|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = Math_imul($392, $371)|0;
     $394 = (($389) + ($393))|0;
     $395 = (($i$432) + -5)|0;
     $396 = (($data) + ($395<<2)|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = Math_imul($397, $373)|0;
     $399 = (($394) + ($398))|0;
     $400 = (($i$432) + -4)|0;
     $401 = (($data) + ($400<<2)|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = Math_imul($402, $375)|0;
     $404 = (($399) + ($403))|0;
     $405 = (($i$432) + -3)|0;
     $406 = (($data) + ($405<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = Math_imul($407, $377)|0;
     $409 = (($404) + ($408))|0;
     $410 = (($i$432) + -2)|0;
     $411 = (($data) + ($410<<2)|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = Math_imul($412, $379)|0;
     $414 = (($409) + ($413))|0;
     $415 = (($i$432) + -1)|0;
     $416 = (($data) + ($415<<2)|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = Math_imul($417, $380)|0;
     $419 = (($414) + ($418))|0;
     $420 = (($data) + ($i$432<<2)|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = $419 >> $lp_quantization;
     $423 = (($421) - ($422))|0;
     $424 = (($residual) + ($i$432<<2)|0);
     HEAP32[$424>>2] = $423;
     $425 = (($i$432) + 1)|0;
     $exitcond72 = ($425|0)==($data_len|0);
     if ($exitcond72) {
      break;
     } else {
      $i$432 = $425;
     }
    }
    return;
   } else {
    if (!($352)) {
     return;
    }
    $353 = ((($qlp_coeff)) + 24|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ((($qlp_coeff)) + 20|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = ((($qlp_coeff)) + 16|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = ((($qlp_coeff)) + 12|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = ((($qlp_coeff)) + 8|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ((($qlp_coeff)) + 4|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = HEAP32[$qlp_coeff>>2]|0;
    $i$534 = 0;
    while(1) {
     $426 = (($i$534) + -7)|0;
     $427 = (($data) + ($426<<2)|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = Math_imul($428, $354)|0;
     $430 = (($i$534) + -6)|0;
     $431 = (($data) + ($430<<2)|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = Math_imul($432, $356)|0;
     $434 = (($433) + ($429))|0;
     $435 = (($i$534) + -5)|0;
     $436 = (($data) + ($435<<2)|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = Math_imul($437, $358)|0;
     $439 = (($434) + ($438))|0;
     $440 = (($i$534) + -4)|0;
     $441 = (($data) + ($440<<2)|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = Math_imul($442, $360)|0;
     $444 = (($439) + ($443))|0;
     $445 = (($i$534) + -3)|0;
     $446 = (($data) + ($445<<2)|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = Math_imul($447, $362)|0;
     $449 = (($444) + ($448))|0;
     $450 = (($i$534) + -2)|0;
     $451 = (($data) + ($450<<2)|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = Math_imul($452, $364)|0;
     $454 = (($449) + ($453))|0;
     $455 = (($i$534) + -1)|0;
     $456 = (($data) + ($455<<2)|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = Math_imul($457, $365)|0;
     $459 = (($454) + ($458))|0;
     $460 = (($data) + ($i$534<<2)|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = $459 >> $lp_quantization;
     $463 = (($461) - ($462))|0;
     $464 = (($residual) + ($i$534<<2)|0);
     HEAP32[$464>>2] = $463;
     $465 = (($i$534) + 1)|0;
     $exitcond73 = ($465|0)==($data_len|0);
     if ($exitcond73) {
      break;
     } else {
      $i$534 = $465;
     }
    }
    return;
   }
  } else {
   $466 = ($order|0)==(6);
   $467 = ($data_len|0)>(0);
   if ($466) {
    if (!($467)) {
     return;
    }
    $477 = ((($qlp_coeff)) + 20|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ((($qlp_coeff)) + 16|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = ((($qlp_coeff)) + 12|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = ((($qlp_coeff)) + 8|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = ((($qlp_coeff)) + 4|0);
    $486 = HEAP32[$485>>2]|0;
    $487 = HEAP32[$qlp_coeff>>2]|0;
    $i$636 = 0;
    while(1) {
     $488 = (($i$636) + -6)|0;
     $489 = (($data) + ($488<<2)|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = Math_imul($490, $478)|0;
     $492 = (($i$636) + -5)|0;
     $493 = (($data) + ($492<<2)|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = Math_imul($494, $480)|0;
     $496 = (($495) + ($491))|0;
     $497 = (($i$636) + -4)|0;
     $498 = (($data) + ($497<<2)|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = Math_imul($499, $482)|0;
     $501 = (($496) + ($500))|0;
     $502 = (($i$636) + -3)|0;
     $503 = (($data) + ($502<<2)|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = Math_imul($504, $484)|0;
     $506 = (($501) + ($505))|0;
     $507 = (($i$636) + -2)|0;
     $508 = (($data) + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = Math_imul($509, $486)|0;
     $511 = (($506) + ($510))|0;
     $512 = (($i$636) + -1)|0;
     $513 = (($data) + ($512<<2)|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = Math_imul($514, $487)|0;
     $516 = (($511) + ($515))|0;
     $517 = (($data) + ($i$636<<2)|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = $516 >> $lp_quantization;
     $520 = (($518) - ($519))|0;
     $521 = (($residual) + ($i$636<<2)|0);
     HEAP32[$521>>2] = $520;
     $522 = (($i$636) + 1)|0;
     $exitcond74 = ($522|0)==($data_len|0);
     if ($exitcond74) {
      break;
     } else {
      $i$636 = $522;
     }
    }
    return;
   } else {
    if (!($467)) {
     return;
    }
    $468 = ((($qlp_coeff)) + 16|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = ((($qlp_coeff)) + 12|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = ((($qlp_coeff)) + 8|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = ((($qlp_coeff)) + 4|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = HEAP32[$qlp_coeff>>2]|0;
    $i$738 = 0;
    while(1) {
     $523 = (($i$738) + -5)|0;
     $524 = (($data) + ($523<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = Math_imul($525, $469)|0;
     $527 = (($i$738) + -4)|0;
     $528 = (($data) + ($527<<2)|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = Math_imul($529, $471)|0;
     $531 = (($530) + ($526))|0;
     $532 = (($i$738) + -3)|0;
     $533 = (($data) + ($532<<2)|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = Math_imul($534, $473)|0;
     $536 = (($531) + ($535))|0;
     $537 = (($i$738) + -2)|0;
     $538 = (($data) + ($537<<2)|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = Math_imul($539, $475)|0;
     $541 = (($536) + ($540))|0;
     $542 = (($i$738) + -1)|0;
     $543 = (($data) + ($542<<2)|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = Math_imul($544, $476)|0;
     $546 = (($541) + ($545))|0;
     $547 = (($data) + ($i$738<<2)|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $546 >> $lp_quantization;
     $550 = (($548) - ($549))|0;
     $551 = (($residual) + ($i$738<<2)|0);
     HEAP32[$551>>2] = $550;
     $552 = (($i$738) + 1)|0;
     $exitcond75 = ($552|0)==($data_len|0);
     if ($exitcond75) {
      break;
     } else {
      $i$738 = $552;
     }
    }
    return;
   }
  }
 } else {
  $553 = ($order>>>0)>(2);
  if ($553) {
   $554 = ($order|0)==(4);
   $555 = ($data_len|0)>(0);
   if ($554) {
    if (!($555)) {
     return;
    }
    $561 = ((($qlp_coeff)) + 12|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = ((($qlp_coeff)) + 8|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = ((($qlp_coeff)) + 4|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = HEAP32[$qlp_coeff>>2]|0;
    $i$840 = 0;
    while(1) {
     $568 = (($i$840) + -4)|0;
     $569 = (($data) + ($568<<2)|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = Math_imul($570, $562)|0;
     $572 = (($i$840) + -3)|0;
     $573 = (($data) + ($572<<2)|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = Math_imul($574, $564)|0;
     $576 = (($575) + ($571))|0;
     $577 = (($i$840) + -2)|0;
     $578 = (($data) + ($577<<2)|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = Math_imul($579, $566)|0;
     $581 = (($576) + ($580))|0;
     $582 = (($i$840) + -1)|0;
     $583 = (($data) + ($582<<2)|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = Math_imul($584, $567)|0;
     $586 = (($581) + ($585))|0;
     $587 = (($data) + ($i$840<<2)|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = $586 >> $lp_quantization;
     $590 = (($588) - ($589))|0;
     $591 = (($residual) + ($i$840<<2)|0);
     HEAP32[$591>>2] = $590;
     $592 = (($i$840) + 1)|0;
     $exitcond76 = ($592|0)==($data_len|0);
     if ($exitcond76) {
      break;
     } else {
      $i$840 = $592;
     }
    }
    return;
   } else {
    if (!($555)) {
     return;
    }
    $556 = ((($qlp_coeff)) + 8|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = ((($qlp_coeff)) + 4|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = HEAP32[$qlp_coeff>>2]|0;
    $i$942 = 0;
    while(1) {
     $593 = (($i$942) + -3)|0;
     $594 = (($data) + ($593<<2)|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = Math_imul($595, $557)|0;
     $597 = (($i$942) + -2)|0;
     $598 = (($data) + ($597<<2)|0);
     $599 = HEAP32[$598>>2]|0;
     $600 = Math_imul($599, $559)|0;
     $601 = (($600) + ($596))|0;
     $602 = (($i$942) + -1)|0;
     $603 = (($data) + ($602<<2)|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = Math_imul($604, $560)|0;
     $606 = (($601) + ($605))|0;
     $607 = (($data) + ($i$942<<2)|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = $606 >> $lp_quantization;
     $610 = (($608) - ($609))|0;
     $611 = (($residual) + ($i$942<<2)|0);
     HEAP32[$611>>2] = $610;
     $612 = (($i$942) + 1)|0;
     $exitcond77 = ($612|0)==($data_len|0);
     if ($exitcond77) {
      break;
     } else {
      $i$942 = $612;
     }
    }
    return;
   }
  } else {
   $613 = ($order|0)==(2);
   $614 = ($data_len|0)>(0);
   if ($613) {
    if (!($614)) {
     return;
    }
    $616 = ((($qlp_coeff)) + 4|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = HEAP32[$qlp_coeff>>2]|0;
    $i$1044 = 0;
    while(1) {
     $619 = (($i$1044) + -2)|0;
     $620 = (($data) + ($619<<2)|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = Math_imul($621, $617)|0;
     $623 = (($i$1044) + -1)|0;
     $624 = (($data) + ($623<<2)|0);
     $625 = HEAP32[$624>>2]|0;
     $626 = Math_imul($625, $618)|0;
     $627 = (($626) + ($622))|0;
     $628 = (($data) + ($i$1044<<2)|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $627 >> $lp_quantization;
     $631 = (($629) - ($630))|0;
     $632 = (($residual) + ($i$1044<<2)|0);
     HEAP32[$632>>2] = $631;
     $633 = (($i$1044) + 1)|0;
     $exitcond78 = ($633|0)==($data_len|0);
     if ($exitcond78) {
      break;
     } else {
      $i$1044 = $633;
     }
    }
    return;
   } else {
    if (!($614)) {
     return;
    }
    $615 = HEAP32[$qlp_coeff>>2]|0;
    $i$1146 = 0;
    while(1) {
     $634 = (($data) + ($i$1146<<2)|0);
     $635 = HEAP32[$634>>2]|0;
     $636 = (($i$1146) + -1)|0;
     $637 = (($data) + ($636<<2)|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = Math_imul($638, $615)|0;
     $640 = $639 >> $lp_quantization;
     $641 = (($635) - ($640))|0;
     $642 = (($residual) + ($i$1146<<2)|0);
     HEAP32[$642>>2] = $641;
     $643 = (($i$1146) + 1)|0;
     $exitcond79 = ($643|0)==($data_len|0);
     if ($exitcond79) {
      break;
     } else {
      $i$1146 = $643;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients_wide($data,$data_len,$qlp_coeff,$order,$lp_quantization,$residual) {
 $data = $data|0;
 $data_len = $data_len|0;
 $qlp_coeff = $qlp_coeff|0;
 $order = $order|0;
 $lp_quantization = $lp_quantization|0;
 $residual = $residual|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $exitcond = 0, $exitcond69 = 0, $exitcond70 = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $exitcond74 = 0, $exitcond75 = 0, $exitcond76 = 0, $exitcond77 = 0, $exitcond78 = 0, $exitcond79 = 0, $exitcond80 = 0, $i$025 = 0, $i$1044 = 0, $i$1146 = 0, $i$1248 = 0, $i$126 = 0, $i$228 = 0;
 var $i$330 = 0, $i$432 = 0, $i$534 = 0, $i$636 = 0, $i$738 = 0, $i$840 = 0, $i$942 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($order>>>0)<(13);
 if (!($0)) {
  $1 = ($data_len|0)>(0);
  if (!($1)) {
   return;
  }
  $2 = ((($qlp_coeff)) + 124|0);
  $3 = ((($qlp_coeff)) + 120|0);
  $4 = ((($qlp_coeff)) + 116|0);
  $5 = ((($qlp_coeff)) + 112|0);
  $6 = ((($qlp_coeff)) + 108|0);
  $7 = ((($qlp_coeff)) + 104|0);
  $8 = ((($qlp_coeff)) + 100|0);
  $9 = ((($qlp_coeff)) + 96|0);
  $10 = ((($qlp_coeff)) + 92|0);
  $11 = ((($qlp_coeff)) + 88|0);
  $12 = ((($qlp_coeff)) + 84|0);
  $13 = ((($qlp_coeff)) + 80|0);
  $14 = ((($qlp_coeff)) + 76|0);
  $15 = ((($qlp_coeff)) + 72|0);
  $16 = ((($qlp_coeff)) + 68|0);
  $17 = ((($qlp_coeff)) + 64|0);
  $18 = ((($qlp_coeff)) + 60|0);
  $19 = ((($qlp_coeff)) + 56|0);
  $20 = ((($qlp_coeff)) + 52|0);
  $21 = ((($qlp_coeff)) + 48|0);
  $22 = ((($qlp_coeff)) + 44|0);
  $23 = ((($qlp_coeff)) + 40|0);
  $24 = ((($qlp_coeff)) + 36|0);
  $25 = ((($qlp_coeff)) + 32|0);
  $26 = ((($qlp_coeff)) + 28|0);
  $27 = ((($qlp_coeff)) + 24|0);
  $28 = ((($qlp_coeff)) + 20|0);
  $29 = ((($qlp_coeff)) + 16|0);
  $30 = ((($qlp_coeff)) + 12|0);
  $31 = ((($qlp_coeff)) + 8|0);
  $32 = ((($qlp_coeff)) + 4|0);
  $i$1248 = 0;
  while(1) {
   switch ($order|0) {
   case 32:  {
    $1112 = HEAP32[$2>>2]|0;
    $1113 = ($1112|0)<(0);
    $1114 = $1113 << 31 >> 31;
    $1115 = (($i$1248) + -32)|0;
    $1116 = (($data) + ($1115<<2)|0);
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = ($1117|0)<(0);
    $1119 = $1118 << 31 >> 31;
    $1120 = (___muldi3(($1117|0),($1119|0),($1112|0),($1114|0))|0);
    $1121 = tempRet0;
    $1132 = $1120;$1133 = $1121;
    label = 53;
    break;
   }
   case 31:  {
    $1132 = 0;$1133 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $1146 = 0;$1147 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $1160 = 0;$1161 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $1174 = 0;$1175 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $1188 = 0;$1189 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $1202 = 0;$1203 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $1216 = 0;$1217 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $1230 = 0;$1231 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $1244 = 0;$1245 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $1258 = 0;$1259 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $1272 = 0;$1273 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $1286 = 0;$1287 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $1300 = 0;$1301 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $1314 = 0;$1315 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $1328 = 0;$1329 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $1342 = 0;$1343 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $1356 = 0;$1357 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $1370 = 0;$1371 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $1384 = 0;$1385 = 0;
    label = 71;
    break;
   }
   default: {
    $1534 = 0;$1535 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $1122 = HEAP32[$3>>2]|0;
    $1123 = ($1122|0)<(0);
    $1124 = $1123 << 31 >> 31;
    $1125 = (($i$1248) + -31)|0;
    $1126 = (($data) + ($1125<<2)|0);
    $1127 = HEAP32[$1126>>2]|0;
    $1128 = ($1127|0)<(0);
    $1129 = $1128 << 31 >> 31;
    $1130 = (___muldi3(($1127|0),($1129|0),($1122|0),($1124|0))|0);
    $1131 = tempRet0;
    $1134 = (_i64Add(($1130|0),($1131|0),($1132|0),($1133|0))|0);
    $1135 = tempRet0;
    $1146 = $1134;$1147 = $1135;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $1136 = HEAP32[$4>>2]|0;
    $1137 = ($1136|0)<(0);
    $1138 = $1137 << 31 >> 31;
    $1139 = (($i$1248) + -30)|0;
    $1140 = (($data) + ($1139<<2)|0);
    $1141 = HEAP32[$1140>>2]|0;
    $1142 = ($1141|0)<(0);
    $1143 = $1142 << 31 >> 31;
    $1144 = (___muldi3(($1141|0),($1143|0),($1136|0),($1138|0))|0);
    $1145 = tempRet0;
    $1148 = (_i64Add(($1144|0),($1145|0),($1146|0),($1147|0))|0);
    $1149 = tempRet0;
    $1160 = $1148;$1161 = $1149;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $1150 = HEAP32[$5>>2]|0;
    $1151 = ($1150|0)<(0);
    $1152 = $1151 << 31 >> 31;
    $1153 = (($i$1248) + -29)|0;
    $1154 = (($data) + ($1153<<2)|0);
    $1155 = HEAP32[$1154>>2]|0;
    $1156 = ($1155|0)<(0);
    $1157 = $1156 << 31 >> 31;
    $1158 = (___muldi3(($1155|0),($1157|0),($1150|0),($1152|0))|0);
    $1159 = tempRet0;
    $1162 = (_i64Add(($1158|0),($1159|0),($1160|0),($1161|0))|0);
    $1163 = tempRet0;
    $1174 = $1162;$1175 = $1163;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $1164 = HEAP32[$6>>2]|0;
    $1165 = ($1164|0)<(0);
    $1166 = $1165 << 31 >> 31;
    $1167 = (($i$1248) + -28)|0;
    $1168 = (($data) + ($1167<<2)|0);
    $1169 = HEAP32[$1168>>2]|0;
    $1170 = ($1169|0)<(0);
    $1171 = $1170 << 31 >> 31;
    $1172 = (___muldi3(($1169|0),($1171|0),($1164|0),($1166|0))|0);
    $1173 = tempRet0;
    $1176 = (_i64Add(($1172|0),($1173|0),($1174|0),($1175|0))|0);
    $1177 = tempRet0;
    $1188 = $1176;$1189 = $1177;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $1178 = HEAP32[$7>>2]|0;
    $1179 = ($1178|0)<(0);
    $1180 = $1179 << 31 >> 31;
    $1181 = (($i$1248) + -27)|0;
    $1182 = (($data) + ($1181<<2)|0);
    $1183 = HEAP32[$1182>>2]|0;
    $1184 = ($1183|0)<(0);
    $1185 = $1184 << 31 >> 31;
    $1186 = (___muldi3(($1183|0),($1185|0),($1178|0),($1180|0))|0);
    $1187 = tempRet0;
    $1190 = (_i64Add(($1186|0),($1187|0),($1188|0),($1189|0))|0);
    $1191 = tempRet0;
    $1202 = $1190;$1203 = $1191;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $1192 = HEAP32[$8>>2]|0;
    $1193 = ($1192|0)<(0);
    $1194 = $1193 << 31 >> 31;
    $1195 = (($i$1248) + -26)|0;
    $1196 = (($data) + ($1195<<2)|0);
    $1197 = HEAP32[$1196>>2]|0;
    $1198 = ($1197|0)<(0);
    $1199 = $1198 << 31 >> 31;
    $1200 = (___muldi3(($1197|0),($1199|0),($1192|0),($1194|0))|0);
    $1201 = tempRet0;
    $1204 = (_i64Add(($1200|0),($1201|0),($1202|0),($1203|0))|0);
    $1205 = tempRet0;
    $1216 = $1204;$1217 = $1205;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $1206 = HEAP32[$9>>2]|0;
    $1207 = ($1206|0)<(0);
    $1208 = $1207 << 31 >> 31;
    $1209 = (($i$1248) + -25)|0;
    $1210 = (($data) + ($1209<<2)|0);
    $1211 = HEAP32[$1210>>2]|0;
    $1212 = ($1211|0)<(0);
    $1213 = $1212 << 31 >> 31;
    $1214 = (___muldi3(($1211|0),($1213|0),($1206|0),($1208|0))|0);
    $1215 = tempRet0;
    $1218 = (_i64Add(($1214|0),($1215|0),($1216|0),($1217|0))|0);
    $1219 = tempRet0;
    $1230 = $1218;$1231 = $1219;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $1220 = HEAP32[$10>>2]|0;
    $1221 = ($1220|0)<(0);
    $1222 = $1221 << 31 >> 31;
    $1223 = (($i$1248) + -24)|0;
    $1224 = (($data) + ($1223<<2)|0);
    $1225 = HEAP32[$1224>>2]|0;
    $1226 = ($1225|0)<(0);
    $1227 = $1226 << 31 >> 31;
    $1228 = (___muldi3(($1225|0),($1227|0),($1220|0),($1222|0))|0);
    $1229 = tempRet0;
    $1232 = (_i64Add(($1228|0),($1229|0),($1230|0),($1231|0))|0);
    $1233 = tempRet0;
    $1244 = $1232;$1245 = $1233;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $1234 = HEAP32[$11>>2]|0;
    $1235 = ($1234|0)<(0);
    $1236 = $1235 << 31 >> 31;
    $1237 = (($i$1248) + -23)|0;
    $1238 = (($data) + ($1237<<2)|0);
    $1239 = HEAP32[$1238>>2]|0;
    $1240 = ($1239|0)<(0);
    $1241 = $1240 << 31 >> 31;
    $1242 = (___muldi3(($1239|0),($1241|0),($1234|0),($1236|0))|0);
    $1243 = tempRet0;
    $1246 = (_i64Add(($1242|0),($1243|0),($1244|0),($1245|0))|0);
    $1247 = tempRet0;
    $1258 = $1246;$1259 = $1247;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $1248 = HEAP32[$12>>2]|0;
    $1249 = ($1248|0)<(0);
    $1250 = $1249 << 31 >> 31;
    $1251 = (($i$1248) + -22)|0;
    $1252 = (($data) + ($1251<<2)|0);
    $1253 = HEAP32[$1252>>2]|0;
    $1254 = ($1253|0)<(0);
    $1255 = $1254 << 31 >> 31;
    $1256 = (___muldi3(($1253|0),($1255|0),($1248|0),($1250|0))|0);
    $1257 = tempRet0;
    $1260 = (_i64Add(($1256|0),($1257|0),($1258|0),($1259|0))|0);
    $1261 = tempRet0;
    $1272 = $1260;$1273 = $1261;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $1262 = HEAP32[$13>>2]|0;
    $1263 = ($1262|0)<(0);
    $1264 = $1263 << 31 >> 31;
    $1265 = (($i$1248) + -21)|0;
    $1266 = (($data) + ($1265<<2)|0);
    $1267 = HEAP32[$1266>>2]|0;
    $1268 = ($1267|0)<(0);
    $1269 = $1268 << 31 >> 31;
    $1270 = (___muldi3(($1267|0),($1269|0),($1262|0),($1264|0))|0);
    $1271 = tempRet0;
    $1274 = (_i64Add(($1270|0),($1271|0),($1272|0),($1273|0))|0);
    $1275 = tempRet0;
    $1286 = $1274;$1287 = $1275;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $1276 = HEAP32[$14>>2]|0;
    $1277 = ($1276|0)<(0);
    $1278 = $1277 << 31 >> 31;
    $1279 = (($i$1248) + -20)|0;
    $1280 = (($data) + ($1279<<2)|0);
    $1281 = HEAP32[$1280>>2]|0;
    $1282 = ($1281|0)<(0);
    $1283 = $1282 << 31 >> 31;
    $1284 = (___muldi3(($1281|0),($1283|0),($1276|0),($1278|0))|0);
    $1285 = tempRet0;
    $1288 = (_i64Add(($1284|0),($1285|0),($1286|0),($1287|0))|0);
    $1289 = tempRet0;
    $1300 = $1288;$1301 = $1289;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $1290 = HEAP32[$15>>2]|0;
    $1291 = ($1290|0)<(0);
    $1292 = $1291 << 31 >> 31;
    $1293 = (($i$1248) + -19)|0;
    $1294 = (($data) + ($1293<<2)|0);
    $1295 = HEAP32[$1294>>2]|0;
    $1296 = ($1295|0)<(0);
    $1297 = $1296 << 31 >> 31;
    $1298 = (___muldi3(($1295|0),($1297|0),($1290|0),($1292|0))|0);
    $1299 = tempRet0;
    $1302 = (_i64Add(($1298|0),($1299|0),($1300|0),($1301|0))|0);
    $1303 = tempRet0;
    $1314 = $1302;$1315 = $1303;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $1304 = HEAP32[$16>>2]|0;
    $1305 = ($1304|0)<(0);
    $1306 = $1305 << 31 >> 31;
    $1307 = (($i$1248) + -18)|0;
    $1308 = (($data) + ($1307<<2)|0);
    $1309 = HEAP32[$1308>>2]|0;
    $1310 = ($1309|0)<(0);
    $1311 = $1310 << 31 >> 31;
    $1312 = (___muldi3(($1309|0),($1311|0),($1304|0),($1306|0))|0);
    $1313 = tempRet0;
    $1316 = (_i64Add(($1312|0),($1313|0),($1314|0),($1315|0))|0);
    $1317 = tempRet0;
    $1328 = $1316;$1329 = $1317;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $1318 = HEAP32[$17>>2]|0;
    $1319 = ($1318|0)<(0);
    $1320 = $1319 << 31 >> 31;
    $1321 = (($i$1248) + -17)|0;
    $1322 = (($data) + ($1321<<2)|0);
    $1323 = HEAP32[$1322>>2]|0;
    $1324 = ($1323|0)<(0);
    $1325 = $1324 << 31 >> 31;
    $1326 = (___muldi3(($1323|0),($1325|0),($1318|0),($1320|0))|0);
    $1327 = tempRet0;
    $1330 = (_i64Add(($1326|0),($1327|0),($1328|0),($1329|0))|0);
    $1331 = tempRet0;
    $1342 = $1330;$1343 = $1331;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $1332 = HEAP32[$18>>2]|0;
    $1333 = ($1332|0)<(0);
    $1334 = $1333 << 31 >> 31;
    $1335 = (($i$1248) + -16)|0;
    $1336 = (($data) + ($1335<<2)|0);
    $1337 = HEAP32[$1336>>2]|0;
    $1338 = ($1337|0)<(0);
    $1339 = $1338 << 31 >> 31;
    $1340 = (___muldi3(($1337|0),($1339|0),($1332|0),($1334|0))|0);
    $1341 = tempRet0;
    $1344 = (_i64Add(($1340|0),($1341|0),($1342|0),($1343|0))|0);
    $1345 = tempRet0;
    $1356 = $1344;$1357 = $1345;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $1346 = HEAP32[$19>>2]|0;
    $1347 = ($1346|0)<(0);
    $1348 = $1347 << 31 >> 31;
    $1349 = (($i$1248) + -15)|0;
    $1350 = (($data) + ($1349<<2)|0);
    $1351 = HEAP32[$1350>>2]|0;
    $1352 = ($1351|0)<(0);
    $1353 = $1352 << 31 >> 31;
    $1354 = (___muldi3(($1351|0),($1353|0),($1346|0),($1348|0))|0);
    $1355 = tempRet0;
    $1358 = (_i64Add(($1354|0),($1355|0),($1356|0),($1357|0))|0);
    $1359 = tempRet0;
    $1370 = $1358;$1371 = $1359;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $1360 = HEAP32[$20>>2]|0;
    $1361 = ($1360|0)<(0);
    $1362 = $1361 << 31 >> 31;
    $1363 = (($i$1248) + -14)|0;
    $1364 = (($data) + ($1363<<2)|0);
    $1365 = HEAP32[$1364>>2]|0;
    $1366 = ($1365|0)<(0);
    $1367 = $1366 << 31 >> 31;
    $1368 = (___muldi3(($1365|0),($1367|0),($1360|0),($1362|0))|0);
    $1369 = tempRet0;
    $1372 = (_i64Add(($1368|0),($1369|0),($1370|0),($1371|0))|0);
    $1373 = tempRet0;
    $1384 = $1372;$1385 = $1373;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $1374 = HEAP32[$21>>2]|0;
    $1375 = ($1374|0)<(0);
    $1376 = $1375 << 31 >> 31;
    $1377 = (($i$1248) + -13)|0;
    $1378 = (($data) + ($1377<<2)|0);
    $1379 = HEAP32[$1378>>2]|0;
    $1380 = ($1379|0)<(0);
    $1381 = $1380 << 31 >> 31;
    $1382 = (___muldi3(($1379|0),($1381|0),($1374|0),($1376|0))|0);
    $1383 = tempRet0;
    $1386 = (_i64Add(($1382|0),($1383|0),($1384|0),($1385|0))|0);
    $1387 = tempRet0;
    $1388 = HEAP32[$22>>2]|0;
    $1389 = ($1388|0)<(0);
    $1390 = $1389 << 31 >> 31;
    $1391 = (($i$1248) + -12)|0;
    $1392 = (($data) + ($1391<<2)|0);
    $1393 = HEAP32[$1392>>2]|0;
    $1394 = ($1393|0)<(0);
    $1395 = $1394 << 31 >> 31;
    $1396 = (___muldi3(($1393|0),($1395|0),($1388|0),($1390|0))|0);
    $1397 = tempRet0;
    $1398 = (_i64Add(($1386|0),($1387|0),($1396|0),($1397|0))|0);
    $1399 = tempRet0;
    $1400 = HEAP32[$23>>2]|0;
    $1401 = ($1400|0)<(0);
    $1402 = $1401 << 31 >> 31;
    $1403 = (($i$1248) + -11)|0;
    $1404 = (($data) + ($1403<<2)|0);
    $1405 = HEAP32[$1404>>2]|0;
    $1406 = ($1405|0)<(0);
    $1407 = $1406 << 31 >> 31;
    $1408 = (___muldi3(($1405|0),($1407|0),($1400|0),($1402|0))|0);
    $1409 = tempRet0;
    $1410 = (_i64Add(($1398|0),($1399|0),($1408|0),($1409|0))|0);
    $1411 = tempRet0;
    $1412 = HEAP32[$24>>2]|0;
    $1413 = ($1412|0)<(0);
    $1414 = $1413 << 31 >> 31;
    $1415 = (($i$1248) + -10)|0;
    $1416 = (($data) + ($1415<<2)|0);
    $1417 = HEAP32[$1416>>2]|0;
    $1418 = ($1417|0)<(0);
    $1419 = $1418 << 31 >> 31;
    $1420 = (___muldi3(($1417|0),($1419|0),($1412|0),($1414|0))|0);
    $1421 = tempRet0;
    $1422 = (_i64Add(($1410|0),($1411|0),($1420|0),($1421|0))|0);
    $1423 = tempRet0;
    $1424 = HEAP32[$25>>2]|0;
    $1425 = ($1424|0)<(0);
    $1426 = $1425 << 31 >> 31;
    $1427 = (($i$1248) + -9)|0;
    $1428 = (($data) + ($1427<<2)|0);
    $1429 = HEAP32[$1428>>2]|0;
    $1430 = ($1429|0)<(0);
    $1431 = $1430 << 31 >> 31;
    $1432 = (___muldi3(($1429|0),($1431|0),($1424|0),($1426|0))|0);
    $1433 = tempRet0;
    $1434 = (_i64Add(($1422|0),($1423|0),($1432|0),($1433|0))|0);
    $1435 = tempRet0;
    $1436 = HEAP32[$26>>2]|0;
    $1437 = ($1436|0)<(0);
    $1438 = $1437 << 31 >> 31;
    $1439 = (($i$1248) + -8)|0;
    $1440 = (($data) + ($1439<<2)|0);
    $1441 = HEAP32[$1440>>2]|0;
    $1442 = ($1441|0)<(0);
    $1443 = $1442 << 31 >> 31;
    $1444 = (___muldi3(($1441|0),($1443|0),($1436|0),($1438|0))|0);
    $1445 = tempRet0;
    $1446 = (_i64Add(($1434|0),($1435|0),($1444|0),($1445|0))|0);
    $1447 = tempRet0;
    $1448 = HEAP32[$27>>2]|0;
    $1449 = ($1448|0)<(0);
    $1450 = $1449 << 31 >> 31;
    $1451 = (($i$1248) + -7)|0;
    $1452 = (($data) + ($1451<<2)|0);
    $1453 = HEAP32[$1452>>2]|0;
    $1454 = ($1453|0)<(0);
    $1455 = $1454 << 31 >> 31;
    $1456 = (___muldi3(($1453|0),($1455|0),($1448|0),($1450|0))|0);
    $1457 = tempRet0;
    $1458 = (_i64Add(($1446|0),($1447|0),($1456|0),($1457|0))|0);
    $1459 = tempRet0;
    $1460 = HEAP32[$28>>2]|0;
    $1461 = ($1460|0)<(0);
    $1462 = $1461 << 31 >> 31;
    $1463 = (($i$1248) + -6)|0;
    $1464 = (($data) + ($1463<<2)|0);
    $1465 = HEAP32[$1464>>2]|0;
    $1466 = ($1465|0)<(0);
    $1467 = $1466 << 31 >> 31;
    $1468 = (___muldi3(($1465|0),($1467|0),($1460|0),($1462|0))|0);
    $1469 = tempRet0;
    $1470 = (_i64Add(($1458|0),($1459|0),($1468|0),($1469|0))|0);
    $1471 = tempRet0;
    $1472 = HEAP32[$29>>2]|0;
    $1473 = ($1472|0)<(0);
    $1474 = $1473 << 31 >> 31;
    $1475 = (($i$1248) + -5)|0;
    $1476 = (($data) + ($1475<<2)|0);
    $1477 = HEAP32[$1476>>2]|0;
    $1478 = ($1477|0)<(0);
    $1479 = $1478 << 31 >> 31;
    $1480 = (___muldi3(($1477|0),($1479|0),($1472|0),($1474|0))|0);
    $1481 = tempRet0;
    $1482 = (_i64Add(($1470|0),($1471|0),($1480|0),($1481|0))|0);
    $1483 = tempRet0;
    $1484 = HEAP32[$30>>2]|0;
    $1485 = ($1484|0)<(0);
    $1486 = $1485 << 31 >> 31;
    $1487 = (($i$1248) + -4)|0;
    $1488 = (($data) + ($1487<<2)|0);
    $1489 = HEAP32[$1488>>2]|0;
    $1490 = ($1489|0)<(0);
    $1491 = $1490 << 31 >> 31;
    $1492 = (___muldi3(($1489|0),($1491|0),($1484|0),($1486|0))|0);
    $1493 = tempRet0;
    $1494 = (_i64Add(($1482|0),($1483|0),($1492|0),($1493|0))|0);
    $1495 = tempRet0;
    $1496 = HEAP32[$31>>2]|0;
    $1497 = ($1496|0)<(0);
    $1498 = $1497 << 31 >> 31;
    $1499 = (($i$1248) + -3)|0;
    $1500 = (($data) + ($1499<<2)|0);
    $1501 = HEAP32[$1500>>2]|0;
    $1502 = ($1501|0)<(0);
    $1503 = $1502 << 31 >> 31;
    $1504 = (___muldi3(($1501|0),($1503|0),($1496|0),($1498|0))|0);
    $1505 = tempRet0;
    $1506 = (_i64Add(($1494|0),($1495|0),($1504|0),($1505|0))|0);
    $1507 = tempRet0;
    $1508 = HEAP32[$32>>2]|0;
    $1509 = ($1508|0)<(0);
    $1510 = $1509 << 31 >> 31;
    $1511 = (($i$1248) + -2)|0;
    $1512 = (($data) + ($1511<<2)|0);
    $1513 = HEAP32[$1512>>2]|0;
    $1514 = ($1513|0)<(0);
    $1515 = $1514 << 31 >> 31;
    $1516 = (___muldi3(($1513|0),($1515|0),($1508|0),($1510|0))|0);
    $1517 = tempRet0;
    $1518 = (_i64Add(($1506|0),($1507|0),($1516|0),($1517|0))|0);
    $1519 = tempRet0;
    $1520 = HEAP32[$qlp_coeff>>2]|0;
    $1521 = ($1520|0)<(0);
    $1522 = $1521 << 31 >> 31;
    $1523 = (($i$1248) + -1)|0;
    $1524 = (($data) + ($1523<<2)|0);
    $1525 = HEAP32[$1524>>2]|0;
    $1526 = ($1525|0)<(0);
    $1527 = $1526 << 31 >> 31;
    $1528 = (___muldi3(($1525|0),($1527|0),($1520|0),($1522|0))|0);
    $1529 = tempRet0;
    $1530 = (_i64Add(($1518|0),($1519|0),($1528|0),($1529|0))|0);
    $1531 = tempRet0;
    $1534 = $1530;$1535 = $1531;
   }
   $1532 = (($data) + ($i$1248<<2)|0);
   $1533 = HEAP32[$1532>>2]|0;
   $1536 = (_bitshift64Ashr(($1534|0),($1535|0),($lp_quantization|0))|0);
   $1537 = tempRet0;
   $1538 = (($1533) - ($1536))|0;
   $1539 = (($residual) + ($i$1248<<2)|0);
   HEAP32[$1539>>2] = $1538;
   $1540 = (($i$1248) + 1)|0;
   $exitcond80 = ($1540|0)==($data_len|0);
   if ($exitcond80) {
    break;
   } else {
    $i$1248 = $1540;
   }
  }
  return;
 }
 $33 = ($order>>>0)>(8);
 if ($33) {
  $34 = ($order>>>0)>(10);
  if ($34) {
   $35 = ($order|0)==(12);
   $36 = ($data_len|0)>(0);
   if ($35) {
    if (!($36)) {
     return;
    }
    $80 = ((($qlp_coeff)) + 44|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<(0);
    $83 = $82 << 31 >> 31;
    $84 = ((($qlp_coeff)) + 40|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)<(0);
    $87 = $86 << 31 >> 31;
    $88 = ((($qlp_coeff)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)<(0);
    $91 = $90 << 31 >> 31;
    $92 = ((($qlp_coeff)) + 32|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)<(0);
    $95 = $94 << 31 >> 31;
    $96 = ((($qlp_coeff)) + 28|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)<(0);
    $99 = $98 << 31 >> 31;
    $100 = ((($qlp_coeff)) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)<(0);
    $103 = $102 << 31 >> 31;
    $104 = ((($qlp_coeff)) + 20|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)<(0);
    $107 = $106 << 31 >> 31;
    $108 = ((($qlp_coeff)) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)<(0);
    $111 = $110 << 31 >> 31;
    $112 = ((($qlp_coeff)) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)<(0);
    $115 = $114 << 31 >> 31;
    $116 = ((($qlp_coeff)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)<(0);
    $119 = $118 << 31 >> 31;
    $120 = ((($qlp_coeff)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)<(0);
    $123 = $122 << 31 >> 31;
    $124 = HEAP32[$qlp_coeff>>2]|0;
    $125 = ($124|0)<(0);
    $126 = $125 << 31 >> 31;
    $i$025 = 0;
    while(1) {
     $127 = (($i$025) + -12)|0;
     $128 = (($data) + ($127<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)<(0);
     $131 = $130 << 31 >> 31;
     $132 = (___muldi3(($129|0),($131|0),($81|0),($83|0))|0);
     $133 = tempRet0;
     $134 = (($i$025) + -11)|0;
     $135 = (($data) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)<(0);
     $138 = $137 << 31 >> 31;
     $139 = (___muldi3(($136|0),($138|0),($85|0),($87|0))|0);
     $140 = tempRet0;
     $141 = (_i64Add(($139|0),($140|0),($132|0),($133|0))|0);
     $142 = tempRet0;
     $143 = (($i$025) + -10)|0;
     $144 = (($data) + ($143<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)<(0);
     $147 = $146 << 31 >> 31;
     $148 = (___muldi3(($145|0),($147|0),($89|0),($91|0))|0);
     $149 = tempRet0;
     $150 = (_i64Add(($141|0),($142|0),($148|0),($149|0))|0);
     $151 = tempRet0;
     $152 = (($i$025) + -9)|0;
     $153 = (($data) + ($152<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)<(0);
     $156 = $155 << 31 >> 31;
     $157 = (___muldi3(($154|0),($156|0),($93|0),($95|0))|0);
     $158 = tempRet0;
     $159 = (_i64Add(($150|0),($151|0),($157|0),($158|0))|0);
     $160 = tempRet0;
     $161 = (($i$025) + -8)|0;
     $162 = (($data) + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)<(0);
     $165 = $164 << 31 >> 31;
     $166 = (___muldi3(($163|0),($165|0),($97|0),($99|0))|0);
     $167 = tempRet0;
     $168 = (_i64Add(($159|0),($160|0),($166|0),($167|0))|0);
     $169 = tempRet0;
     $170 = (($i$025) + -7)|0;
     $171 = (($data) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = (___muldi3(($172|0),($174|0),($101|0),($103|0))|0);
     $176 = tempRet0;
     $177 = (_i64Add(($168|0),($169|0),($175|0),($176|0))|0);
     $178 = tempRet0;
     $179 = (($i$025) + -6)|0;
     $180 = (($data) + ($179<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($181|0)<(0);
     $183 = $182 << 31 >> 31;
     $184 = (___muldi3(($181|0),($183|0),($105|0),($107|0))|0);
     $185 = tempRet0;
     $186 = (_i64Add(($177|0),($178|0),($184|0),($185|0))|0);
     $187 = tempRet0;
     $188 = (($i$025) + -5)|0;
     $189 = (($data) + ($188<<2)|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($190|0)<(0);
     $192 = $191 << 31 >> 31;
     $193 = (___muldi3(($190|0),($192|0),($109|0),($111|0))|0);
     $194 = tempRet0;
     $195 = (_i64Add(($186|0),($187|0),($193|0),($194|0))|0);
     $196 = tempRet0;
     $197 = (($i$025) + -4)|0;
     $198 = (($data) + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = ($199|0)<(0);
     $201 = $200 << 31 >> 31;
     $202 = (___muldi3(($199|0),($201|0),($113|0),($115|0))|0);
     $203 = tempRet0;
     $204 = (_i64Add(($195|0),($196|0),($202|0),($203|0))|0);
     $205 = tempRet0;
     $206 = (($i$025) + -3)|0;
     $207 = (($data) + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)<(0);
     $210 = $209 << 31 >> 31;
     $211 = (___muldi3(($208|0),($210|0),($117|0),($119|0))|0);
     $212 = tempRet0;
     $213 = (_i64Add(($204|0),($205|0),($211|0),($212|0))|0);
     $214 = tempRet0;
     $215 = (($i$025) + -2)|0;
     $216 = (($data) + ($215<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)<(0);
     $219 = $218 << 31 >> 31;
     $220 = (___muldi3(($217|0),($219|0),($121|0),($123|0))|0);
     $221 = tempRet0;
     $222 = (_i64Add(($213|0),($214|0),($220|0),($221|0))|0);
     $223 = tempRet0;
     $224 = (($i$025) + -1)|0;
     $225 = (($data) + ($224<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = ($226|0)<(0);
     $228 = $227 << 31 >> 31;
     $229 = (___muldi3(($226|0),($228|0),($124|0),($126|0))|0);
     $230 = tempRet0;
     $231 = (_i64Add(($222|0),($223|0),($229|0),($230|0))|0);
     $232 = tempRet0;
     $233 = (($data) + ($i$025<<2)|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = (_bitshift64Ashr(($231|0),($232|0),($lp_quantization|0))|0);
     $236 = tempRet0;
     $237 = (($234) - ($235))|0;
     $238 = (($residual) + ($i$025<<2)|0);
     HEAP32[$238>>2] = $237;
     $239 = (($i$025) + 1)|0;
     $exitcond = ($239|0)==($data_len|0);
     if ($exitcond) {
      break;
     } else {
      $i$025 = $239;
     }
    }
    return;
   } else {
    if (!($36)) {
     return;
    }
    $37 = ((($qlp_coeff)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)<(0);
    $40 = $39 << 31 >> 31;
    $41 = ((($qlp_coeff)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)<(0);
    $44 = $43 << 31 >> 31;
    $45 = ((($qlp_coeff)) + 32|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<(0);
    $48 = $47 << 31 >> 31;
    $49 = ((($qlp_coeff)) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)<(0);
    $52 = $51 << 31 >> 31;
    $53 = ((($qlp_coeff)) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)<(0);
    $56 = $55 << 31 >> 31;
    $57 = ((($qlp_coeff)) + 20|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = ((($qlp_coeff)) + 16|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = ((($qlp_coeff)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($qlp_coeff)) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)<(0);
    $72 = $71 << 31 >> 31;
    $73 = ((($qlp_coeff)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)<(0);
    $76 = $75 << 31 >> 31;
    $77 = HEAP32[$qlp_coeff>>2]|0;
    $78 = ($77|0)<(0);
    $79 = $78 << 31 >> 31;
    $i$126 = 0;
    while(1) {
     $240 = (($i$126) + -11)|0;
     $241 = (($data) + ($240<<2)|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = ($242|0)<(0);
     $244 = $243 << 31 >> 31;
     $245 = (___muldi3(($242|0),($244|0),($38|0),($40|0))|0);
     $246 = tempRet0;
     $247 = (($i$126) + -10)|0;
     $248 = (($data) + ($247<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)<(0);
     $251 = $250 << 31 >> 31;
     $252 = (___muldi3(($249|0),($251|0),($42|0),($44|0))|0);
     $253 = tempRet0;
     $254 = (_i64Add(($252|0),($253|0),($245|0),($246|0))|0);
     $255 = tempRet0;
     $256 = (($i$126) + -9)|0;
     $257 = (($data) + ($256<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)<(0);
     $260 = $259 << 31 >> 31;
     $261 = (___muldi3(($258|0),($260|0),($46|0),($48|0))|0);
     $262 = tempRet0;
     $263 = (_i64Add(($254|0),($255|0),($261|0),($262|0))|0);
     $264 = tempRet0;
     $265 = (($i$126) + -8)|0;
     $266 = (($data) + ($265<<2)|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)<(0);
     $269 = $268 << 31 >> 31;
     $270 = (___muldi3(($267|0),($269|0),($50|0),($52|0))|0);
     $271 = tempRet0;
     $272 = (_i64Add(($263|0),($264|0),($270|0),($271|0))|0);
     $273 = tempRet0;
     $274 = (($i$126) + -7)|0;
     $275 = (($data) + ($274<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)<(0);
     $278 = $277 << 31 >> 31;
     $279 = (___muldi3(($276|0),($278|0),($54|0),($56|0))|0);
     $280 = tempRet0;
     $281 = (_i64Add(($272|0),($273|0),($279|0),($280|0))|0);
     $282 = tempRet0;
     $283 = (($i$126) + -6)|0;
     $284 = (($data) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285|0)<(0);
     $287 = $286 << 31 >> 31;
     $288 = (___muldi3(($285|0),($287|0),($58|0),($60|0))|0);
     $289 = tempRet0;
     $290 = (_i64Add(($281|0),($282|0),($288|0),($289|0))|0);
     $291 = tempRet0;
     $292 = (($i$126) + -5)|0;
     $293 = (($data) + ($292<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = ($294|0)<(0);
     $296 = $295 << 31 >> 31;
     $297 = (___muldi3(($294|0),($296|0),($62|0),($64|0))|0);
     $298 = tempRet0;
     $299 = (_i64Add(($290|0),($291|0),($297|0),($298|0))|0);
     $300 = tempRet0;
     $301 = (($i$126) + -4)|0;
     $302 = (($data) + ($301<<2)|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = ($303|0)<(0);
     $305 = $304 << 31 >> 31;
     $306 = (___muldi3(($303|0),($305|0),($66|0),($68|0))|0);
     $307 = tempRet0;
     $308 = (_i64Add(($299|0),($300|0),($306|0),($307|0))|0);
     $309 = tempRet0;
     $310 = (($i$126) + -3)|0;
     $311 = (($data) + ($310<<2)|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = ($312|0)<(0);
     $314 = $313 << 31 >> 31;
     $315 = (___muldi3(($312|0),($314|0),($70|0),($72|0))|0);
     $316 = tempRet0;
     $317 = (_i64Add(($308|0),($309|0),($315|0),($316|0))|0);
     $318 = tempRet0;
     $319 = (($i$126) + -2)|0;
     $320 = (($data) + ($319<<2)|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ($321|0)<(0);
     $323 = $322 << 31 >> 31;
     $324 = (___muldi3(($321|0),($323|0),($74|0),($76|0))|0);
     $325 = tempRet0;
     $326 = (_i64Add(($317|0),($318|0),($324|0),($325|0))|0);
     $327 = tempRet0;
     $328 = (($i$126) + -1)|0;
     $329 = (($data) + ($328<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = ($330|0)<(0);
     $332 = $331 << 31 >> 31;
     $333 = (___muldi3(($330|0),($332|0),($77|0),($79|0))|0);
     $334 = tempRet0;
     $335 = (_i64Add(($326|0),($327|0),($333|0),($334|0))|0);
     $336 = tempRet0;
     $337 = (($data) + ($i$126<<2)|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (_bitshift64Ashr(($335|0),($336|0),($lp_quantization|0))|0);
     $340 = tempRet0;
     $341 = (($338) - ($339))|0;
     $342 = (($residual) + ($i$126<<2)|0);
     HEAP32[$342>>2] = $341;
     $343 = (($i$126) + 1)|0;
     $exitcond69 = ($343|0)==($data_len|0);
     if ($exitcond69) {
      break;
     } else {
      $i$126 = $343;
     }
    }
    return;
   }
  } else {
   $344 = ($order|0)==(10);
   $345 = ($data_len|0)>(0);
   if ($344) {
    if (!($345)) {
     return;
    }
    $381 = ((($qlp_coeff)) + 36|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = ($382|0)<(0);
    $384 = $383 << 31 >> 31;
    $385 = ((($qlp_coeff)) + 32|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ($386|0)<(0);
    $388 = $387 << 31 >> 31;
    $389 = ((($qlp_coeff)) + 28|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = ($390|0)<(0);
    $392 = $391 << 31 >> 31;
    $393 = ((($qlp_coeff)) + 24|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)<(0);
    $396 = $395 << 31 >> 31;
    $397 = ((($qlp_coeff)) + 20|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = ($398|0)<(0);
    $400 = $399 << 31 >> 31;
    $401 = ((($qlp_coeff)) + 16|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = ($402|0)<(0);
    $404 = $403 << 31 >> 31;
    $405 = ((($qlp_coeff)) + 12|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = ($406|0)<(0);
    $408 = $407 << 31 >> 31;
    $409 = ((($qlp_coeff)) + 8|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = ($410|0)<(0);
    $412 = $411 << 31 >> 31;
    $413 = ((($qlp_coeff)) + 4|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = ($414|0)<(0);
    $416 = $415 << 31 >> 31;
    $417 = HEAP32[$qlp_coeff>>2]|0;
    $418 = ($417|0)<(0);
    $419 = $418 << 31 >> 31;
    $i$228 = 0;
    while(1) {
     $420 = (($i$228) + -10)|0;
     $421 = (($data) + ($420<<2)|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($422|0)<(0);
     $424 = $423 << 31 >> 31;
     $425 = (___muldi3(($422|0),($424|0),($382|0),($384|0))|0);
     $426 = tempRet0;
     $427 = (($i$228) + -9)|0;
     $428 = (($data) + ($427<<2)|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = ($429|0)<(0);
     $431 = $430 << 31 >> 31;
     $432 = (___muldi3(($429|0),($431|0),($386|0),($388|0))|0);
     $433 = tempRet0;
     $434 = (_i64Add(($432|0),($433|0),($425|0),($426|0))|0);
     $435 = tempRet0;
     $436 = (($i$228) + -8)|0;
     $437 = (($data) + ($436<<2)|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ($438|0)<(0);
     $440 = $439 << 31 >> 31;
     $441 = (___muldi3(($438|0),($440|0),($390|0),($392|0))|0);
     $442 = tempRet0;
     $443 = (_i64Add(($434|0),($435|0),($441|0),($442|0))|0);
     $444 = tempRet0;
     $445 = (($i$228) + -7)|0;
     $446 = (($data) + ($445<<2)|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = ($447|0)<(0);
     $449 = $448 << 31 >> 31;
     $450 = (___muldi3(($447|0),($449|0),($394|0),($396|0))|0);
     $451 = tempRet0;
     $452 = (_i64Add(($443|0),($444|0),($450|0),($451|0))|0);
     $453 = tempRet0;
     $454 = (($i$228) + -6)|0;
     $455 = (($data) + ($454<<2)|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ($456|0)<(0);
     $458 = $457 << 31 >> 31;
     $459 = (___muldi3(($456|0),($458|0),($398|0),($400|0))|0);
     $460 = tempRet0;
     $461 = (_i64Add(($452|0),($453|0),($459|0),($460|0))|0);
     $462 = tempRet0;
     $463 = (($i$228) + -5)|0;
     $464 = (($data) + ($463<<2)|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = ($465|0)<(0);
     $467 = $466 << 31 >> 31;
     $468 = (___muldi3(($465|0),($467|0),($402|0),($404|0))|0);
     $469 = tempRet0;
     $470 = (_i64Add(($461|0),($462|0),($468|0),($469|0))|0);
     $471 = tempRet0;
     $472 = (($i$228) + -4)|0;
     $473 = (($data) + ($472<<2)|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = ($474|0)<(0);
     $476 = $475 << 31 >> 31;
     $477 = (___muldi3(($474|0),($476|0),($406|0),($408|0))|0);
     $478 = tempRet0;
     $479 = (_i64Add(($470|0),($471|0),($477|0),($478|0))|0);
     $480 = tempRet0;
     $481 = (($i$228) + -3)|0;
     $482 = (($data) + ($481<<2)|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = ($483|0)<(0);
     $485 = $484 << 31 >> 31;
     $486 = (___muldi3(($483|0),($485|0),($410|0),($412|0))|0);
     $487 = tempRet0;
     $488 = (_i64Add(($479|0),($480|0),($486|0),($487|0))|0);
     $489 = tempRet0;
     $490 = (($i$228) + -2)|0;
     $491 = (($data) + ($490<<2)|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ($492|0)<(0);
     $494 = $493 << 31 >> 31;
     $495 = (___muldi3(($492|0),($494|0),($414|0),($416|0))|0);
     $496 = tempRet0;
     $497 = (_i64Add(($488|0),($489|0),($495|0),($496|0))|0);
     $498 = tempRet0;
     $499 = (($i$228) + -1)|0;
     $500 = (($data) + ($499<<2)|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = ($501|0)<(0);
     $503 = $502 << 31 >> 31;
     $504 = (___muldi3(($501|0),($503|0),($417|0),($419|0))|0);
     $505 = tempRet0;
     $506 = (_i64Add(($497|0),($498|0),($504|0),($505|0))|0);
     $507 = tempRet0;
     $508 = (($data) + ($i$228<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = (_bitshift64Ashr(($506|0),($507|0),($lp_quantization|0))|0);
     $511 = tempRet0;
     $512 = (($509) - ($510))|0;
     $513 = (($residual) + ($i$228<<2)|0);
     HEAP32[$513>>2] = $512;
     $514 = (($i$228) + 1)|0;
     $exitcond70 = ($514|0)==($data_len|0);
     if ($exitcond70) {
      break;
     } else {
      $i$228 = $514;
     }
    }
    return;
   } else {
    if (!($345)) {
     return;
    }
    $346 = ((($qlp_coeff)) + 32|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($347|0)<(0);
    $349 = $348 << 31 >> 31;
    $350 = ((($qlp_coeff)) + 28|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = ($351|0)<(0);
    $353 = $352 << 31 >> 31;
    $354 = ((($qlp_coeff)) + 24|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ($355|0)<(0);
    $357 = $356 << 31 >> 31;
    $358 = ((($qlp_coeff)) + 20|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ($359|0)<(0);
    $361 = $360 << 31 >> 31;
    $362 = ((($qlp_coeff)) + 16|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ($363|0)<(0);
    $365 = $364 << 31 >> 31;
    $366 = ((($qlp_coeff)) + 12|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = ($367|0)<(0);
    $369 = $368 << 31 >> 31;
    $370 = ((($qlp_coeff)) + 8|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ($371|0)<(0);
    $373 = $372 << 31 >> 31;
    $374 = ((($qlp_coeff)) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)<(0);
    $377 = $376 << 31 >> 31;
    $378 = HEAP32[$qlp_coeff>>2]|0;
    $379 = ($378|0)<(0);
    $380 = $379 << 31 >> 31;
    $i$330 = 0;
    while(1) {
     $515 = (($i$330) + -9)|0;
     $516 = (($data) + ($515<<2)|0);
     $517 = HEAP32[$516>>2]|0;
     $518 = ($517|0)<(0);
     $519 = $518 << 31 >> 31;
     $520 = (___muldi3(($517|0),($519|0),($347|0),($349|0))|0);
     $521 = tempRet0;
     $522 = (($i$330) + -8)|0;
     $523 = (($data) + ($522<<2)|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = ($524|0)<(0);
     $526 = $525 << 31 >> 31;
     $527 = (___muldi3(($524|0),($526|0),($351|0),($353|0))|0);
     $528 = tempRet0;
     $529 = (_i64Add(($527|0),($528|0),($520|0),($521|0))|0);
     $530 = tempRet0;
     $531 = (($i$330) + -7)|0;
     $532 = (($data) + ($531<<2)|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = ($533|0)<(0);
     $535 = $534 << 31 >> 31;
     $536 = (___muldi3(($533|0),($535|0),($355|0),($357|0))|0);
     $537 = tempRet0;
     $538 = (_i64Add(($529|0),($530|0),($536|0),($537|0))|0);
     $539 = tempRet0;
     $540 = (($i$330) + -6)|0;
     $541 = (($data) + ($540<<2)|0);
     $542 = HEAP32[$541>>2]|0;
     $543 = ($542|0)<(0);
     $544 = $543 << 31 >> 31;
     $545 = (___muldi3(($542|0),($544|0),($359|0),($361|0))|0);
     $546 = tempRet0;
     $547 = (_i64Add(($538|0),($539|0),($545|0),($546|0))|0);
     $548 = tempRet0;
     $549 = (($i$330) + -5)|0;
     $550 = (($data) + ($549<<2)|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = ($551|0)<(0);
     $553 = $552 << 31 >> 31;
     $554 = (___muldi3(($551|0),($553|0),($363|0),($365|0))|0);
     $555 = tempRet0;
     $556 = (_i64Add(($547|0),($548|0),($554|0),($555|0))|0);
     $557 = tempRet0;
     $558 = (($i$330) + -4)|0;
     $559 = (($data) + ($558<<2)|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = ($560|0)<(0);
     $562 = $561 << 31 >> 31;
     $563 = (___muldi3(($560|0),($562|0),($367|0),($369|0))|0);
     $564 = tempRet0;
     $565 = (_i64Add(($556|0),($557|0),($563|0),($564|0))|0);
     $566 = tempRet0;
     $567 = (($i$330) + -3)|0;
     $568 = (($data) + ($567<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = ($569|0)<(0);
     $571 = $570 << 31 >> 31;
     $572 = (___muldi3(($569|0),($571|0),($371|0),($373|0))|0);
     $573 = tempRet0;
     $574 = (_i64Add(($565|0),($566|0),($572|0),($573|0))|0);
     $575 = tempRet0;
     $576 = (($i$330) + -2)|0;
     $577 = (($data) + ($576<<2)|0);
     $578 = HEAP32[$577>>2]|0;
     $579 = ($578|0)<(0);
     $580 = $579 << 31 >> 31;
     $581 = (___muldi3(($578|0),($580|0),($375|0),($377|0))|0);
     $582 = tempRet0;
     $583 = (_i64Add(($574|0),($575|0),($581|0),($582|0))|0);
     $584 = tempRet0;
     $585 = (($i$330) + -1)|0;
     $586 = (($data) + ($585<<2)|0);
     $587 = HEAP32[$586>>2]|0;
     $588 = ($587|0)<(0);
     $589 = $588 << 31 >> 31;
     $590 = (___muldi3(($587|0),($589|0),($378|0),($380|0))|0);
     $591 = tempRet0;
     $592 = (_i64Add(($583|0),($584|0),($590|0),($591|0))|0);
     $593 = tempRet0;
     $594 = (($data) + ($i$330<<2)|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = (_bitshift64Ashr(($592|0),($593|0),($lp_quantization|0))|0);
     $597 = tempRet0;
     $598 = (($595) - ($596))|0;
     $599 = (($residual) + ($i$330<<2)|0);
     HEAP32[$599>>2] = $598;
     $600 = (($i$330) + 1)|0;
     $exitcond71 = ($600|0)==($data_len|0);
     if ($exitcond71) {
      break;
     } else {
      $i$330 = $600;
     }
    }
    return;
   }
  }
 }
 $601 = ($order>>>0)>(4);
 if ($601) {
  $602 = ($order>>>0)>(6);
  if ($602) {
   $603 = ($order|0)==(8);
   $604 = ($data_len|0)>(0);
   if ($603) {
    if (!($604)) {
     return;
    }
    $632 = ((($qlp_coeff)) + 28|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = ($633|0)<(0);
    $635 = $634 << 31 >> 31;
    $636 = ((($qlp_coeff)) + 24|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = ($637|0)<(0);
    $639 = $638 << 31 >> 31;
    $640 = ((($qlp_coeff)) + 20|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = ($641|0)<(0);
    $643 = $642 << 31 >> 31;
    $644 = ((($qlp_coeff)) + 16|0);
    $645 = HEAP32[$644>>2]|0;
    $646 = ($645|0)<(0);
    $647 = $646 << 31 >> 31;
    $648 = ((($qlp_coeff)) + 12|0);
    $649 = HEAP32[$648>>2]|0;
    $650 = ($649|0)<(0);
    $651 = $650 << 31 >> 31;
    $652 = ((($qlp_coeff)) + 8|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = ($653|0)<(0);
    $655 = $654 << 31 >> 31;
    $656 = ((($qlp_coeff)) + 4|0);
    $657 = HEAP32[$656>>2]|0;
    $658 = ($657|0)<(0);
    $659 = $658 << 31 >> 31;
    $660 = HEAP32[$qlp_coeff>>2]|0;
    $661 = ($660|0)<(0);
    $662 = $661 << 31 >> 31;
    $i$432 = 0;
    while(1) {
     $663 = (($i$432) + -8)|0;
     $664 = (($data) + ($663<<2)|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = ($665|0)<(0);
     $667 = $666 << 31 >> 31;
     $668 = (___muldi3(($665|0),($667|0),($633|0),($635|0))|0);
     $669 = tempRet0;
     $670 = (($i$432) + -7)|0;
     $671 = (($data) + ($670<<2)|0);
     $672 = HEAP32[$671>>2]|0;
     $673 = ($672|0)<(0);
     $674 = $673 << 31 >> 31;
     $675 = (___muldi3(($672|0),($674|0),($637|0),($639|0))|0);
     $676 = tempRet0;
     $677 = (_i64Add(($675|0),($676|0),($668|0),($669|0))|0);
     $678 = tempRet0;
     $679 = (($i$432) + -6)|0;
     $680 = (($data) + ($679<<2)|0);
     $681 = HEAP32[$680>>2]|0;
     $682 = ($681|0)<(0);
     $683 = $682 << 31 >> 31;
     $684 = (___muldi3(($681|0),($683|0),($641|0),($643|0))|0);
     $685 = tempRet0;
     $686 = (_i64Add(($677|0),($678|0),($684|0),($685|0))|0);
     $687 = tempRet0;
     $688 = (($i$432) + -5)|0;
     $689 = (($data) + ($688<<2)|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)<(0);
     $692 = $691 << 31 >> 31;
     $693 = (___muldi3(($690|0),($692|0),($645|0),($647|0))|0);
     $694 = tempRet0;
     $695 = (_i64Add(($686|0),($687|0),($693|0),($694|0))|0);
     $696 = tempRet0;
     $697 = (($i$432) + -4)|0;
     $698 = (($data) + ($697<<2)|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = ($699|0)<(0);
     $701 = $700 << 31 >> 31;
     $702 = (___muldi3(($699|0),($701|0),($649|0),($651|0))|0);
     $703 = tempRet0;
     $704 = (_i64Add(($695|0),($696|0),($702|0),($703|0))|0);
     $705 = tempRet0;
     $706 = (($i$432) + -3)|0;
     $707 = (($data) + ($706<<2)|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = ($708|0)<(0);
     $710 = $709 << 31 >> 31;
     $711 = (___muldi3(($708|0),($710|0),($653|0),($655|0))|0);
     $712 = tempRet0;
     $713 = (_i64Add(($704|0),($705|0),($711|0),($712|0))|0);
     $714 = tempRet0;
     $715 = (($i$432) + -2)|0;
     $716 = (($data) + ($715<<2)|0);
     $717 = HEAP32[$716>>2]|0;
     $718 = ($717|0)<(0);
     $719 = $718 << 31 >> 31;
     $720 = (___muldi3(($717|0),($719|0),($657|0),($659|0))|0);
     $721 = tempRet0;
     $722 = (_i64Add(($713|0),($714|0),($720|0),($721|0))|0);
     $723 = tempRet0;
     $724 = (($i$432) + -1)|0;
     $725 = (($data) + ($724<<2)|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)<(0);
     $728 = $727 << 31 >> 31;
     $729 = (___muldi3(($726|0),($728|0),($660|0),($662|0))|0);
     $730 = tempRet0;
     $731 = (_i64Add(($722|0),($723|0),($729|0),($730|0))|0);
     $732 = tempRet0;
     $733 = (($data) + ($i$432<<2)|0);
     $734 = HEAP32[$733>>2]|0;
     $735 = (_bitshift64Ashr(($731|0),($732|0),($lp_quantization|0))|0);
     $736 = tempRet0;
     $737 = (($734) - ($735))|0;
     $738 = (($residual) + ($i$432<<2)|0);
     HEAP32[$738>>2] = $737;
     $739 = (($i$432) + 1)|0;
     $exitcond72 = ($739|0)==($data_len|0);
     if ($exitcond72) {
      break;
     } else {
      $i$432 = $739;
     }
    }
    return;
   } else {
    if (!($604)) {
     return;
    }
    $605 = ((($qlp_coeff)) + 24|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = ($606|0)<(0);
    $608 = $607 << 31 >> 31;
    $609 = ((($qlp_coeff)) + 20|0);
    $610 = HEAP32[$609>>2]|0;
    $611 = ($610|0)<(0);
    $612 = $611 << 31 >> 31;
    $613 = ((($qlp_coeff)) + 16|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = ($614|0)<(0);
    $616 = $615 << 31 >> 31;
    $617 = ((($qlp_coeff)) + 12|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = ($618|0)<(0);
    $620 = $619 << 31 >> 31;
    $621 = ((($qlp_coeff)) + 8|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = ($622|0)<(0);
    $624 = $623 << 31 >> 31;
    $625 = ((($qlp_coeff)) + 4|0);
    $626 = HEAP32[$625>>2]|0;
    $627 = ($626|0)<(0);
    $628 = $627 << 31 >> 31;
    $629 = HEAP32[$qlp_coeff>>2]|0;
    $630 = ($629|0)<(0);
    $631 = $630 << 31 >> 31;
    $i$534 = 0;
    while(1) {
     $740 = (($i$534) + -7)|0;
     $741 = (($data) + ($740<<2)|0);
     $742 = HEAP32[$741>>2]|0;
     $743 = ($742|0)<(0);
     $744 = $743 << 31 >> 31;
     $745 = (___muldi3(($742|0),($744|0),($606|0),($608|0))|0);
     $746 = tempRet0;
     $747 = (($i$534) + -6)|0;
     $748 = (($data) + ($747<<2)|0);
     $749 = HEAP32[$748>>2]|0;
     $750 = ($749|0)<(0);
     $751 = $750 << 31 >> 31;
     $752 = (___muldi3(($749|0),($751|0),($610|0),($612|0))|0);
     $753 = tempRet0;
     $754 = (_i64Add(($752|0),($753|0),($745|0),($746|0))|0);
     $755 = tempRet0;
     $756 = (($i$534) + -5)|0;
     $757 = (($data) + ($756<<2)|0);
     $758 = HEAP32[$757>>2]|0;
     $759 = ($758|0)<(0);
     $760 = $759 << 31 >> 31;
     $761 = (___muldi3(($758|0),($760|0),($614|0),($616|0))|0);
     $762 = tempRet0;
     $763 = (_i64Add(($754|0),($755|0),($761|0),($762|0))|0);
     $764 = tempRet0;
     $765 = (($i$534) + -4)|0;
     $766 = (($data) + ($765<<2)|0);
     $767 = HEAP32[$766>>2]|0;
     $768 = ($767|0)<(0);
     $769 = $768 << 31 >> 31;
     $770 = (___muldi3(($767|0),($769|0),($618|0),($620|0))|0);
     $771 = tempRet0;
     $772 = (_i64Add(($763|0),($764|0),($770|0),($771|0))|0);
     $773 = tempRet0;
     $774 = (($i$534) + -3)|0;
     $775 = (($data) + ($774<<2)|0);
     $776 = HEAP32[$775>>2]|0;
     $777 = ($776|0)<(0);
     $778 = $777 << 31 >> 31;
     $779 = (___muldi3(($776|0),($778|0),($622|0),($624|0))|0);
     $780 = tempRet0;
     $781 = (_i64Add(($772|0),($773|0),($779|0),($780|0))|0);
     $782 = tempRet0;
     $783 = (($i$534) + -2)|0;
     $784 = (($data) + ($783<<2)|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = ($785|0)<(0);
     $787 = $786 << 31 >> 31;
     $788 = (___muldi3(($785|0),($787|0),($626|0),($628|0))|0);
     $789 = tempRet0;
     $790 = (_i64Add(($781|0),($782|0),($788|0),($789|0))|0);
     $791 = tempRet0;
     $792 = (($i$534) + -1)|0;
     $793 = (($data) + ($792<<2)|0);
     $794 = HEAP32[$793>>2]|0;
     $795 = ($794|0)<(0);
     $796 = $795 << 31 >> 31;
     $797 = (___muldi3(($794|0),($796|0),($629|0),($631|0))|0);
     $798 = tempRet0;
     $799 = (_i64Add(($790|0),($791|0),($797|0),($798|0))|0);
     $800 = tempRet0;
     $801 = (($data) + ($i$534<<2)|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = (_bitshift64Ashr(($799|0),($800|0),($lp_quantization|0))|0);
     $804 = tempRet0;
     $805 = (($802) - ($803))|0;
     $806 = (($residual) + ($i$534<<2)|0);
     HEAP32[$806>>2] = $805;
     $807 = (($i$534) + 1)|0;
     $exitcond73 = ($807|0)==($data_len|0);
     if ($exitcond73) {
      break;
     } else {
      $i$534 = $807;
     }
    }
    return;
   }
  } else {
   $808 = ($order|0)==(6);
   $809 = ($data_len|0)>(0);
   if ($808) {
    if (!($809)) {
     return;
    }
    $829 = ((($qlp_coeff)) + 20|0);
    $830 = HEAP32[$829>>2]|0;
    $831 = ($830|0)<(0);
    $832 = $831 << 31 >> 31;
    $833 = ((($qlp_coeff)) + 16|0);
    $834 = HEAP32[$833>>2]|0;
    $835 = ($834|0)<(0);
    $836 = $835 << 31 >> 31;
    $837 = ((($qlp_coeff)) + 12|0);
    $838 = HEAP32[$837>>2]|0;
    $839 = ($838|0)<(0);
    $840 = $839 << 31 >> 31;
    $841 = ((($qlp_coeff)) + 8|0);
    $842 = HEAP32[$841>>2]|0;
    $843 = ($842|0)<(0);
    $844 = $843 << 31 >> 31;
    $845 = ((($qlp_coeff)) + 4|0);
    $846 = HEAP32[$845>>2]|0;
    $847 = ($846|0)<(0);
    $848 = $847 << 31 >> 31;
    $849 = HEAP32[$qlp_coeff>>2]|0;
    $850 = ($849|0)<(0);
    $851 = $850 << 31 >> 31;
    $i$636 = 0;
    while(1) {
     $852 = (($i$636) + -6)|0;
     $853 = (($data) + ($852<<2)|0);
     $854 = HEAP32[$853>>2]|0;
     $855 = ($854|0)<(0);
     $856 = $855 << 31 >> 31;
     $857 = (___muldi3(($854|0),($856|0),($830|0),($832|0))|0);
     $858 = tempRet0;
     $859 = (($i$636) + -5)|0;
     $860 = (($data) + ($859<<2)|0);
     $861 = HEAP32[$860>>2]|0;
     $862 = ($861|0)<(0);
     $863 = $862 << 31 >> 31;
     $864 = (___muldi3(($861|0),($863|0),($834|0),($836|0))|0);
     $865 = tempRet0;
     $866 = (_i64Add(($864|0),($865|0),($857|0),($858|0))|0);
     $867 = tempRet0;
     $868 = (($i$636) + -4)|0;
     $869 = (($data) + ($868<<2)|0);
     $870 = HEAP32[$869>>2]|0;
     $871 = ($870|0)<(0);
     $872 = $871 << 31 >> 31;
     $873 = (___muldi3(($870|0),($872|0),($838|0),($840|0))|0);
     $874 = tempRet0;
     $875 = (_i64Add(($866|0),($867|0),($873|0),($874|0))|0);
     $876 = tempRet0;
     $877 = (($i$636) + -3)|0;
     $878 = (($data) + ($877<<2)|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = ($879|0)<(0);
     $881 = $880 << 31 >> 31;
     $882 = (___muldi3(($879|0),($881|0),($842|0),($844|0))|0);
     $883 = tempRet0;
     $884 = (_i64Add(($875|0),($876|0),($882|0),($883|0))|0);
     $885 = tempRet0;
     $886 = (($i$636) + -2)|0;
     $887 = (($data) + ($886<<2)|0);
     $888 = HEAP32[$887>>2]|0;
     $889 = ($888|0)<(0);
     $890 = $889 << 31 >> 31;
     $891 = (___muldi3(($888|0),($890|0),($846|0),($848|0))|0);
     $892 = tempRet0;
     $893 = (_i64Add(($884|0),($885|0),($891|0),($892|0))|0);
     $894 = tempRet0;
     $895 = (($i$636) + -1)|0;
     $896 = (($data) + ($895<<2)|0);
     $897 = HEAP32[$896>>2]|0;
     $898 = ($897|0)<(0);
     $899 = $898 << 31 >> 31;
     $900 = (___muldi3(($897|0),($899|0),($849|0),($851|0))|0);
     $901 = tempRet0;
     $902 = (_i64Add(($893|0),($894|0),($900|0),($901|0))|0);
     $903 = tempRet0;
     $904 = (($data) + ($i$636<<2)|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = (_bitshift64Ashr(($902|0),($903|0),($lp_quantization|0))|0);
     $907 = tempRet0;
     $908 = (($905) - ($906))|0;
     $909 = (($residual) + ($i$636<<2)|0);
     HEAP32[$909>>2] = $908;
     $910 = (($i$636) + 1)|0;
     $exitcond74 = ($910|0)==($data_len|0);
     if ($exitcond74) {
      break;
     } else {
      $i$636 = $910;
     }
    }
    return;
   } else {
    if (!($809)) {
     return;
    }
    $810 = ((($qlp_coeff)) + 16|0);
    $811 = HEAP32[$810>>2]|0;
    $812 = ($811|0)<(0);
    $813 = $812 << 31 >> 31;
    $814 = ((($qlp_coeff)) + 12|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = ($815|0)<(0);
    $817 = $816 << 31 >> 31;
    $818 = ((($qlp_coeff)) + 8|0);
    $819 = HEAP32[$818>>2]|0;
    $820 = ($819|0)<(0);
    $821 = $820 << 31 >> 31;
    $822 = ((($qlp_coeff)) + 4|0);
    $823 = HEAP32[$822>>2]|0;
    $824 = ($823|0)<(0);
    $825 = $824 << 31 >> 31;
    $826 = HEAP32[$qlp_coeff>>2]|0;
    $827 = ($826|0)<(0);
    $828 = $827 << 31 >> 31;
    $i$738 = 0;
    while(1) {
     $911 = (($i$738) + -5)|0;
     $912 = (($data) + ($911<<2)|0);
     $913 = HEAP32[$912>>2]|0;
     $914 = ($913|0)<(0);
     $915 = $914 << 31 >> 31;
     $916 = (___muldi3(($913|0),($915|0),($811|0),($813|0))|0);
     $917 = tempRet0;
     $918 = (($i$738) + -4)|0;
     $919 = (($data) + ($918<<2)|0);
     $920 = HEAP32[$919>>2]|0;
     $921 = ($920|0)<(0);
     $922 = $921 << 31 >> 31;
     $923 = (___muldi3(($920|0),($922|0),($815|0),($817|0))|0);
     $924 = tempRet0;
     $925 = (_i64Add(($923|0),($924|0),($916|0),($917|0))|0);
     $926 = tempRet0;
     $927 = (($i$738) + -3)|0;
     $928 = (($data) + ($927<<2)|0);
     $929 = HEAP32[$928>>2]|0;
     $930 = ($929|0)<(0);
     $931 = $930 << 31 >> 31;
     $932 = (___muldi3(($929|0),($931|0),($819|0),($821|0))|0);
     $933 = tempRet0;
     $934 = (_i64Add(($925|0),($926|0),($932|0),($933|0))|0);
     $935 = tempRet0;
     $936 = (($i$738) + -2)|0;
     $937 = (($data) + ($936<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = ($938|0)<(0);
     $940 = $939 << 31 >> 31;
     $941 = (___muldi3(($938|0),($940|0),($823|0),($825|0))|0);
     $942 = tempRet0;
     $943 = (_i64Add(($934|0),($935|0),($941|0),($942|0))|0);
     $944 = tempRet0;
     $945 = (($i$738) + -1)|0;
     $946 = (($data) + ($945<<2)|0);
     $947 = HEAP32[$946>>2]|0;
     $948 = ($947|0)<(0);
     $949 = $948 << 31 >> 31;
     $950 = (___muldi3(($947|0),($949|0),($826|0),($828|0))|0);
     $951 = tempRet0;
     $952 = (_i64Add(($943|0),($944|0),($950|0),($951|0))|0);
     $953 = tempRet0;
     $954 = (($data) + ($i$738<<2)|0);
     $955 = HEAP32[$954>>2]|0;
     $956 = (_bitshift64Ashr(($952|0),($953|0),($lp_quantization|0))|0);
     $957 = tempRet0;
     $958 = (($955) - ($956))|0;
     $959 = (($residual) + ($i$738<<2)|0);
     HEAP32[$959>>2] = $958;
     $960 = (($i$738) + 1)|0;
     $exitcond75 = ($960|0)==($data_len|0);
     if ($exitcond75) {
      break;
     } else {
      $i$738 = $960;
     }
    }
    return;
   }
  }
 } else {
  $961 = ($order>>>0)>(2);
  if ($961) {
   $962 = ($order|0)==(4);
   $963 = ($data_len|0)>(0);
   if ($962) {
    if (!($963)) {
     return;
    }
    $975 = ((($qlp_coeff)) + 12|0);
    $976 = HEAP32[$975>>2]|0;
    $977 = ($976|0)<(0);
    $978 = $977 << 31 >> 31;
    $979 = ((($qlp_coeff)) + 8|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = ($980|0)<(0);
    $982 = $981 << 31 >> 31;
    $983 = ((($qlp_coeff)) + 4|0);
    $984 = HEAP32[$983>>2]|0;
    $985 = ($984|0)<(0);
    $986 = $985 << 31 >> 31;
    $987 = HEAP32[$qlp_coeff>>2]|0;
    $988 = ($987|0)<(0);
    $989 = $988 << 31 >> 31;
    $i$840 = 0;
    while(1) {
     $990 = (($i$840) + -4)|0;
     $991 = (($data) + ($990<<2)|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = ($992|0)<(0);
     $994 = $993 << 31 >> 31;
     $995 = (___muldi3(($992|0),($994|0),($976|0),($978|0))|0);
     $996 = tempRet0;
     $997 = (($i$840) + -3)|0;
     $998 = (($data) + ($997<<2)|0);
     $999 = HEAP32[$998>>2]|0;
     $1000 = ($999|0)<(0);
     $1001 = $1000 << 31 >> 31;
     $1002 = (___muldi3(($999|0),($1001|0),($980|0),($982|0))|0);
     $1003 = tempRet0;
     $1004 = (_i64Add(($1002|0),($1003|0),($995|0),($996|0))|0);
     $1005 = tempRet0;
     $1006 = (($i$840) + -2)|0;
     $1007 = (($data) + ($1006<<2)|0);
     $1008 = HEAP32[$1007>>2]|0;
     $1009 = ($1008|0)<(0);
     $1010 = $1009 << 31 >> 31;
     $1011 = (___muldi3(($1008|0),($1010|0),($984|0),($986|0))|0);
     $1012 = tempRet0;
     $1013 = (_i64Add(($1004|0),($1005|0),($1011|0),($1012|0))|0);
     $1014 = tempRet0;
     $1015 = (($i$840) + -1)|0;
     $1016 = (($data) + ($1015<<2)|0);
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = ($1017|0)<(0);
     $1019 = $1018 << 31 >> 31;
     $1020 = (___muldi3(($1017|0),($1019|0),($987|0),($989|0))|0);
     $1021 = tempRet0;
     $1022 = (_i64Add(($1013|0),($1014|0),($1020|0),($1021|0))|0);
     $1023 = tempRet0;
     $1024 = (($data) + ($i$840<<2)|0);
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = (_bitshift64Ashr(($1022|0),($1023|0),($lp_quantization|0))|0);
     $1027 = tempRet0;
     $1028 = (($1025) - ($1026))|0;
     $1029 = (($residual) + ($i$840<<2)|0);
     HEAP32[$1029>>2] = $1028;
     $1030 = (($i$840) + 1)|0;
     $exitcond76 = ($1030|0)==($data_len|0);
     if ($exitcond76) {
      break;
     } else {
      $i$840 = $1030;
     }
    }
    return;
   } else {
    if (!($963)) {
     return;
    }
    $964 = ((($qlp_coeff)) + 8|0);
    $965 = HEAP32[$964>>2]|0;
    $966 = ($965|0)<(0);
    $967 = $966 << 31 >> 31;
    $968 = ((($qlp_coeff)) + 4|0);
    $969 = HEAP32[$968>>2]|0;
    $970 = ($969|0)<(0);
    $971 = $970 << 31 >> 31;
    $972 = HEAP32[$qlp_coeff>>2]|0;
    $973 = ($972|0)<(0);
    $974 = $973 << 31 >> 31;
    $i$942 = 0;
    while(1) {
     $1031 = (($i$942) + -3)|0;
     $1032 = (($data) + ($1031<<2)|0);
     $1033 = HEAP32[$1032>>2]|0;
     $1034 = ($1033|0)<(0);
     $1035 = $1034 << 31 >> 31;
     $1036 = (___muldi3(($1033|0),($1035|0),($965|0),($967|0))|0);
     $1037 = tempRet0;
     $1038 = (($i$942) + -2)|0;
     $1039 = (($data) + ($1038<<2)|0);
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = ($1040|0)<(0);
     $1042 = $1041 << 31 >> 31;
     $1043 = (___muldi3(($1040|0),($1042|0),($969|0),($971|0))|0);
     $1044 = tempRet0;
     $1045 = (_i64Add(($1043|0),($1044|0),($1036|0),($1037|0))|0);
     $1046 = tempRet0;
     $1047 = (($i$942) + -1)|0;
     $1048 = (($data) + ($1047<<2)|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = ($1049|0)<(0);
     $1051 = $1050 << 31 >> 31;
     $1052 = (___muldi3(($1049|0),($1051|0),($972|0),($974|0))|0);
     $1053 = tempRet0;
     $1054 = (_i64Add(($1045|0),($1046|0),($1052|0),($1053|0))|0);
     $1055 = tempRet0;
     $1056 = (($data) + ($i$942<<2)|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = (_bitshift64Ashr(($1054|0),($1055|0),($lp_quantization|0))|0);
     $1059 = tempRet0;
     $1060 = (($1057) - ($1058))|0;
     $1061 = (($residual) + ($i$942<<2)|0);
     HEAP32[$1061>>2] = $1060;
     $1062 = (($i$942) + 1)|0;
     $exitcond77 = ($1062|0)==($data_len|0);
     if ($exitcond77) {
      break;
     } else {
      $i$942 = $1062;
     }
    }
    return;
   }
  } else {
   $1063 = ($order|0)==(2);
   $1064 = ($data_len|0)>(0);
   if ($1063) {
    if (!($1064)) {
     return;
    }
    $1068 = ((($qlp_coeff)) + 4|0);
    $1069 = HEAP32[$1068>>2]|0;
    $1070 = ($1069|0)<(0);
    $1071 = $1070 << 31 >> 31;
    $1072 = HEAP32[$qlp_coeff>>2]|0;
    $1073 = ($1072|0)<(0);
    $1074 = $1073 << 31 >> 31;
    $i$1044 = 0;
    while(1) {
     $1075 = (($i$1044) + -2)|0;
     $1076 = (($data) + ($1075<<2)|0);
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = ($1077|0)<(0);
     $1079 = $1078 << 31 >> 31;
     $1080 = (___muldi3(($1077|0),($1079|0),($1069|0),($1071|0))|0);
     $1081 = tempRet0;
     $1082 = (($i$1044) + -1)|0;
     $1083 = (($data) + ($1082<<2)|0);
     $1084 = HEAP32[$1083>>2]|0;
     $1085 = ($1084|0)<(0);
     $1086 = $1085 << 31 >> 31;
     $1087 = (___muldi3(($1084|0),($1086|0),($1072|0),($1074|0))|0);
     $1088 = tempRet0;
     $1089 = (_i64Add(($1087|0),($1088|0),($1080|0),($1081|0))|0);
     $1090 = tempRet0;
     $1091 = (($data) + ($i$1044<<2)|0);
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = (_bitshift64Ashr(($1089|0),($1090|0),($lp_quantization|0))|0);
     $1094 = tempRet0;
     $1095 = (($1092) - ($1093))|0;
     $1096 = (($residual) + ($i$1044<<2)|0);
     HEAP32[$1096>>2] = $1095;
     $1097 = (($i$1044) + 1)|0;
     $exitcond78 = ($1097|0)==($data_len|0);
     if ($exitcond78) {
      break;
     } else {
      $i$1044 = $1097;
     }
    }
    return;
   } else {
    if (!($1064)) {
     return;
    }
    $1065 = HEAP32[$qlp_coeff>>2]|0;
    $1066 = ($1065|0)<(0);
    $1067 = $1066 << 31 >> 31;
    $i$1146 = 0;
    while(1) {
     $1098 = (($data) + ($i$1146<<2)|0);
     $1099 = HEAP32[$1098>>2]|0;
     $1100 = (($i$1146) + -1)|0;
     $1101 = (($data) + ($1100<<2)|0);
     $1102 = HEAP32[$1101>>2]|0;
     $1103 = ($1102|0)<(0);
     $1104 = $1103 << 31 >> 31;
     $1105 = (___muldi3(($1102|0),($1104|0),($1065|0),($1067|0))|0);
     $1106 = tempRet0;
     $1107 = (_bitshift64Ashr(($1105|0),($1106|0),($lp_quantization|0))|0);
     $1108 = tempRet0;
     $1109 = (($1099) - ($1107))|0;
     $1110 = (($residual) + ($i$1146<<2)|0);
     HEAP32[$1110>>2] = $1109;
     $1111 = (($i$1146) + 1)|0;
     $exitcond79 = ($1111|0)==($data_len|0);
     if ($exitcond79) {
      break;
     } else {
      $i$1146 = $1111;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_restore_signal($residual,$data_len,$qlp_coeff,$order,$lp_quantization,$data) {
 $residual = $residual|0;
 $data_len = $data_len|0;
 $qlp_coeff = $qlp_coeff|0;
 $order = $order|0;
 $lp_quantization = $lp_quantization|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond69 = 0, $exitcond70 = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $exitcond74 = 0, $exitcond75 = 0, $exitcond76 = 0, $exitcond77 = 0, $exitcond78 = 0, $exitcond79 = 0, $exitcond80 = 0, $i$025 = 0, $i$1044 = 0, $i$1146 = 0, $i$1248 = 0, $i$126 = 0, $i$228 = 0;
 var $i$330 = 0, $i$432 = 0, $i$534 = 0, $i$636 = 0, $i$738 = 0, $i$840 = 0, $i$942 = 0, $sum$0 = 0, $sum$1 = 0, $sum$10 = 0, $sum$11 = 0, $sum$12 = 0, $sum$13 = 0, $sum$14 = 0, $sum$15 = 0, $sum$16 = 0, $sum$17 = 0, $sum$18 = 0, $sum$19 = 0, $sum$2 = 0;
 var $sum$3 = 0, $sum$4 = 0, $sum$5 = 0, $sum$6 = 0, $sum$7 = 0, $sum$8 = 0, $sum$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($order>>>0)<(13);
 if (!($0)) {
  $1 = ($data_len|0)>(0);
  if (!($1)) {
   return;
  }
  $2 = ((($qlp_coeff)) + 124|0);
  $3 = ((($qlp_coeff)) + 120|0);
  $4 = ((($qlp_coeff)) + 116|0);
  $5 = ((($qlp_coeff)) + 112|0);
  $6 = ((($qlp_coeff)) + 108|0);
  $7 = ((($qlp_coeff)) + 104|0);
  $8 = ((($qlp_coeff)) + 100|0);
  $9 = ((($qlp_coeff)) + 96|0);
  $10 = ((($qlp_coeff)) + 92|0);
  $11 = ((($qlp_coeff)) + 88|0);
  $12 = ((($qlp_coeff)) + 84|0);
  $13 = ((($qlp_coeff)) + 80|0);
  $14 = ((($qlp_coeff)) + 76|0);
  $15 = ((($qlp_coeff)) + 72|0);
  $16 = ((($qlp_coeff)) + 68|0);
  $17 = ((($qlp_coeff)) + 64|0);
  $18 = ((($qlp_coeff)) + 60|0);
  $19 = ((($qlp_coeff)) + 56|0);
  $20 = ((($qlp_coeff)) + 52|0);
  $21 = ((($qlp_coeff)) + 48|0);
  $22 = ((($qlp_coeff)) + 44|0);
  $23 = ((($qlp_coeff)) + 40|0);
  $24 = ((($qlp_coeff)) + 36|0);
  $25 = ((($qlp_coeff)) + 32|0);
  $26 = ((($qlp_coeff)) + 28|0);
  $27 = ((($qlp_coeff)) + 24|0);
  $28 = ((($qlp_coeff)) + 20|0);
  $29 = ((($qlp_coeff)) + 16|0);
  $30 = ((($qlp_coeff)) + 12|0);
  $31 = ((($qlp_coeff)) + 8|0);
  $32 = ((($qlp_coeff)) + 4|0);
  $i$1248 = 0;
  while(1) {
   switch ($order|0) {
   case 32:  {
    $644 = HEAP32[$2>>2]|0;
    $645 = (($i$1248) + -32)|0;
    $646 = (($data) + ($645<<2)|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = Math_imul($647, $644)|0;
    $sum$0 = $648;
    label = 53;
    break;
   }
   case 31:  {
    $sum$0 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $sum$1 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $sum$2 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $sum$3 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $sum$4 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $sum$5 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $sum$6 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $sum$7 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $sum$8 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $sum$9 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $sum$10 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $sum$11 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $sum$12 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $sum$13 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $sum$14 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $sum$15 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $sum$16 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $sum$17 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $sum$18 = 0;
    label = 71;
    break;
   }
   default: {
    $sum$19 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $649 = HEAP32[$3>>2]|0;
    $650 = (($i$1248) + -31)|0;
    $651 = (($data) + ($650<<2)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = Math_imul($652, $649)|0;
    $654 = (($653) + ($sum$0))|0;
    $sum$1 = $654;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $655 = HEAP32[$4>>2]|0;
    $656 = (($i$1248) + -30)|0;
    $657 = (($data) + ($656<<2)|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = Math_imul($658, $655)|0;
    $660 = (($659) + ($sum$1))|0;
    $sum$2 = $660;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $661 = HEAP32[$5>>2]|0;
    $662 = (($i$1248) + -29)|0;
    $663 = (($data) + ($662<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = Math_imul($664, $661)|0;
    $666 = (($665) + ($sum$2))|0;
    $sum$3 = $666;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $667 = HEAP32[$6>>2]|0;
    $668 = (($i$1248) + -28)|0;
    $669 = (($data) + ($668<<2)|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = Math_imul($670, $667)|0;
    $672 = (($671) + ($sum$3))|0;
    $sum$4 = $672;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $673 = HEAP32[$7>>2]|0;
    $674 = (($i$1248) + -27)|0;
    $675 = (($data) + ($674<<2)|0);
    $676 = HEAP32[$675>>2]|0;
    $677 = Math_imul($676, $673)|0;
    $678 = (($677) + ($sum$4))|0;
    $sum$5 = $678;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $679 = HEAP32[$8>>2]|0;
    $680 = (($i$1248) + -26)|0;
    $681 = (($data) + ($680<<2)|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = Math_imul($682, $679)|0;
    $684 = (($683) + ($sum$5))|0;
    $sum$6 = $684;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $685 = HEAP32[$9>>2]|0;
    $686 = (($i$1248) + -25)|0;
    $687 = (($data) + ($686<<2)|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = Math_imul($688, $685)|0;
    $690 = (($689) + ($sum$6))|0;
    $sum$7 = $690;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $691 = HEAP32[$10>>2]|0;
    $692 = (($i$1248) + -24)|0;
    $693 = (($data) + ($692<<2)|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = Math_imul($694, $691)|0;
    $696 = (($695) + ($sum$7))|0;
    $sum$8 = $696;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $697 = HEAP32[$11>>2]|0;
    $698 = (($i$1248) + -23)|0;
    $699 = (($data) + ($698<<2)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = Math_imul($700, $697)|0;
    $702 = (($701) + ($sum$8))|0;
    $sum$9 = $702;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $703 = HEAP32[$12>>2]|0;
    $704 = (($i$1248) + -22)|0;
    $705 = (($data) + ($704<<2)|0);
    $706 = HEAP32[$705>>2]|0;
    $707 = Math_imul($706, $703)|0;
    $708 = (($707) + ($sum$9))|0;
    $sum$10 = $708;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $709 = HEAP32[$13>>2]|0;
    $710 = (($i$1248) + -21)|0;
    $711 = (($data) + ($710<<2)|0);
    $712 = HEAP32[$711>>2]|0;
    $713 = Math_imul($712, $709)|0;
    $714 = (($713) + ($sum$10))|0;
    $sum$11 = $714;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $715 = HEAP32[$14>>2]|0;
    $716 = (($i$1248) + -20)|0;
    $717 = (($data) + ($716<<2)|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = Math_imul($718, $715)|0;
    $720 = (($719) + ($sum$11))|0;
    $sum$12 = $720;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $721 = HEAP32[$15>>2]|0;
    $722 = (($i$1248) + -19)|0;
    $723 = (($data) + ($722<<2)|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = Math_imul($724, $721)|0;
    $726 = (($725) + ($sum$12))|0;
    $sum$13 = $726;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $727 = HEAP32[$16>>2]|0;
    $728 = (($i$1248) + -18)|0;
    $729 = (($data) + ($728<<2)|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = Math_imul($730, $727)|0;
    $732 = (($731) + ($sum$13))|0;
    $sum$14 = $732;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $733 = HEAP32[$17>>2]|0;
    $734 = (($i$1248) + -17)|0;
    $735 = (($data) + ($734<<2)|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = Math_imul($736, $733)|0;
    $738 = (($737) + ($sum$14))|0;
    $sum$15 = $738;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $739 = HEAP32[$18>>2]|0;
    $740 = (($i$1248) + -16)|0;
    $741 = (($data) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = Math_imul($742, $739)|0;
    $744 = (($743) + ($sum$15))|0;
    $sum$16 = $744;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $745 = HEAP32[$19>>2]|0;
    $746 = (($i$1248) + -15)|0;
    $747 = (($data) + ($746<<2)|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = Math_imul($748, $745)|0;
    $750 = (($749) + ($sum$16))|0;
    $sum$17 = $750;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $751 = HEAP32[$20>>2]|0;
    $752 = (($i$1248) + -14)|0;
    $753 = (($data) + ($752<<2)|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = Math_imul($754, $751)|0;
    $756 = (($755) + ($sum$17))|0;
    $sum$18 = $756;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $757 = HEAP32[$21>>2]|0;
    $758 = (($i$1248) + -13)|0;
    $759 = (($data) + ($758<<2)|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = Math_imul($760, $757)|0;
    $762 = (($761) + ($sum$18))|0;
    $763 = HEAP32[$22>>2]|0;
    $764 = (($i$1248) + -12)|0;
    $765 = (($data) + ($764<<2)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = Math_imul($766, $763)|0;
    $768 = (($762) + ($767))|0;
    $769 = HEAP32[$23>>2]|0;
    $770 = (($i$1248) + -11)|0;
    $771 = (($data) + ($770<<2)|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = Math_imul($772, $769)|0;
    $774 = (($768) + ($773))|0;
    $775 = HEAP32[$24>>2]|0;
    $776 = (($i$1248) + -10)|0;
    $777 = (($data) + ($776<<2)|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = Math_imul($778, $775)|0;
    $780 = (($774) + ($779))|0;
    $781 = HEAP32[$25>>2]|0;
    $782 = (($i$1248) + -9)|0;
    $783 = (($data) + ($782<<2)|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = Math_imul($784, $781)|0;
    $786 = (($780) + ($785))|0;
    $787 = HEAP32[$26>>2]|0;
    $788 = (($i$1248) + -8)|0;
    $789 = (($data) + ($788<<2)|0);
    $790 = HEAP32[$789>>2]|0;
    $791 = Math_imul($790, $787)|0;
    $792 = (($786) + ($791))|0;
    $793 = HEAP32[$27>>2]|0;
    $794 = (($i$1248) + -7)|0;
    $795 = (($data) + ($794<<2)|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = Math_imul($796, $793)|0;
    $798 = (($792) + ($797))|0;
    $799 = HEAP32[$28>>2]|0;
    $800 = (($i$1248) + -6)|0;
    $801 = (($data) + ($800<<2)|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = Math_imul($802, $799)|0;
    $804 = (($798) + ($803))|0;
    $805 = HEAP32[$29>>2]|0;
    $806 = (($i$1248) + -5)|0;
    $807 = (($data) + ($806<<2)|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = Math_imul($808, $805)|0;
    $810 = (($804) + ($809))|0;
    $811 = HEAP32[$30>>2]|0;
    $812 = (($i$1248) + -4)|0;
    $813 = (($data) + ($812<<2)|0);
    $814 = HEAP32[$813>>2]|0;
    $815 = Math_imul($814, $811)|0;
    $816 = (($810) + ($815))|0;
    $817 = HEAP32[$31>>2]|0;
    $818 = (($i$1248) + -3)|0;
    $819 = (($data) + ($818<<2)|0);
    $820 = HEAP32[$819>>2]|0;
    $821 = Math_imul($820, $817)|0;
    $822 = (($816) + ($821))|0;
    $823 = HEAP32[$32>>2]|0;
    $824 = (($i$1248) + -2)|0;
    $825 = (($data) + ($824<<2)|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = Math_imul($826, $823)|0;
    $828 = (($822) + ($827))|0;
    $829 = HEAP32[$qlp_coeff>>2]|0;
    $830 = (($i$1248) + -1)|0;
    $831 = (($data) + ($830<<2)|0);
    $832 = HEAP32[$831>>2]|0;
    $833 = Math_imul($832, $829)|0;
    $834 = (($828) + ($833))|0;
    $sum$19 = $834;
   }
   $835 = (($residual) + ($i$1248<<2)|0);
   $836 = HEAP32[$835>>2]|0;
   $837 = $sum$19 >> $lp_quantization;
   $838 = (($836) + ($837))|0;
   $839 = (($data) + ($i$1248<<2)|0);
   HEAP32[$839>>2] = $838;
   $840 = (($i$1248) + 1)|0;
   $exitcond80 = ($840|0)==($data_len|0);
   if ($exitcond80) {
    break;
   } else {
    $i$1248 = $840;
   }
  }
  return;
 }
 $33 = ($order>>>0)>(8);
 if ($33) {
  $34 = ($order>>>0)>(10);
  if ($34) {
   $35 = ($order|0)==(12);
   $36 = ($data_len|0)>(0);
   if ($35) {
    if (!($36)) {
     return;
    }
    $58 = ((($qlp_coeff)) + 44|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($qlp_coeff)) + 40|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($qlp_coeff)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($qlp_coeff)) + 32|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($qlp_coeff)) + 28|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($qlp_coeff)) + 24|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($qlp_coeff)) + 20|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($qlp_coeff)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($qlp_coeff)) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($qlp_coeff)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($qlp_coeff)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = HEAP32[$qlp_coeff>>2]|0;
    $i$025 = 0;
    while(1) {
     $81 = (($i$025) + -12)|0;
     $82 = (($data) + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = Math_imul($83, $59)|0;
     $85 = (($i$025) + -11)|0;
     $86 = (($data) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = Math_imul($87, $61)|0;
     $89 = (($88) + ($84))|0;
     $90 = (($i$025) + -10)|0;
     $91 = (($data) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = Math_imul($92, $63)|0;
     $94 = (($89) + ($93))|0;
     $95 = (($i$025) + -9)|0;
     $96 = (($data) + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = Math_imul($97, $65)|0;
     $99 = (($94) + ($98))|0;
     $100 = (($i$025) + -8)|0;
     $101 = (($data) + ($100<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = Math_imul($102, $67)|0;
     $104 = (($99) + ($103))|0;
     $105 = (($i$025) + -7)|0;
     $106 = (($data) + ($105<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = Math_imul($107, $69)|0;
     $109 = (($104) + ($108))|0;
     $110 = (($i$025) + -6)|0;
     $111 = (($data) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = Math_imul($112, $71)|0;
     $114 = (($109) + ($113))|0;
     $115 = (($i$025) + -5)|0;
     $116 = (($data) + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = Math_imul($117, $73)|0;
     $119 = (($114) + ($118))|0;
     $120 = (($i$025) + -4)|0;
     $121 = (($data) + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = Math_imul($122, $75)|0;
     $124 = (($119) + ($123))|0;
     $125 = (($i$025) + -3)|0;
     $126 = (($data) + ($125<<2)|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = Math_imul($127, $77)|0;
     $129 = (($124) + ($128))|0;
     $130 = (($i$025) + -2)|0;
     $131 = (($data) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = Math_imul($132, $79)|0;
     $134 = (($129) + ($133))|0;
     $135 = (($i$025) + -1)|0;
     $136 = (($data) + ($135<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = Math_imul($137, $80)|0;
     $139 = (($134) + ($138))|0;
     $140 = (($residual) + ($i$025<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $139 >> $lp_quantization;
     $143 = (($142) + ($141))|0;
     $144 = (($data) + ($i$025<<2)|0);
     HEAP32[$144>>2] = $143;
     $145 = (($i$025) + 1)|0;
     $exitcond = ($145|0)==($data_len|0);
     if ($exitcond) {
      break;
     } else {
      $i$025 = $145;
     }
    }
    return;
   } else {
    if (!($36)) {
     return;
    }
    $37 = ((($qlp_coeff)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($qlp_coeff)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($qlp_coeff)) + 32|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($qlp_coeff)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($qlp_coeff)) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($qlp_coeff)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($qlp_coeff)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($qlp_coeff)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($qlp_coeff)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($qlp_coeff)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$qlp_coeff>>2]|0;
    $i$126 = 0;
    while(1) {
     $146 = (($i$126) + -11)|0;
     $147 = (($data) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = Math_imul($148, $38)|0;
     $150 = (($i$126) + -10)|0;
     $151 = (($data) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = Math_imul($152, $40)|0;
     $154 = (($153) + ($149))|0;
     $155 = (($i$126) + -9)|0;
     $156 = (($data) + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = Math_imul($157, $42)|0;
     $159 = (($154) + ($158))|0;
     $160 = (($i$126) + -8)|0;
     $161 = (($data) + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = Math_imul($162, $44)|0;
     $164 = (($159) + ($163))|0;
     $165 = (($i$126) + -7)|0;
     $166 = (($data) + ($165<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = Math_imul($167, $46)|0;
     $169 = (($164) + ($168))|0;
     $170 = (($i$126) + -6)|0;
     $171 = (($data) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = Math_imul($172, $48)|0;
     $174 = (($169) + ($173))|0;
     $175 = (($i$126) + -5)|0;
     $176 = (($data) + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = Math_imul($177, $50)|0;
     $179 = (($174) + ($178))|0;
     $180 = (($i$126) + -4)|0;
     $181 = (($data) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = Math_imul($182, $52)|0;
     $184 = (($179) + ($183))|0;
     $185 = (($i$126) + -3)|0;
     $186 = (($data) + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = Math_imul($187, $54)|0;
     $189 = (($184) + ($188))|0;
     $190 = (($i$126) + -2)|0;
     $191 = (($data) + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = Math_imul($192, $56)|0;
     $194 = (($189) + ($193))|0;
     $195 = (($i$126) + -1)|0;
     $196 = (($data) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = Math_imul($197, $57)|0;
     $199 = (($194) + ($198))|0;
     $200 = (($residual) + ($i$126<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $199 >> $lp_quantization;
     $203 = (($202) + ($201))|0;
     $204 = (($data) + ($i$126<<2)|0);
     HEAP32[$204>>2] = $203;
     $205 = (($i$126) + 1)|0;
     $exitcond69 = ($205|0)==($data_len|0);
     if ($exitcond69) {
      break;
     } else {
      $i$126 = $205;
     }
    }
    return;
   }
  } else {
   $206 = ($order|0)==(10);
   $207 = ($data_len|0)>(0);
   if ($206) {
    if (!($207)) {
     return;
    }
    $225 = ((($qlp_coeff)) + 36|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ((($qlp_coeff)) + 32|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ((($qlp_coeff)) + 28|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ((($qlp_coeff)) + 24|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ((($qlp_coeff)) + 20|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ((($qlp_coeff)) + 16|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ((($qlp_coeff)) + 12|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ((($qlp_coeff)) + 8|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ((($qlp_coeff)) + 4|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = HEAP32[$qlp_coeff>>2]|0;
    $i$228 = 0;
    while(1) {
     $244 = (($i$228) + -10)|0;
     $245 = (($data) + ($244<<2)|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = Math_imul($246, $226)|0;
     $248 = (($i$228) + -9)|0;
     $249 = (($data) + ($248<<2)|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = Math_imul($250, $228)|0;
     $252 = (($251) + ($247))|0;
     $253 = (($i$228) + -8)|0;
     $254 = (($data) + ($253<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = Math_imul($255, $230)|0;
     $257 = (($252) + ($256))|0;
     $258 = (($i$228) + -7)|0;
     $259 = (($data) + ($258<<2)|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = Math_imul($260, $232)|0;
     $262 = (($257) + ($261))|0;
     $263 = (($i$228) + -6)|0;
     $264 = (($data) + ($263<<2)|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = Math_imul($265, $234)|0;
     $267 = (($262) + ($266))|0;
     $268 = (($i$228) + -5)|0;
     $269 = (($data) + ($268<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = Math_imul($270, $236)|0;
     $272 = (($267) + ($271))|0;
     $273 = (($i$228) + -4)|0;
     $274 = (($data) + ($273<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = Math_imul($275, $238)|0;
     $277 = (($272) + ($276))|0;
     $278 = (($i$228) + -3)|0;
     $279 = (($data) + ($278<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = Math_imul($280, $240)|0;
     $282 = (($277) + ($281))|0;
     $283 = (($i$228) + -2)|0;
     $284 = (($data) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = Math_imul($285, $242)|0;
     $287 = (($282) + ($286))|0;
     $288 = (($i$228) + -1)|0;
     $289 = (($data) + ($288<<2)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = Math_imul($290, $243)|0;
     $292 = (($287) + ($291))|0;
     $293 = (($residual) + ($i$228<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $292 >> $lp_quantization;
     $296 = (($295) + ($294))|0;
     $297 = (($data) + ($i$228<<2)|0);
     HEAP32[$297>>2] = $296;
     $298 = (($i$228) + 1)|0;
     $exitcond70 = ($298|0)==($data_len|0);
     if ($exitcond70) {
      break;
     } else {
      $i$228 = $298;
     }
    }
    return;
   } else {
    if (!($207)) {
     return;
    }
    $208 = ((($qlp_coeff)) + 32|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ((($qlp_coeff)) + 28|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ((($qlp_coeff)) + 24|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ((($qlp_coeff)) + 20|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ((($qlp_coeff)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = ((($qlp_coeff)) + 12|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ((($qlp_coeff)) + 8|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = ((($qlp_coeff)) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = HEAP32[$qlp_coeff>>2]|0;
    $i$330 = 0;
    while(1) {
     $299 = (($i$330) + -9)|0;
     $300 = (($data) + ($299<<2)|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = Math_imul($301, $209)|0;
     $303 = (($i$330) + -8)|0;
     $304 = (($data) + ($303<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = Math_imul($305, $211)|0;
     $307 = (($306) + ($302))|0;
     $308 = (($i$330) + -7)|0;
     $309 = (($data) + ($308<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = Math_imul($310, $213)|0;
     $312 = (($307) + ($311))|0;
     $313 = (($i$330) + -6)|0;
     $314 = (($data) + ($313<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = Math_imul($315, $215)|0;
     $317 = (($312) + ($316))|0;
     $318 = (($i$330) + -5)|0;
     $319 = (($data) + ($318<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = Math_imul($320, $217)|0;
     $322 = (($317) + ($321))|0;
     $323 = (($i$330) + -4)|0;
     $324 = (($data) + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = Math_imul($325, $219)|0;
     $327 = (($322) + ($326))|0;
     $328 = (($i$330) + -3)|0;
     $329 = (($data) + ($328<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = Math_imul($330, $221)|0;
     $332 = (($327) + ($331))|0;
     $333 = (($i$330) + -2)|0;
     $334 = (($data) + ($333<<2)|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = Math_imul($335, $223)|0;
     $337 = (($332) + ($336))|0;
     $338 = (($i$330) + -1)|0;
     $339 = (($data) + ($338<<2)|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = Math_imul($340, $224)|0;
     $342 = (($337) + ($341))|0;
     $343 = (($residual) + ($i$330<<2)|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = $342 >> $lp_quantization;
     $346 = (($345) + ($344))|0;
     $347 = (($data) + ($i$330<<2)|0);
     HEAP32[$347>>2] = $346;
     $348 = (($i$330) + 1)|0;
     $exitcond71 = ($348|0)==($data_len|0);
     if ($exitcond71) {
      break;
     } else {
      $i$330 = $348;
     }
    }
    return;
   }
  }
 }
 $349 = ($order>>>0)>(4);
 if ($349) {
  $350 = ($order>>>0)>(6);
  if ($350) {
   $351 = ($order|0)==(8);
   $352 = ($data_len|0)>(0);
   if ($351) {
    if (!($352)) {
     return;
    }
    $366 = ((($qlp_coeff)) + 28|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = ((($qlp_coeff)) + 24|0);
    $369 = HEAP32[$368>>2]|0;
    $370 = ((($qlp_coeff)) + 20|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ((($qlp_coeff)) + 16|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ((($qlp_coeff)) + 12|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ((($qlp_coeff)) + 8|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = ((($qlp_coeff)) + 4|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = HEAP32[$qlp_coeff>>2]|0;
    $i$432 = 0;
    while(1) {
     $381 = (($i$432) + -8)|0;
     $382 = (($data) + ($381<<2)|0);
     $383 = HEAP32[$382>>2]|0;
     $384 = Math_imul($383, $367)|0;
     $385 = (($i$432) + -7)|0;
     $386 = (($data) + ($385<<2)|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = Math_imul($387, $369)|0;
     $389 = (($388) + ($384))|0;
     $390 = (($i$432) + -6)|0;
     $391 = (($data) + ($390<<2)|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = Math_imul($392, $371)|0;
     $394 = (($389) + ($393))|0;
     $395 = (($i$432) + -5)|0;
     $396 = (($data) + ($395<<2)|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = Math_imul($397, $373)|0;
     $399 = (($394) + ($398))|0;
     $400 = (($i$432) + -4)|0;
     $401 = (($data) + ($400<<2)|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = Math_imul($402, $375)|0;
     $404 = (($399) + ($403))|0;
     $405 = (($i$432) + -3)|0;
     $406 = (($data) + ($405<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = Math_imul($407, $377)|0;
     $409 = (($404) + ($408))|0;
     $410 = (($i$432) + -2)|0;
     $411 = (($data) + ($410<<2)|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = Math_imul($412, $379)|0;
     $414 = (($409) + ($413))|0;
     $415 = (($i$432) + -1)|0;
     $416 = (($data) + ($415<<2)|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = Math_imul($417, $380)|0;
     $419 = (($414) + ($418))|0;
     $420 = (($residual) + ($i$432<<2)|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = $419 >> $lp_quantization;
     $423 = (($422) + ($421))|0;
     $424 = (($data) + ($i$432<<2)|0);
     HEAP32[$424>>2] = $423;
     $425 = (($i$432) + 1)|0;
     $exitcond72 = ($425|0)==($data_len|0);
     if ($exitcond72) {
      break;
     } else {
      $i$432 = $425;
     }
    }
    return;
   } else {
    if (!($352)) {
     return;
    }
    $353 = ((($qlp_coeff)) + 24|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ((($qlp_coeff)) + 20|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = ((($qlp_coeff)) + 16|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = ((($qlp_coeff)) + 12|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = ((($qlp_coeff)) + 8|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ((($qlp_coeff)) + 4|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = HEAP32[$qlp_coeff>>2]|0;
    $i$534 = 0;
    while(1) {
     $426 = (($i$534) + -7)|0;
     $427 = (($data) + ($426<<2)|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = Math_imul($428, $354)|0;
     $430 = (($i$534) + -6)|0;
     $431 = (($data) + ($430<<2)|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = Math_imul($432, $356)|0;
     $434 = (($433) + ($429))|0;
     $435 = (($i$534) + -5)|0;
     $436 = (($data) + ($435<<2)|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = Math_imul($437, $358)|0;
     $439 = (($434) + ($438))|0;
     $440 = (($i$534) + -4)|0;
     $441 = (($data) + ($440<<2)|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = Math_imul($442, $360)|0;
     $444 = (($439) + ($443))|0;
     $445 = (($i$534) + -3)|0;
     $446 = (($data) + ($445<<2)|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = Math_imul($447, $362)|0;
     $449 = (($444) + ($448))|0;
     $450 = (($i$534) + -2)|0;
     $451 = (($data) + ($450<<2)|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = Math_imul($452, $364)|0;
     $454 = (($449) + ($453))|0;
     $455 = (($i$534) + -1)|0;
     $456 = (($data) + ($455<<2)|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = Math_imul($457, $365)|0;
     $459 = (($454) + ($458))|0;
     $460 = (($residual) + ($i$534<<2)|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = $459 >> $lp_quantization;
     $463 = (($462) + ($461))|0;
     $464 = (($data) + ($i$534<<2)|0);
     HEAP32[$464>>2] = $463;
     $465 = (($i$534) + 1)|0;
     $exitcond73 = ($465|0)==($data_len|0);
     if ($exitcond73) {
      break;
     } else {
      $i$534 = $465;
     }
    }
    return;
   }
  } else {
   $466 = ($order|0)==(6);
   $467 = ($data_len|0)>(0);
   if ($466) {
    if (!($467)) {
     return;
    }
    $477 = ((($qlp_coeff)) + 20|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ((($qlp_coeff)) + 16|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = ((($qlp_coeff)) + 12|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = ((($qlp_coeff)) + 8|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = ((($qlp_coeff)) + 4|0);
    $486 = HEAP32[$485>>2]|0;
    $487 = HEAP32[$qlp_coeff>>2]|0;
    $i$636 = 0;
    while(1) {
     $488 = (($i$636) + -6)|0;
     $489 = (($data) + ($488<<2)|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = Math_imul($490, $478)|0;
     $492 = (($i$636) + -5)|0;
     $493 = (($data) + ($492<<2)|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = Math_imul($494, $480)|0;
     $496 = (($495) + ($491))|0;
     $497 = (($i$636) + -4)|0;
     $498 = (($data) + ($497<<2)|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = Math_imul($499, $482)|0;
     $501 = (($496) + ($500))|0;
     $502 = (($i$636) + -3)|0;
     $503 = (($data) + ($502<<2)|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = Math_imul($504, $484)|0;
     $506 = (($501) + ($505))|0;
     $507 = (($i$636) + -2)|0;
     $508 = (($data) + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = Math_imul($509, $486)|0;
     $511 = (($506) + ($510))|0;
     $512 = (($i$636) + -1)|0;
     $513 = (($data) + ($512<<2)|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = Math_imul($514, $487)|0;
     $516 = (($511) + ($515))|0;
     $517 = (($residual) + ($i$636<<2)|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = $516 >> $lp_quantization;
     $520 = (($519) + ($518))|0;
     $521 = (($data) + ($i$636<<2)|0);
     HEAP32[$521>>2] = $520;
     $522 = (($i$636) + 1)|0;
     $exitcond74 = ($522|0)==($data_len|0);
     if ($exitcond74) {
      break;
     } else {
      $i$636 = $522;
     }
    }
    return;
   } else {
    if (!($467)) {
     return;
    }
    $468 = ((($qlp_coeff)) + 16|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = ((($qlp_coeff)) + 12|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = ((($qlp_coeff)) + 8|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = ((($qlp_coeff)) + 4|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = HEAP32[$qlp_coeff>>2]|0;
    $i$738 = 0;
    while(1) {
     $523 = (($i$738) + -5)|0;
     $524 = (($data) + ($523<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = Math_imul($525, $469)|0;
     $527 = (($i$738) + -4)|0;
     $528 = (($data) + ($527<<2)|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = Math_imul($529, $471)|0;
     $531 = (($530) + ($526))|0;
     $532 = (($i$738) + -3)|0;
     $533 = (($data) + ($532<<2)|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = Math_imul($534, $473)|0;
     $536 = (($531) + ($535))|0;
     $537 = (($i$738) + -2)|0;
     $538 = (($data) + ($537<<2)|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = Math_imul($539, $475)|0;
     $541 = (($536) + ($540))|0;
     $542 = (($i$738) + -1)|0;
     $543 = (($data) + ($542<<2)|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = Math_imul($544, $476)|0;
     $546 = (($541) + ($545))|0;
     $547 = (($residual) + ($i$738<<2)|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $546 >> $lp_quantization;
     $550 = (($549) + ($548))|0;
     $551 = (($data) + ($i$738<<2)|0);
     HEAP32[$551>>2] = $550;
     $552 = (($i$738) + 1)|0;
     $exitcond75 = ($552|0)==($data_len|0);
     if ($exitcond75) {
      break;
     } else {
      $i$738 = $552;
     }
    }
    return;
   }
  }
 } else {
  $553 = ($order>>>0)>(2);
  if ($553) {
   $554 = ($order|0)==(4);
   $555 = ($data_len|0)>(0);
   if ($554) {
    if (!($555)) {
     return;
    }
    $561 = ((($qlp_coeff)) + 12|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = ((($qlp_coeff)) + 8|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = ((($qlp_coeff)) + 4|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = HEAP32[$qlp_coeff>>2]|0;
    $i$840 = 0;
    while(1) {
     $568 = (($i$840) + -4)|0;
     $569 = (($data) + ($568<<2)|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = Math_imul($570, $562)|0;
     $572 = (($i$840) + -3)|0;
     $573 = (($data) + ($572<<2)|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = Math_imul($574, $564)|0;
     $576 = (($575) + ($571))|0;
     $577 = (($i$840) + -2)|0;
     $578 = (($data) + ($577<<2)|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = Math_imul($579, $566)|0;
     $581 = (($576) + ($580))|0;
     $582 = (($i$840) + -1)|0;
     $583 = (($data) + ($582<<2)|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = Math_imul($584, $567)|0;
     $586 = (($581) + ($585))|0;
     $587 = (($residual) + ($i$840<<2)|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = $586 >> $lp_quantization;
     $590 = (($589) + ($588))|0;
     $591 = (($data) + ($i$840<<2)|0);
     HEAP32[$591>>2] = $590;
     $592 = (($i$840) + 1)|0;
     $exitcond76 = ($592|0)==($data_len|0);
     if ($exitcond76) {
      break;
     } else {
      $i$840 = $592;
     }
    }
    return;
   } else {
    if (!($555)) {
     return;
    }
    $556 = ((($qlp_coeff)) + 8|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = ((($qlp_coeff)) + 4|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = HEAP32[$qlp_coeff>>2]|0;
    $i$942 = 0;
    while(1) {
     $593 = (($i$942) + -3)|0;
     $594 = (($data) + ($593<<2)|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = Math_imul($595, $557)|0;
     $597 = (($i$942) + -2)|0;
     $598 = (($data) + ($597<<2)|0);
     $599 = HEAP32[$598>>2]|0;
     $600 = Math_imul($599, $559)|0;
     $601 = (($600) + ($596))|0;
     $602 = (($i$942) + -1)|0;
     $603 = (($data) + ($602<<2)|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = Math_imul($604, $560)|0;
     $606 = (($601) + ($605))|0;
     $607 = (($residual) + ($i$942<<2)|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = $606 >> $lp_quantization;
     $610 = (($609) + ($608))|0;
     $611 = (($data) + ($i$942<<2)|0);
     HEAP32[$611>>2] = $610;
     $612 = (($i$942) + 1)|0;
     $exitcond77 = ($612|0)==($data_len|0);
     if ($exitcond77) {
      break;
     } else {
      $i$942 = $612;
     }
    }
    return;
   }
  } else {
   $613 = ($order|0)==(2);
   $614 = ($data_len|0)>(0);
   if ($613) {
    if (!($614)) {
     return;
    }
    $616 = ((($qlp_coeff)) + 4|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = HEAP32[$qlp_coeff>>2]|0;
    $i$1044 = 0;
    while(1) {
     $619 = (($i$1044) + -2)|0;
     $620 = (($data) + ($619<<2)|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = Math_imul($621, $617)|0;
     $623 = (($i$1044) + -1)|0;
     $624 = (($data) + ($623<<2)|0);
     $625 = HEAP32[$624>>2]|0;
     $626 = Math_imul($625, $618)|0;
     $627 = (($626) + ($622))|0;
     $628 = (($residual) + ($i$1044<<2)|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $627 >> $lp_quantization;
     $631 = (($630) + ($629))|0;
     $632 = (($data) + ($i$1044<<2)|0);
     HEAP32[$632>>2] = $631;
     $633 = (($i$1044) + 1)|0;
     $exitcond78 = ($633|0)==($data_len|0);
     if ($exitcond78) {
      break;
     } else {
      $i$1044 = $633;
     }
    }
    return;
   } else {
    if (!($614)) {
     return;
    }
    $615 = HEAP32[$qlp_coeff>>2]|0;
    $i$1146 = 0;
    while(1) {
     $634 = (($residual) + ($i$1146<<2)|0);
     $635 = HEAP32[$634>>2]|0;
     $636 = (($i$1146) + -1)|0;
     $637 = (($data) + ($636<<2)|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = Math_imul($638, $615)|0;
     $640 = $639 >> $lp_quantization;
     $641 = (($640) + ($635))|0;
     $642 = (($data) + ($i$1146<<2)|0);
     HEAP32[$642>>2] = $641;
     $643 = (($i$1146) + 1)|0;
     $exitcond79 = ($643|0)==($data_len|0);
     if ($exitcond79) {
      break;
     } else {
      $i$1146 = $643;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_restore_signal_wide($residual,$data_len,$qlp_coeff,$order,$lp_quantization,$data) {
 $residual = $residual|0;
 $data_len = $data_len|0;
 $qlp_coeff = $qlp_coeff|0;
 $order = $order|0;
 $lp_quantization = $lp_quantization|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $exitcond = 0, $exitcond69 = 0, $exitcond70 = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $exitcond74 = 0, $exitcond75 = 0, $exitcond76 = 0, $exitcond77 = 0, $exitcond78 = 0, $exitcond79 = 0, $exitcond80 = 0, $i$025 = 0, $i$1044 = 0, $i$1146 = 0, $i$1248 = 0, $i$126 = 0, $i$228 = 0;
 var $i$330 = 0, $i$432 = 0, $i$534 = 0, $i$636 = 0, $i$738 = 0, $i$840 = 0, $i$942 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($order>>>0)<(13);
 if (!($0)) {
  $1 = ($data_len|0)>(0);
  if (!($1)) {
   return;
  }
  $2 = ((($qlp_coeff)) + 124|0);
  $3 = ((($qlp_coeff)) + 120|0);
  $4 = ((($qlp_coeff)) + 116|0);
  $5 = ((($qlp_coeff)) + 112|0);
  $6 = ((($qlp_coeff)) + 108|0);
  $7 = ((($qlp_coeff)) + 104|0);
  $8 = ((($qlp_coeff)) + 100|0);
  $9 = ((($qlp_coeff)) + 96|0);
  $10 = ((($qlp_coeff)) + 92|0);
  $11 = ((($qlp_coeff)) + 88|0);
  $12 = ((($qlp_coeff)) + 84|0);
  $13 = ((($qlp_coeff)) + 80|0);
  $14 = ((($qlp_coeff)) + 76|0);
  $15 = ((($qlp_coeff)) + 72|0);
  $16 = ((($qlp_coeff)) + 68|0);
  $17 = ((($qlp_coeff)) + 64|0);
  $18 = ((($qlp_coeff)) + 60|0);
  $19 = ((($qlp_coeff)) + 56|0);
  $20 = ((($qlp_coeff)) + 52|0);
  $21 = ((($qlp_coeff)) + 48|0);
  $22 = ((($qlp_coeff)) + 44|0);
  $23 = ((($qlp_coeff)) + 40|0);
  $24 = ((($qlp_coeff)) + 36|0);
  $25 = ((($qlp_coeff)) + 32|0);
  $26 = ((($qlp_coeff)) + 28|0);
  $27 = ((($qlp_coeff)) + 24|0);
  $28 = ((($qlp_coeff)) + 20|0);
  $29 = ((($qlp_coeff)) + 16|0);
  $30 = ((($qlp_coeff)) + 12|0);
  $31 = ((($qlp_coeff)) + 8|0);
  $32 = ((($qlp_coeff)) + 4|0);
  $i$1248 = 0;
  while(1) {
   switch ($order|0) {
   case 32:  {
    $1112 = HEAP32[$2>>2]|0;
    $1113 = ($1112|0)<(0);
    $1114 = $1113 << 31 >> 31;
    $1115 = (($i$1248) + -32)|0;
    $1116 = (($data) + ($1115<<2)|0);
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = ($1117|0)<(0);
    $1119 = $1118 << 31 >> 31;
    $1120 = (___muldi3(($1117|0),($1119|0),($1112|0),($1114|0))|0);
    $1121 = tempRet0;
    $1132 = $1120;$1133 = $1121;
    label = 53;
    break;
   }
   case 31:  {
    $1132 = 0;$1133 = 0;
    label = 53;
    break;
   }
   case 30:  {
    $1146 = 0;$1147 = 0;
    label = 54;
    break;
   }
   case 29:  {
    $1160 = 0;$1161 = 0;
    label = 55;
    break;
   }
   case 28:  {
    $1174 = 0;$1175 = 0;
    label = 56;
    break;
   }
   case 27:  {
    $1188 = 0;$1189 = 0;
    label = 57;
    break;
   }
   case 26:  {
    $1202 = 0;$1203 = 0;
    label = 58;
    break;
   }
   case 25:  {
    $1216 = 0;$1217 = 0;
    label = 59;
    break;
   }
   case 24:  {
    $1230 = 0;$1231 = 0;
    label = 60;
    break;
   }
   case 23:  {
    $1244 = 0;$1245 = 0;
    label = 61;
    break;
   }
   case 22:  {
    $1258 = 0;$1259 = 0;
    label = 62;
    break;
   }
   case 21:  {
    $1272 = 0;$1273 = 0;
    label = 63;
    break;
   }
   case 20:  {
    $1286 = 0;$1287 = 0;
    label = 64;
    break;
   }
   case 19:  {
    $1300 = 0;$1301 = 0;
    label = 65;
    break;
   }
   case 18:  {
    $1314 = 0;$1315 = 0;
    label = 66;
    break;
   }
   case 17:  {
    $1328 = 0;$1329 = 0;
    label = 67;
    break;
   }
   case 16:  {
    $1342 = 0;$1343 = 0;
    label = 68;
    break;
   }
   case 15:  {
    $1356 = 0;$1357 = 0;
    label = 69;
    break;
   }
   case 14:  {
    $1370 = 0;$1371 = 0;
    label = 70;
    break;
   }
   case 13:  {
    $1384 = 0;$1385 = 0;
    label = 71;
    break;
   }
   default: {
    $1534 = 0;$1535 = 0;
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $1122 = HEAP32[$3>>2]|0;
    $1123 = ($1122|0)<(0);
    $1124 = $1123 << 31 >> 31;
    $1125 = (($i$1248) + -31)|0;
    $1126 = (($data) + ($1125<<2)|0);
    $1127 = HEAP32[$1126>>2]|0;
    $1128 = ($1127|0)<(0);
    $1129 = $1128 << 31 >> 31;
    $1130 = (___muldi3(($1127|0),($1129|0),($1122|0),($1124|0))|0);
    $1131 = tempRet0;
    $1134 = (_i64Add(($1130|0),($1131|0),($1132|0),($1133|0))|0);
    $1135 = tempRet0;
    $1146 = $1134;$1147 = $1135;
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $1136 = HEAP32[$4>>2]|0;
    $1137 = ($1136|0)<(0);
    $1138 = $1137 << 31 >> 31;
    $1139 = (($i$1248) + -30)|0;
    $1140 = (($data) + ($1139<<2)|0);
    $1141 = HEAP32[$1140>>2]|0;
    $1142 = ($1141|0)<(0);
    $1143 = $1142 << 31 >> 31;
    $1144 = (___muldi3(($1141|0),($1143|0),($1136|0),($1138|0))|0);
    $1145 = tempRet0;
    $1148 = (_i64Add(($1144|0),($1145|0),($1146|0),($1147|0))|0);
    $1149 = tempRet0;
    $1160 = $1148;$1161 = $1149;
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $1150 = HEAP32[$5>>2]|0;
    $1151 = ($1150|0)<(0);
    $1152 = $1151 << 31 >> 31;
    $1153 = (($i$1248) + -29)|0;
    $1154 = (($data) + ($1153<<2)|0);
    $1155 = HEAP32[$1154>>2]|0;
    $1156 = ($1155|0)<(0);
    $1157 = $1156 << 31 >> 31;
    $1158 = (___muldi3(($1155|0),($1157|0),($1150|0),($1152|0))|0);
    $1159 = tempRet0;
    $1162 = (_i64Add(($1158|0),($1159|0),($1160|0),($1161|0))|0);
    $1163 = tempRet0;
    $1174 = $1162;$1175 = $1163;
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $1164 = HEAP32[$6>>2]|0;
    $1165 = ($1164|0)<(0);
    $1166 = $1165 << 31 >> 31;
    $1167 = (($i$1248) + -28)|0;
    $1168 = (($data) + ($1167<<2)|0);
    $1169 = HEAP32[$1168>>2]|0;
    $1170 = ($1169|0)<(0);
    $1171 = $1170 << 31 >> 31;
    $1172 = (___muldi3(($1169|0),($1171|0),($1164|0),($1166|0))|0);
    $1173 = tempRet0;
    $1176 = (_i64Add(($1172|0),($1173|0),($1174|0),($1175|0))|0);
    $1177 = tempRet0;
    $1188 = $1176;$1189 = $1177;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $1178 = HEAP32[$7>>2]|0;
    $1179 = ($1178|0)<(0);
    $1180 = $1179 << 31 >> 31;
    $1181 = (($i$1248) + -27)|0;
    $1182 = (($data) + ($1181<<2)|0);
    $1183 = HEAP32[$1182>>2]|0;
    $1184 = ($1183|0)<(0);
    $1185 = $1184 << 31 >> 31;
    $1186 = (___muldi3(($1183|0),($1185|0),($1178|0),($1180|0))|0);
    $1187 = tempRet0;
    $1190 = (_i64Add(($1186|0),($1187|0),($1188|0),($1189|0))|0);
    $1191 = tempRet0;
    $1202 = $1190;$1203 = $1191;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $1192 = HEAP32[$8>>2]|0;
    $1193 = ($1192|0)<(0);
    $1194 = $1193 << 31 >> 31;
    $1195 = (($i$1248) + -26)|0;
    $1196 = (($data) + ($1195<<2)|0);
    $1197 = HEAP32[$1196>>2]|0;
    $1198 = ($1197|0)<(0);
    $1199 = $1198 << 31 >> 31;
    $1200 = (___muldi3(($1197|0),($1199|0),($1192|0),($1194|0))|0);
    $1201 = tempRet0;
    $1204 = (_i64Add(($1200|0),($1201|0),($1202|0),($1203|0))|0);
    $1205 = tempRet0;
    $1216 = $1204;$1217 = $1205;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $1206 = HEAP32[$9>>2]|0;
    $1207 = ($1206|0)<(0);
    $1208 = $1207 << 31 >> 31;
    $1209 = (($i$1248) + -25)|0;
    $1210 = (($data) + ($1209<<2)|0);
    $1211 = HEAP32[$1210>>2]|0;
    $1212 = ($1211|0)<(0);
    $1213 = $1212 << 31 >> 31;
    $1214 = (___muldi3(($1211|0),($1213|0),($1206|0),($1208|0))|0);
    $1215 = tempRet0;
    $1218 = (_i64Add(($1214|0),($1215|0),($1216|0),($1217|0))|0);
    $1219 = tempRet0;
    $1230 = $1218;$1231 = $1219;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $1220 = HEAP32[$10>>2]|0;
    $1221 = ($1220|0)<(0);
    $1222 = $1221 << 31 >> 31;
    $1223 = (($i$1248) + -24)|0;
    $1224 = (($data) + ($1223<<2)|0);
    $1225 = HEAP32[$1224>>2]|0;
    $1226 = ($1225|0)<(0);
    $1227 = $1226 << 31 >> 31;
    $1228 = (___muldi3(($1225|0),($1227|0),($1220|0),($1222|0))|0);
    $1229 = tempRet0;
    $1232 = (_i64Add(($1228|0),($1229|0),($1230|0),($1231|0))|0);
    $1233 = tempRet0;
    $1244 = $1232;$1245 = $1233;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $1234 = HEAP32[$11>>2]|0;
    $1235 = ($1234|0)<(0);
    $1236 = $1235 << 31 >> 31;
    $1237 = (($i$1248) + -23)|0;
    $1238 = (($data) + ($1237<<2)|0);
    $1239 = HEAP32[$1238>>2]|0;
    $1240 = ($1239|0)<(0);
    $1241 = $1240 << 31 >> 31;
    $1242 = (___muldi3(($1239|0),($1241|0),($1234|0),($1236|0))|0);
    $1243 = tempRet0;
    $1246 = (_i64Add(($1242|0),($1243|0),($1244|0),($1245|0))|0);
    $1247 = tempRet0;
    $1258 = $1246;$1259 = $1247;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $1248 = HEAP32[$12>>2]|0;
    $1249 = ($1248|0)<(0);
    $1250 = $1249 << 31 >> 31;
    $1251 = (($i$1248) + -22)|0;
    $1252 = (($data) + ($1251<<2)|0);
    $1253 = HEAP32[$1252>>2]|0;
    $1254 = ($1253|0)<(0);
    $1255 = $1254 << 31 >> 31;
    $1256 = (___muldi3(($1253|0),($1255|0),($1248|0),($1250|0))|0);
    $1257 = tempRet0;
    $1260 = (_i64Add(($1256|0),($1257|0),($1258|0),($1259|0))|0);
    $1261 = tempRet0;
    $1272 = $1260;$1273 = $1261;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $1262 = HEAP32[$13>>2]|0;
    $1263 = ($1262|0)<(0);
    $1264 = $1263 << 31 >> 31;
    $1265 = (($i$1248) + -21)|0;
    $1266 = (($data) + ($1265<<2)|0);
    $1267 = HEAP32[$1266>>2]|0;
    $1268 = ($1267|0)<(0);
    $1269 = $1268 << 31 >> 31;
    $1270 = (___muldi3(($1267|0),($1269|0),($1262|0),($1264|0))|0);
    $1271 = tempRet0;
    $1274 = (_i64Add(($1270|0),($1271|0),($1272|0),($1273|0))|0);
    $1275 = tempRet0;
    $1286 = $1274;$1287 = $1275;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $1276 = HEAP32[$14>>2]|0;
    $1277 = ($1276|0)<(0);
    $1278 = $1277 << 31 >> 31;
    $1279 = (($i$1248) + -20)|0;
    $1280 = (($data) + ($1279<<2)|0);
    $1281 = HEAP32[$1280>>2]|0;
    $1282 = ($1281|0)<(0);
    $1283 = $1282 << 31 >> 31;
    $1284 = (___muldi3(($1281|0),($1283|0),($1276|0),($1278|0))|0);
    $1285 = tempRet0;
    $1288 = (_i64Add(($1284|0),($1285|0),($1286|0),($1287|0))|0);
    $1289 = tempRet0;
    $1300 = $1288;$1301 = $1289;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $1290 = HEAP32[$15>>2]|0;
    $1291 = ($1290|0)<(0);
    $1292 = $1291 << 31 >> 31;
    $1293 = (($i$1248) + -19)|0;
    $1294 = (($data) + ($1293<<2)|0);
    $1295 = HEAP32[$1294>>2]|0;
    $1296 = ($1295|0)<(0);
    $1297 = $1296 << 31 >> 31;
    $1298 = (___muldi3(($1295|0),($1297|0),($1290|0),($1292|0))|0);
    $1299 = tempRet0;
    $1302 = (_i64Add(($1298|0),($1299|0),($1300|0),($1301|0))|0);
    $1303 = tempRet0;
    $1314 = $1302;$1315 = $1303;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $1304 = HEAP32[$16>>2]|0;
    $1305 = ($1304|0)<(0);
    $1306 = $1305 << 31 >> 31;
    $1307 = (($i$1248) + -18)|0;
    $1308 = (($data) + ($1307<<2)|0);
    $1309 = HEAP32[$1308>>2]|0;
    $1310 = ($1309|0)<(0);
    $1311 = $1310 << 31 >> 31;
    $1312 = (___muldi3(($1309|0),($1311|0),($1304|0),($1306|0))|0);
    $1313 = tempRet0;
    $1316 = (_i64Add(($1312|0),($1313|0),($1314|0),($1315|0))|0);
    $1317 = tempRet0;
    $1328 = $1316;$1329 = $1317;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $1318 = HEAP32[$17>>2]|0;
    $1319 = ($1318|0)<(0);
    $1320 = $1319 << 31 >> 31;
    $1321 = (($i$1248) + -17)|0;
    $1322 = (($data) + ($1321<<2)|0);
    $1323 = HEAP32[$1322>>2]|0;
    $1324 = ($1323|0)<(0);
    $1325 = $1324 << 31 >> 31;
    $1326 = (___muldi3(($1323|0),($1325|0),($1318|0),($1320|0))|0);
    $1327 = tempRet0;
    $1330 = (_i64Add(($1326|0),($1327|0),($1328|0),($1329|0))|0);
    $1331 = tempRet0;
    $1342 = $1330;$1343 = $1331;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $1332 = HEAP32[$18>>2]|0;
    $1333 = ($1332|0)<(0);
    $1334 = $1333 << 31 >> 31;
    $1335 = (($i$1248) + -16)|0;
    $1336 = (($data) + ($1335<<2)|0);
    $1337 = HEAP32[$1336>>2]|0;
    $1338 = ($1337|0)<(0);
    $1339 = $1338 << 31 >> 31;
    $1340 = (___muldi3(($1337|0),($1339|0),($1332|0),($1334|0))|0);
    $1341 = tempRet0;
    $1344 = (_i64Add(($1340|0),($1341|0),($1342|0),($1343|0))|0);
    $1345 = tempRet0;
    $1356 = $1344;$1357 = $1345;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $1346 = HEAP32[$19>>2]|0;
    $1347 = ($1346|0)<(0);
    $1348 = $1347 << 31 >> 31;
    $1349 = (($i$1248) + -15)|0;
    $1350 = (($data) + ($1349<<2)|0);
    $1351 = HEAP32[$1350>>2]|0;
    $1352 = ($1351|0)<(0);
    $1353 = $1352 << 31 >> 31;
    $1354 = (___muldi3(($1351|0),($1353|0),($1346|0),($1348|0))|0);
    $1355 = tempRet0;
    $1358 = (_i64Add(($1354|0),($1355|0),($1356|0),($1357|0))|0);
    $1359 = tempRet0;
    $1370 = $1358;$1371 = $1359;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $1360 = HEAP32[$20>>2]|0;
    $1361 = ($1360|0)<(0);
    $1362 = $1361 << 31 >> 31;
    $1363 = (($i$1248) + -14)|0;
    $1364 = (($data) + ($1363<<2)|0);
    $1365 = HEAP32[$1364>>2]|0;
    $1366 = ($1365|0)<(0);
    $1367 = $1366 << 31 >> 31;
    $1368 = (___muldi3(($1365|0),($1367|0),($1360|0),($1362|0))|0);
    $1369 = tempRet0;
    $1372 = (_i64Add(($1368|0),($1369|0),($1370|0),($1371|0))|0);
    $1373 = tempRet0;
    $1384 = $1372;$1385 = $1373;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $1374 = HEAP32[$21>>2]|0;
    $1375 = ($1374|0)<(0);
    $1376 = $1375 << 31 >> 31;
    $1377 = (($i$1248) + -13)|0;
    $1378 = (($data) + ($1377<<2)|0);
    $1379 = HEAP32[$1378>>2]|0;
    $1380 = ($1379|0)<(0);
    $1381 = $1380 << 31 >> 31;
    $1382 = (___muldi3(($1379|0),($1381|0),($1374|0),($1376|0))|0);
    $1383 = tempRet0;
    $1386 = (_i64Add(($1382|0),($1383|0),($1384|0),($1385|0))|0);
    $1387 = tempRet0;
    $1388 = HEAP32[$22>>2]|0;
    $1389 = ($1388|0)<(0);
    $1390 = $1389 << 31 >> 31;
    $1391 = (($i$1248) + -12)|0;
    $1392 = (($data) + ($1391<<2)|0);
    $1393 = HEAP32[$1392>>2]|0;
    $1394 = ($1393|0)<(0);
    $1395 = $1394 << 31 >> 31;
    $1396 = (___muldi3(($1393|0),($1395|0),($1388|0),($1390|0))|0);
    $1397 = tempRet0;
    $1398 = (_i64Add(($1386|0),($1387|0),($1396|0),($1397|0))|0);
    $1399 = tempRet0;
    $1400 = HEAP32[$23>>2]|0;
    $1401 = ($1400|0)<(0);
    $1402 = $1401 << 31 >> 31;
    $1403 = (($i$1248) + -11)|0;
    $1404 = (($data) + ($1403<<2)|0);
    $1405 = HEAP32[$1404>>2]|0;
    $1406 = ($1405|0)<(0);
    $1407 = $1406 << 31 >> 31;
    $1408 = (___muldi3(($1405|0),($1407|0),($1400|0),($1402|0))|0);
    $1409 = tempRet0;
    $1410 = (_i64Add(($1398|0),($1399|0),($1408|0),($1409|0))|0);
    $1411 = tempRet0;
    $1412 = HEAP32[$24>>2]|0;
    $1413 = ($1412|0)<(0);
    $1414 = $1413 << 31 >> 31;
    $1415 = (($i$1248) + -10)|0;
    $1416 = (($data) + ($1415<<2)|0);
    $1417 = HEAP32[$1416>>2]|0;
    $1418 = ($1417|0)<(0);
    $1419 = $1418 << 31 >> 31;
    $1420 = (___muldi3(($1417|0),($1419|0),($1412|0),($1414|0))|0);
    $1421 = tempRet0;
    $1422 = (_i64Add(($1410|0),($1411|0),($1420|0),($1421|0))|0);
    $1423 = tempRet0;
    $1424 = HEAP32[$25>>2]|0;
    $1425 = ($1424|0)<(0);
    $1426 = $1425 << 31 >> 31;
    $1427 = (($i$1248) + -9)|0;
    $1428 = (($data) + ($1427<<2)|0);
    $1429 = HEAP32[$1428>>2]|0;
    $1430 = ($1429|0)<(0);
    $1431 = $1430 << 31 >> 31;
    $1432 = (___muldi3(($1429|0),($1431|0),($1424|0),($1426|0))|0);
    $1433 = tempRet0;
    $1434 = (_i64Add(($1422|0),($1423|0),($1432|0),($1433|0))|0);
    $1435 = tempRet0;
    $1436 = HEAP32[$26>>2]|0;
    $1437 = ($1436|0)<(0);
    $1438 = $1437 << 31 >> 31;
    $1439 = (($i$1248) + -8)|0;
    $1440 = (($data) + ($1439<<2)|0);
    $1441 = HEAP32[$1440>>2]|0;
    $1442 = ($1441|0)<(0);
    $1443 = $1442 << 31 >> 31;
    $1444 = (___muldi3(($1441|0),($1443|0),($1436|0),($1438|0))|0);
    $1445 = tempRet0;
    $1446 = (_i64Add(($1434|0),($1435|0),($1444|0),($1445|0))|0);
    $1447 = tempRet0;
    $1448 = HEAP32[$27>>2]|0;
    $1449 = ($1448|0)<(0);
    $1450 = $1449 << 31 >> 31;
    $1451 = (($i$1248) + -7)|0;
    $1452 = (($data) + ($1451<<2)|0);
    $1453 = HEAP32[$1452>>2]|0;
    $1454 = ($1453|0)<(0);
    $1455 = $1454 << 31 >> 31;
    $1456 = (___muldi3(($1453|0),($1455|0),($1448|0),($1450|0))|0);
    $1457 = tempRet0;
    $1458 = (_i64Add(($1446|0),($1447|0),($1456|0),($1457|0))|0);
    $1459 = tempRet0;
    $1460 = HEAP32[$28>>2]|0;
    $1461 = ($1460|0)<(0);
    $1462 = $1461 << 31 >> 31;
    $1463 = (($i$1248) + -6)|0;
    $1464 = (($data) + ($1463<<2)|0);
    $1465 = HEAP32[$1464>>2]|0;
    $1466 = ($1465|0)<(0);
    $1467 = $1466 << 31 >> 31;
    $1468 = (___muldi3(($1465|0),($1467|0),($1460|0),($1462|0))|0);
    $1469 = tempRet0;
    $1470 = (_i64Add(($1458|0),($1459|0),($1468|0),($1469|0))|0);
    $1471 = tempRet0;
    $1472 = HEAP32[$29>>2]|0;
    $1473 = ($1472|0)<(0);
    $1474 = $1473 << 31 >> 31;
    $1475 = (($i$1248) + -5)|0;
    $1476 = (($data) + ($1475<<2)|0);
    $1477 = HEAP32[$1476>>2]|0;
    $1478 = ($1477|0)<(0);
    $1479 = $1478 << 31 >> 31;
    $1480 = (___muldi3(($1477|0),($1479|0),($1472|0),($1474|0))|0);
    $1481 = tempRet0;
    $1482 = (_i64Add(($1470|0),($1471|0),($1480|0),($1481|0))|0);
    $1483 = tempRet0;
    $1484 = HEAP32[$30>>2]|0;
    $1485 = ($1484|0)<(0);
    $1486 = $1485 << 31 >> 31;
    $1487 = (($i$1248) + -4)|0;
    $1488 = (($data) + ($1487<<2)|0);
    $1489 = HEAP32[$1488>>2]|0;
    $1490 = ($1489|0)<(0);
    $1491 = $1490 << 31 >> 31;
    $1492 = (___muldi3(($1489|0),($1491|0),($1484|0),($1486|0))|0);
    $1493 = tempRet0;
    $1494 = (_i64Add(($1482|0),($1483|0),($1492|0),($1493|0))|0);
    $1495 = tempRet0;
    $1496 = HEAP32[$31>>2]|0;
    $1497 = ($1496|0)<(0);
    $1498 = $1497 << 31 >> 31;
    $1499 = (($i$1248) + -3)|0;
    $1500 = (($data) + ($1499<<2)|0);
    $1501 = HEAP32[$1500>>2]|0;
    $1502 = ($1501|0)<(0);
    $1503 = $1502 << 31 >> 31;
    $1504 = (___muldi3(($1501|0),($1503|0),($1496|0),($1498|0))|0);
    $1505 = tempRet0;
    $1506 = (_i64Add(($1494|0),($1495|0),($1504|0),($1505|0))|0);
    $1507 = tempRet0;
    $1508 = HEAP32[$32>>2]|0;
    $1509 = ($1508|0)<(0);
    $1510 = $1509 << 31 >> 31;
    $1511 = (($i$1248) + -2)|0;
    $1512 = (($data) + ($1511<<2)|0);
    $1513 = HEAP32[$1512>>2]|0;
    $1514 = ($1513|0)<(0);
    $1515 = $1514 << 31 >> 31;
    $1516 = (___muldi3(($1513|0),($1515|0),($1508|0),($1510|0))|0);
    $1517 = tempRet0;
    $1518 = (_i64Add(($1506|0),($1507|0),($1516|0),($1517|0))|0);
    $1519 = tempRet0;
    $1520 = HEAP32[$qlp_coeff>>2]|0;
    $1521 = ($1520|0)<(0);
    $1522 = $1521 << 31 >> 31;
    $1523 = (($i$1248) + -1)|0;
    $1524 = (($data) + ($1523<<2)|0);
    $1525 = HEAP32[$1524>>2]|0;
    $1526 = ($1525|0)<(0);
    $1527 = $1526 << 31 >> 31;
    $1528 = (___muldi3(($1525|0),($1527|0),($1520|0),($1522|0))|0);
    $1529 = tempRet0;
    $1530 = (_i64Add(($1518|0),($1519|0),($1528|0),($1529|0))|0);
    $1531 = tempRet0;
    $1534 = $1530;$1535 = $1531;
   }
   $1532 = (($residual) + ($i$1248<<2)|0);
   $1533 = HEAP32[$1532>>2]|0;
   $1536 = (_bitshift64Ashr(($1534|0),($1535|0),($lp_quantization|0))|0);
   $1537 = tempRet0;
   $1538 = (($1536) + ($1533))|0;
   $1539 = (($data) + ($i$1248<<2)|0);
   HEAP32[$1539>>2] = $1538;
   $1540 = (($i$1248) + 1)|0;
   $exitcond80 = ($1540|0)==($data_len|0);
   if ($exitcond80) {
    break;
   } else {
    $i$1248 = $1540;
   }
  }
  return;
 }
 $33 = ($order>>>0)>(8);
 if ($33) {
  $34 = ($order>>>0)>(10);
  if ($34) {
   $35 = ($order|0)==(12);
   $36 = ($data_len|0)>(0);
   if ($35) {
    if (!($36)) {
     return;
    }
    $80 = ((($qlp_coeff)) + 44|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<(0);
    $83 = $82 << 31 >> 31;
    $84 = ((($qlp_coeff)) + 40|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)<(0);
    $87 = $86 << 31 >> 31;
    $88 = ((($qlp_coeff)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)<(0);
    $91 = $90 << 31 >> 31;
    $92 = ((($qlp_coeff)) + 32|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)<(0);
    $95 = $94 << 31 >> 31;
    $96 = ((($qlp_coeff)) + 28|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)<(0);
    $99 = $98 << 31 >> 31;
    $100 = ((($qlp_coeff)) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)<(0);
    $103 = $102 << 31 >> 31;
    $104 = ((($qlp_coeff)) + 20|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)<(0);
    $107 = $106 << 31 >> 31;
    $108 = ((($qlp_coeff)) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)<(0);
    $111 = $110 << 31 >> 31;
    $112 = ((($qlp_coeff)) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)<(0);
    $115 = $114 << 31 >> 31;
    $116 = ((($qlp_coeff)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)<(0);
    $119 = $118 << 31 >> 31;
    $120 = ((($qlp_coeff)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)<(0);
    $123 = $122 << 31 >> 31;
    $124 = HEAP32[$qlp_coeff>>2]|0;
    $125 = ($124|0)<(0);
    $126 = $125 << 31 >> 31;
    $i$025 = 0;
    while(1) {
     $127 = (($i$025) + -12)|0;
     $128 = (($data) + ($127<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)<(0);
     $131 = $130 << 31 >> 31;
     $132 = (___muldi3(($129|0),($131|0),($81|0),($83|0))|0);
     $133 = tempRet0;
     $134 = (($i$025) + -11)|0;
     $135 = (($data) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)<(0);
     $138 = $137 << 31 >> 31;
     $139 = (___muldi3(($136|0),($138|0),($85|0),($87|0))|0);
     $140 = tempRet0;
     $141 = (_i64Add(($139|0),($140|0),($132|0),($133|0))|0);
     $142 = tempRet0;
     $143 = (($i$025) + -10)|0;
     $144 = (($data) + ($143<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)<(0);
     $147 = $146 << 31 >> 31;
     $148 = (___muldi3(($145|0),($147|0),($89|0),($91|0))|0);
     $149 = tempRet0;
     $150 = (_i64Add(($141|0),($142|0),($148|0),($149|0))|0);
     $151 = tempRet0;
     $152 = (($i$025) + -9)|0;
     $153 = (($data) + ($152<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)<(0);
     $156 = $155 << 31 >> 31;
     $157 = (___muldi3(($154|0),($156|0),($93|0),($95|0))|0);
     $158 = tempRet0;
     $159 = (_i64Add(($150|0),($151|0),($157|0),($158|0))|0);
     $160 = tempRet0;
     $161 = (($i$025) + -8)|0;
     $162 = (($data) + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)<(0);
     $165 = $164 << 31 >> 31;
     $166 = (___muldi3(($163|0),($165|0),($97|0),($99|0))|0);
     $167 = tempRet0;
     $168 = (_i64Add(($159|0),($160|0),($166|0),($167|0))|0);
     $169 = tempRet0;
     $170 = (($i$025) + -7)|0;
     $171 = (($data) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = (___muldi3(($172|0),($174|0),($101|0),($103|0))|0);
     $176 = tempRet0;
     $177 = (_i64Add(($168|0),($169|0),($175|0),($176|0))|0);
     $178 = tempRet0;
     $179 = (($i$025) + -6)|0;
     $180 = (($data) + ($179<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($181|0)<(0);
     $183 = $182 << 31 >> 31;
     $184 = (___muldi3(($181|0),($183|0),($105|0),($107|0))|0);
     $185 = tempRet0;
     $186 = (_i64Add(($177|0),($178|0),($184|0),($185|0))|0);
     $187 = tempRet0;
     $188 = (($i$025) + -5)|0;
     $189 = (($data) + ($188<<2)|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($190|0)<(0);
     $192 = $191 << 31 >> 31;
     $193 = (___muldi3(($190|0),($192|0),($109|0),($111|0))|0);
     $194 = tempRet0;
     $195 = (_i64Add(($186|0),($187|0),($193|0),($194|0))|0);
     $196 = tempRet0;
     $197 = (($i$025) + -4)|0;
     $198 = (($data) + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = ($199|0)<(0);
     $201 = $200 << 31 >> 31;
     $202 = (___muldi3(($199|0),($201|0),($113|0),($115|0))|0);
     $203 = tempRet0;
     $204 = (_i64Add(($195|0),($196|0),($202|0),($203|0))|0);
     $205 = tempRet0;
     $206 = (($i$025) + -3)|0;
     $207 = (($data) + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)<(0);
     $210 = $209 << 31 >> 31;
     $211 = (___muldi3(($208|0),($210|0),($117|0),($119|0))|0);
     $212 = tempRet0;
     $213 = (_i64Add(($204|0),($205|0),($211|0),($212|0))|0);
     $214 = tempRet0;
     $215 = (($i$025) + -2)|0;
     $216 = (($data) + ($215<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)<(0);
     $219 = $218 << 31 >> 31;
     $220 = (___muldi3(($217|0),($219|0),($121|0),($123|0))|0);
     $221 = tempRet0;
     $222 = (_i64Add(($213|0),($214|0),($220|0),($221|0))|0);
     $223 = tempRet0;
     $224 = (($i$025) + -1)|0;
     $225 = (($data) + ($224<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = ($226|0)<(0);
     $228 = $227 << 31 >> 31;
     $229 = (___muldi3(($226|0),($228|0),($124|0),($126|0))|0);
     $230 = tempRet0;
     $231 = (_i64Add(($222|0),($223|0),($229|0),($230|0))|0);
     $232 = tempRet0;
     $233 = (($residual) + ($i$025<<2)|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = (_bitshift64Ashr(($231|0),($232|0),($lp_quantization|0))|0);
     $236 = tempRet0;
     $237 = (($235) + ($234))|0;
     $238 = (($data) + ($i$025<<2)|0);
     HEAP32[$238>>2] = $237;
     $239 = (($i$025) + 1)|0;
     $exitcond = ($239|0)==($data_len|0);
     if ($exitcond) {
      break;
     } else {
      $i$025 = $239;
     }
    }
    return;
   } else {
    if (!($36)) {
     return;
    }
    $37 = ((($qlp_coeff)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)<(0);
    $40 = $39 << 31 >> 31;
    $41 = ((($qlp_coeff)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)<(0);
    $44 = $43 << 31 >> 31;
    $45 = ((($qlp_coeff)) + 32|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<(0);
    $48 = $47 << 31 >> 31;
    $49 = ((($qlp_coeff)) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)<(0);
    $52 = $51 << 31 >> 31;
    $53 = ((($qlp_coeff)) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)<(0);
    $56 = $55 << 31 >> 31;
    $57 = ((($qlp_coeff)) + 20|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = ((($qlp_coeff)) + 16|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = ((($qlp_coeff)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($qlp_coeff)) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)<(0);
    $72 = $71 << 31 >> 31;
    $73 = ((($qlp_coeff)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)<(0);
    $76 = $75 << 31 >> 31;
    $77 = HEAP32[$qlp_coeff>>2]|0;
    $78 = ($77|0)<(0);
    $79 = $78 << 31 >> 31;
    $i$126 = 0;
    while(1) {
     $240 = (($i$126) + -11)|0;
     $241 = (($data) + ($240<<2)|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = ($242|0)<(0);
     $244 = $243 << 31 >> 31;
     $245 = (___muldi3(($242|0),($244|0),($38|0),($40|0))|0);
     $246 = tempRet0;
     $247 = (($i$126) + -10)|0;
     $248 = (($data) + ($247<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)<(0);
     $251 = $250 << 31 >> 31;
     $252 = (___muldi3(($249|0),($251|0),($42|0),($44|0))|0);
     $253 = tempRet0;
     $254 = (_i64Add(($252|0),($253|0),($245|0),($246|0))|0);
     $255 = tempRet0;
     $256 = (($i$126) + -9)|0;
     $257 = (($data) + ($256<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)<(0);
     $260 = $259 << 31 >> 31;
     $261 = (___muldi3(($258|0),($260|0),($46|0),($48|0))|0);
     $262 = tempRet0;
     $263 = (_i64Add(($254|0),($255|0),($261|0),($262|0))|0);
     $264 = tempRet0;
     $265 = (($i$126) + -8)|0;
     $266 = (($data) + ($265<<2)|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)<(0);
     $269 = $268 << 31 >> 31;
     $270 = (___muldi3(($267|0),($269|0),($50|0),($52|0))|0);
     $271 = tempRet0;
     $272 = (_i64Add(($263|0),($264|0),($270|0),($271|0))|0);
     $273 = tempRet0;
     $274 = (($i$126) + -7)|0;
     $275 = (($data) + ($274<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)<(0);
     $278 = $277 << 31 >> 31;
     $279 = (___muldi3(($276|0),($278|0),($54|0),($56|0))|0);
     $280 = tempRet0;
     $281 = (_i64Add(($272|0),($273|0),($279|0),($280|0))|0);
     $282 = tempRet0;
     $283 = (($i$126) + -6)|0;
     $284 = (($data) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285|0)<(0);
     $287 = $286 << 31 >> 31;
     $288 = (___muldi3(($285|0),($287|0),($58|0),($60|0))|0);
     $289 = tempRet0;
     $290 = (_i64Add(($281|0),($282|0),($288|0),($289|0))|0);
     $291 = tempRet0;
     $292 = (($i$126) + -5)|0;
     $293 = (($data) + ($292<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = ($294|0)<(0);
     $296 = $295 << 31 >> 31;
     $297 = (___muldi3(($294|0),($296|0),($62|0),($64|0))|0);
     $298 = tempRet0;
     $299 = (_i64Add(($290|0),($291|0),($297|0),($298|0))|0);
     $300 = tempRet0;
     $301 = (($i$126) + -4)|0;
     $302 = (($data) + ($301<<2)|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = ($303|0)<(0);
     $305 = $304 << 31 >> 31;
     $306 = (___muldi3(($303|0),($305|0),($66|0),($68|0))|0);
     $307 = tempRet0;
     $308 = (_i64Add(($299|0),($300|0),($306|0),($307|0))|0);
     $309 = tempRet0;
     $310 = (($i$126) + -3)|0;
     $311 = (($data) + ($310<<2)|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = ($312|0)<(0);
     $314 = $313 << 31 >> 31;
     $315 = (___muldi3(($312|0),($314|0),($70|0),($72|0))|0);
     $316 = tempRet0;
     $317 = (_i64Add(($308|0),($309|0),($315|0),($316|0))|0);
     $318 = tempRet0;
     $319 = (($i$126) + -2)|0;
     $320 = (($data) + ($319<<2)|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ($321|0)<(0);
     $323 = $322 << 31 >> 31;
     $324 = (___muldi3(($321|0),($323|0),($74|0),($76|0))|0);
     $325 = tempRet0;
     $326 = (_i64Add(($317|0),($318|0),($324|0),($325|0))|0);
     $327 = tempRet0;
     $328 = (($i$126) + -1)|0;
     $329 = (($data) + ($328<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = ($330|0)<(0);
     $332 = $331 << 31 >> 31;
     $333 = (___muldi3(($330|0),($332|0),($77|0),($79|0))|0);
     $334 = tempRet0;
     $335 = (_i64Add(($326|0),($327|0),($333|0),($334|0))|0);
     $336 = tempRet0;
     $337 = (($residual) + ($i$126<<2)|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (_bitshift64Ashr(($335|0),($336|0),($lp_quantization|0))|0);
     $340 = tempRet0;
     $341 = (($339) + ($338))|0;
     $342 = (($data) + ($i$126<<2)|0);
     HEAP32[$342>>2] = $341;
     $343 = (($i$126) + 1)|0;
     $exitcond69 = ($343|0)==($data_len|0);
     if ($exitcond69) {
      break;
     } else {
      $i$126 = $343;
     }
    }
    return;
   }
  } else {
   $344 = ($order|0)==(10);
   $345 = ($data_len|0)>(0);
   if ($344) {
    if (!($345)) {
     return;
    }
    $381 = ((($qlp_coeff)) + 36|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = ($382|0)<(0);
    $384 = $383 << 31 >> 31;
    $385 = ((($qlp_coeff)) + 32|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ($386|0)<(0);
    $388 = $387 << 31 >> 31;
    $389 = ((($qlp_coeff)) + 28|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = ($390|0)<(0);
    $392 = $391 << 31 >> 31;
    $393 = ((($qlp_coeff)) + 24|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)<(0);
    $396 = $395 << 31 >> 31;
    $397 = ((($qlp_coeff)) + 20|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = ($398|0)<(0);
    $400 = $399 << 31 >> 31;
    $401 = ((($qlp_coeff)) + 16|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = ($402|0)<(0);
    $404 = $403 << 31 >> 31;
    $405 = ((($qlp_coeff)) + 12|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = ($406|0)<(0);
    $408 = $407 << 31 >> 31;
    $409 = ((($qlp_coeff)) + 8|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = ($410|0)<(0);
    $412 = $411 << 31 >> 31;
    $413 = ((($qlp_coeff)) + 4|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = ($414|0)<(0);
    $416 = $415 << 31 >> 31;
    $417 = HEAP32[$qlp_coeff>>2]|0;
    $418 = ($417|0)<(0);
    $419 = $418 << 31 >> 31;
    $i$228 = 0;
    while(1) {
     $420 = (($i$228) + -10)|0;
     $421 = (($data) + ($420<<2)|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($422|0)<(0);
     $424 = $423 << 31 >> 31;
     $425 = (___muldi3(($422|0),($424|0),($382|0),($384|0))|0);
     $426 = tempRet0;
     $427 = (($i$228) + -9)|0;
     $428 = (($data) + ($427<<2)|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = ($429|0)<(0);
     $431 = $430 << 31 >> 31;
     $432 = (___muldi3(($429|0),($431|0),($386|0),($388|0))|0);
     $433 = tempRet0;
     $434 = (_i64Add(($432|0),($433|0),($425|0),($426|0))|0);
     $435 = tempRet0;
     $436 = (($i$228) + -8)|0;
     $437 = (($data) + ($436<<2)|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ($438|0)<(0);
     $440 = $439 << 31 >> 31;
     $441 = (___muldi3(($438|0),($440|0),($390|0),($392|0))|0);
     $442 = tempRet0;
     $443 = (_i64Add(($434|0),($435|0),($441|0),($442|0))|0);
     $444 = tempRet0;
     $445 = (($i$228) + -7)|0;
     $446 = (($data) + ($445<<2)|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = ($447|0)<(0);
     $449 = $448 << 31 >> 31;
     $450 = (___muldi3(($447|0),($449|0),($394|0),($396|0))|0);
     $451 = tempRet0;
     $452 = (_i64Add(($443|0),($444|0),($450|0),($451|0))|0);
     $453 = tempRet0;
     $454 = (($i$228) + -6)|0;
     $455 = (($data) + ($454<<2)|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ($456|0)<(0);
     $458 = $457 << 31 >> 31;
     $459 = (___muldi3(($456|0),($458|0),($398|0),($400|0))|0);
     $460 = tempRet0;
     $461 = (_i64Add(($452|0),($453|0),($459|0),($460|0))|0);
     $462 = tempRet0;
     $463 = (($i$228) + -5)|0;
     $464 = (($data) + ($463<<2)|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = ($465|0)<(0);
     $467 = $466 << 31 >> 31;
     $468 = (___muldi3(($465|0),($467|0),($402|0),($404|0))|0);
     $469 = tempRet0;
     $470 = (_i64Add(($461|0),($462|0),($468|0),($469|0))|0);
     $471 = tempRet0;
     $472 = (($i$228) + -4)|0;
     $473 = (($data) + ($472<<2)|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = ($474|0)<(0);
     $476 = $475 << 31 >> 31;
     $477 = (___muldi3(($474|0),($476|0),($406|0),($408|0))|0);
     $478 = tempRet0;
     $479 = (_i64Add(($470|0),($471|0),($477|0),($478|0))|0);
     $480 = tempRet0;
     $481 = (($i$228) + -3)|0;
     $482 = (($data) + ($481<<2)|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = ($483|0)<(0);
     $485 = $484 << 31 >> 31;
     $486 = (___muldi3(($483|0),($485|0),($410|0),($412|0))|0);
     $487 = tempRet0;
     $488 = (_i64Add(($479|0),($480|0),($486|0),($487|0))|0);
     $489 = tempRet0;
     $490 = (($i$228) + -2)|0;
     $491 = (($data) + ($490<<2)|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ($492|0)<(0);
     $494 = $493 << 31 >> 31;
     $495 = (___muldi3(($492|0),($494|0),($414|0),($416|0))|0);
     $496 = tempRet0;
     $497 = (_i64Add(($488|0),($489|0),($495|0),($496|0))|0);
     $498 = tempRet0;
     $499 = (($i$228) + -1)|0;
     $500 = (($data) + ($499<<2)|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = ($501|0)<(0);
     $503 = $502 << 31 >> 31;
     $504 = (___muldi3(($501|0),($503|0),($417|0),($419|0))|0);
     $505 = tempRet0;
     $506 = (_i64Add(($497|0),($498|0),($504|0),($505|0))|0);
     $507 = tempRet0;
     $508 = (($residual) + ($i$228<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = (_bitshift64Ashr(($506|0),($507|0),($lp_quantization|0))|0);
     $511 = tempRet0;
     $512 = (($510) + ($509))|0;
     $513 = (($data) + ($i$228<<2)|0);
     HEAP32[$513>>2] = $512;
     $514 = (($i$228) + 1)|0;
     $exitcond70 = ($514|0)==($data_len|0);
     if ($exitcond70) {
      break;
     } else {
      $i$228 = $514;
     }
    }
    return;
   } else {
    if (!($345)) {
     return;
    }
    $346 = ((($qlp_coeff)) + 32|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($347|0)<(0);
    $349 = $348 << 31 >> 31;
    $350 = ((($qlp_coeff)) + 28|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = ($351|0)<(0);
    $353 = $352 << 31 >> 31;
    $354 = ((($qlp_coeff)) + 24|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ($355|0)<(0);
    $357 = $356 << 31 >> 31;
    $358 = ((($qlp_coeff)) + 20|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ($359|0)<(0);
    $361 = $360 << 31 >> 31;
    $362 = ((($qlp_coeff)) + 16|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ($363|0)<(0);
    $365 = $364 << 31 >> 31;
    $366 = ((($qlp_coeff)) + 12|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = ($367|0)<(0);
    $369 = $368 << 31 >> 31;
    $370 = ((($qlp_coeff)) + 8|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ($371|0)<(0);
    $373 = $372 << 31 >> 31;
    $374 = ((($qlp_coeff)) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)<(0);
    $377 = $376 << 31 >> 31;
    $378 = HEAP32[$qlp_coeff>>2]|0;
    $379 = ($378|0)<(0);
    $380 = $379 << 31 >> 31;
    $i$330 = 0;
    while(1) {
     $515 = (($i$330) + -9)|0;
     $516 = (($data) + ($515<<2)|0);
     $517 = HEAP32[$516>>2]|0;
     $518 = ($517|0)<(0);
     $519 = $518 << 31 >> 31;
     $520 = (___muldi3(($517|0),($519|0),($347|0),($349|0))|0);
     $521 = tempRet0;
     $522 = (($i$330) + -8)|0;
     $523 = (($data) + ($522<<2)|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = ($524|0)<(0);
     $526 = $525 << 31 >> 31;
     $527 = (___muldi3(($524|0),($526|0),($351|0),($353|0))|0);
     $528 = tempRet0;
     $529 = (_i64Add(($527|0),($528|0),($520|0),($521|0))|0);
     $530 = tempRet0;
     $531 = (($i$330) + -7)|0;
     $532 = (($data) + ($531<<2)|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = ($533|0)<(0);
     $535 = $534 << 31 >> 31;
     $536 = (___muldi3(($533|0),($535|0),($355|0),($357|0))|0);
     $537 = tempRet0;
     $538 = (_i64Add(($529|0),($530|0),($536|0),($537|0))|0);
     $539 = tempRet0;
     $540 = (($i$330) + -6)|0;
     $541 = (($data) + ($540<<2)|0);
     $542 = HEAP32[$541>>2]|0;
     $543 = ($542|0)<(0);
     $544 = $543 << 31 >> 31;
     $545 = (___muldi3(($542|0),($544|0),($359|0),($361|0))|0);
     $546 = tempRet0;
     $547 = (_i64Add(($538|0),($539|0),($545|0),($546|0))|0);
     $548 = tempRet0;
     $549 = (($i$330) + -5)|0;
     $550 = (($data) + ($549<<2)|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = ($551|0)<(0);
     $553 = $552 << 31 >> 31;
     $554 = (___muldi3(($551|0),($553|0),($363|0),($365|0))|0);
     $555 = tempRet0;
     $556 = (_i64Add(($547|0),($548|0),($554|0),($555|0))|0);
     $557 = tempRet0;
     $558 = (($i$330) + -4)|0;
     $559 = (($data) + ($558<<2)|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = ($560|0)<(0);
     $562 = $561 << 31 >> 31;
     $563 = (___muldi3(($560|0),($562|0),($367|0),($369|0))|0);
     $564 = tempRet0;
     $565 = (_i64Add(($556|0),($557|0),($563|0),($564|0))|0);
     $566 = tempRet0;
     $567 = (($i$330) + -3)|0;
     $568 = (($data) + ($567<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = ($569|0)<(0);
     $571 = $570 << 31 >> 31;
     $572 = (___muldi3(($569|0),($571|0),($371|0),($373|0))|0);
     $573 = tempRet0;
     $574 = (_i64Add(($565|0),($566|0),($572|0),($573|0))|0);
     $575 = tempRet0;
     $576 = (($i$330) + -2)|0;
     $577 = (($data) + ($576<<2)|0);
     $578 = HEAP32[$577>>2]|0;
     $579 = ($578|0)<(0);
     $580 = $579 << 31 >> 31;
     $581 = (___muldi3(($578|0),($580|0),($375|0),($377|0))|0);
     $582 = tempRet0;
     $583 = (_i64Add(($574|0),($575|0),($581|0),($582|0))|0);
     $584 = tempRet0;
     $585 = (($i$330) + -1)|0;
     $586 = (($data) + ($585<<2)|0);
     $587 = HEAP32[$586>>2]|0;
     $588 = ($587|0)<(0);
     $589 = $588 << 31 >> 31;
     $590 = (___muldi3(($587|0),($589|0),($378|0),($380|0))|0);
     $591 = tempRet0;
     $592 = (_i64Add(($583|0),($584|0),($590|0),($591|0))|0);
     $593 = tempRet0;
     $594 = (($residual) + ($i$330<<2)|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = (_bitshift64Ashr(($592|0),($593|0),($lp_quantization|0))|0);
     $597 = tempRet0;
     $598 = (($596) + ($595))|0;
     $599 = (($data) + ($i$330<<2)|0);
     HEAP32[$599>>2] = $598;
     $600 = (($i$330) + 1)|0;
     $exitcond71 = ($600|0)==($data_len|0);
     if ($exitcond71) {
      break;
     } else {
      $i$330 = $600;
     }
    }
    return;
   }
  }
 }
 $601 = ($order>>>0)>(4);
 if ($601) {
  $602 = ($order>>>0)>(6);
  if ($602) {
   $603 = ($order|0)==(8);
   $604 = ($data_len|0)>(0);
   if ($603) {
    if (!($604)) {
     return;
    }
    $632 = ((($qlp_coeff)) + 28|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = ($633|0)<(0);
    $635 = $634 << 31 >> 31;
    $636 = ((($qlp_coeff)) + 24|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = ($637|0)<(0);
    $639 = $638 << 31 >> 31;
    $640 = ((($qlp_coeff)) + 20|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = ($641|0)<(0);
    $643 = $642 << 31 >> 31;
    $644 = ((($qlp_coeff)) + 16|0);
    $645 = HEAP32[$644>>2]|0;
    $646 = ($645|0)<(0);
    $647 = $646 << 31 >> 31;
    $648 = ((($qlp_coeff)) + 12|0);
    $649 = HEAP32[$648>>2]|0;
    $650 = ($649|0)<(0);
    $651 = $650 << 31 >> 31;
    $652 = ((($qlp_coeff)) + 8|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = ($653|0)<(0);
    $655 = $654 << 31 >> 31;
    $656 = ((($qlp_coeff)) + 4|0);
    $657 = HEAP32[$656>>2]|0;
    $658 = ($657|0)<(0);
    $659 = $658 << 31 >> 31;
    $660 = HEAP32[$qlp_coeff>>2]|0;
    $661 = ($660|0)<(0);
    $662 = $661 << 31 >> 31;
    $i$432 = 0;
    while(1) {
     $663 = (($i$432) + -8)|0;
     $664 = (($data) + ($663<<2)|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = ($665|0)<(0);
     $667 = $666 << 31 >> 31;
     $668 = (___muldi3(($665|0),($667|0),($633|0),($635|0))|0);
     $669 = tempRet0;
     $670 = (($i$432) + -7)|0;
     $671 = (($data) + ($670<<2)|0);
     $672 = HEAP32[$671>>2]|0;
     $673 = ($672|0)<(0);
     $674 = $673 << 31 >> 31;
     $675 = (___muldi3(($672|0),($674|0),($637|0),($639|0))|0);
     $676 = tempRet0;
     $677 = (_i64Add(($675|0),($676|0),($668|0),($669|0))|0);
     $678 = tempRet0;
     $679 = (($i$432) + -6)|0;
     $680 = (($data) + ($679<<2)|0);
     $681 = HEAP32[$680>>2]|0;
     $682 = ($681|0)<(0);
     $683 = $682 << 31 >> 31;
     $684 = (___muldi3(($681|0),($683|0),($641|0),($643|0))|0);
     $685 = tempRet0;
     $686 = (_i64Add(($677|0),($678|0),($684|0),($685|0))|0);
     $687 = tempRet0;
     $688 = (($i$432) + -5)|0;
     $689 = (($data) + ($688<<2)|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)<(0);
     $692 = $691 << 31 >> 31;
     $693 = (___muldi3(($690|0),($692|0),($645|0),($647|0))|0);
     $694 = tempRet0;
     $695 = (_i64Add(($686|0),($687|0),($693|0),($694|0))|0);
     $696 = tempRet0;
     $697 = (($i$432) + -4)|0;
     $698 = (($data) + ($697<<2)|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = ($699|0)<(0);
     $701 = $700 << 31 >> 31;
     $702 = (___muldi3(($699|0),($701|0),($649|0),($651|0))|0);
     $703 = tempRet0;
     $704 = (_i64Add(($695|0),($696|0),($702|0),($703|0))|0);
     $705 = tempRet0;
     $706 = (($i$432) + -3)|0;
     $707 = (($data) + ($706<<2)|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = ($708|0)<(0);
     $710 = $709 << 31 >> 31;
     $711 = (___muldi3(($708|0),($710|0),($653|0),($655|0))|0);
     $712 = tempRet0;
     $713 = (_i64Add(($704|0),($705|0),($711|0),($712|0))|0);
     $714 = tempRet0;
     $715 = (($i$432) + -2)|0;
     $716 = (($data) + ($715<<2)|0);
     $717 = HEAP32[$716>>2]|0;
     $718 = ($717|0)<(0);
     $719 = $718 << 31 >> 31;
     $720 = (___muldi3(($717|0),($719|0),($657|0),($659|0))|0);
     $721 = tempRet0;
     $722 = (_i64Add(($713|0),($714|0),($720|0),($721|0))|0);
     $723 = tempRet0;
     $724 = (($i$432) + -1)|0;
     $725 = (($data) + ($724<<2)|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)<(0);
     $728 = $727 << 31 >> 31;
     $729 = (___muldi3(($726|0),($728|0),($660|0),($662|0))|0);
     $730 = tempRet0;
     $731 = (_i64Add(($722|0),($723|0),($729|0),($730|0))|0);
     $732 = tempRet0;
     $733 = (($residual) + ($i$432<<2)|0);
     $734 = HEAP32[$733>>2]|0;
     $735 = (_bitshift64Ashr(($731|0),($732|0),($lp_quantization|0))|0);
     $736 = tempRet0;
     $737 = (($735) + ($734))|0;
     $738 = (($data) + ($i$432<<2)|0);
     HEAP32[$738>>2] = $737;
     $739 = (($i$432) + 1)|0;
     $exitcond72 = ($739|0)==($data_len|0);
     if ($exitcond72) {
      break;
     } else {
      $i$432 = $739;
     }
    }
    return;
   } else {
    if (!($604)) {
     return;
    }
    $605 = ((($qlp_coeff)) + 24|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = ($606|0)<(0);
    $608 = $607 << 31 >> 31;
    $609 = ((($qlp_coeff)) + 20|0);
    $610 = HEAP32[$609>>2]|0;
    $611 = ($610|0)<(0);
    $612 = $611 << 31 >> 31;
    $613 = ((($qlp_coeff)) + 16|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = ($614|0)<(0);
    $616 = $615 << 31 >> 31;
    $617 = ((($qlp_coeff)) + 12|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = ($618|0)<(0);
    $620 = $619 << 31 >> 31;
    $621 = ((($qlp_coeff)) + 8|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = ($622|0)<(0);
    $624 = $623 << 31 >> 31;
    $625 = ((($qlp_coeff)) + 4|0);
    $626 = HEAP32[$625>>2]|0;
    $627 = ($626|0)<(0);
    $628 = $627 << 31 >> 31;
    $629 = HEAP32[$qlp_coeff>>2]|0;
    $630 = ($629|0)<(0);
    $631 = $630 << 31 >> 31;
    $i$534 = 0;
    while(1) {
     $740 = (($i$534) + -7)|0;
     $741 = (($data) + ($740<<2)|0);
     $742 = HEAP32[$741>>2]|0;
     $743 = ($742|0)<(0);
     $744 = $743 << 31 >> 31;
     $745 = (___muldi3(($742|0),($744|0),($606|0),($608|0))|0);
     $746 = tempRet0;
     $747 = (($i$534) + -6)|0;
     $748 = (($data) + ($747<<2)|0);
     $749 = HEAP32[$748>>2]|0;
     $750 = ($749|0)<(0);
     $751 = $750 << 31 >> 31;
     $752 = (___muldi3(($749|0),($751|0),($610|0),($612|0))|0);
     $753 = tempRet0;
     $754 = (_i64Add(($752|0),($753|0),($745|0),($746|0))|0);
     $755 = tempRet0;
     $756 = (($i$534) + -5)|0;
     $757 = (($data) + ($756<<2)|0);
     $758 = HEAP32[$757>>2]|0;
     $759 = ($758|0)<(0);
     $760 = $759 << 31 >> 31;
     $761 = (___muldi3(($758|0),($760|0),($614|0),($616|0))|0);
     $762 = tempRet0;
     $763 = (_i64Add(($754|0),($755|0),($761|0),($762|0))|0);
     $764 = tempRet0;
     $765 = (($i$534) + -4)|0;
     $766 = (($data) + ($765<<2)|0);
     $767 = HEAP32[$766>>2]|0;
     $768 = ($767|0)<(0);
     $769 = $768 << 31 >> 31;
     $770 = (___muldi3(($767|0),($769|0),($618|0),($620|0))|0);
     $771 = tempRet0;
     $772 = (_i64Add(($763|0),($764|0),($770|0),($771|0))|0);
     $773 = tempRet0;
     $774 = (($i$534) + -3)|0;
     $775 = (($data) + ($774<<2)|0);
     $776 = HEAP32[$775>>2]|0;
     $777 = ($776|0)<(0);
     $778 = $777 << 31 >> 31;
     $779 = (___muldi3(($776|0),($778|0),($622|0),($624|0))|0);
     $780 = tempRet0;
     $781 = (_i64Add(($772|0),($773|0),($779|0),($780|0))|0);
     $782 = tempRet0;
     $783 = (($i$534) + -2)|0;
     $784 = (($data) + ($783<<2)|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = ($785|0)<(0);
     $787 = $786 << 31 >> 31;
     $788 = (___muldi3(($785|0),($787|0),($626|0),($628|0))|0);
     $789 = tempRet0;
     $790 = (_i64Add(($781|0),($782|0),($788|0),($789|0))|0);
     $791 = tempRet0;
     $792 = (($i$534) + -1)|0;
     $793 = (($data) + ($792<<2)|0);
     $794 = HEAP32[$793>>2]|0;
     $795 = ($794|0)<(0);
     $796 = $795 << 31 >> 31;
     $797 = (___muldi3(($794|0),($796|0),($629|0),($631|0))|0);
     $798 = tempRet0;
     $799 = (_i64Add(($790|0),($791|0),($797|0),($798|0))|0);
     $800 = tempRet0;
     $801 = (($residual) + ($i$534<<2)|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = (_bitshift64Ashr(($799|0),($800|0),($lp_quantization|0))|0);
     $804 = tempRet0;
     $805 = (($803) + ($802))|0;
     $806 = (($data) + ($i$534<<2)|0);
     HEAP32[$806>>2] = $805;
     $807 = (($i$534) + 1)|0;
     $exitcond73 = ($807|0)==($data_len|0);
     if ($exitcond73) {
      break;
     } else {
      $i$534 = $807;
     }
    }
    return;
   }
  } else {
   $808 = ($order|0)==(6);
   $809 = ($data_len|0)>(0);
   if ($808) {
    if (!($809)) {
     return;
    }
    $829 = ((($qlp_coeff)) + 20|0);
    $830 = HEAP32[$829>>2]|0;
    $831 = ($830|0)<(0);
    $832 = $831 << 31 >> 31;
    $833 = ((($qlp_coeff)) + 16|0);
    $834 = HEAP32[$833>>2]|0;
    $835 = ($834|0)<(0);
    $836 = $835 << 31 >> 31;
    $837 = ((($qlp_coeff)) + 12|0);
    $838 = HEAP32[$837>>2]|0;
    $839 = ($838|0)<(0);
    $840 = $839 << 31 >> 31;
    $841 = ((($qlp_coeff)) + 8|0);
    $842 = HEAP32[$841>>2]|0;
    $843 = ($842|0)<(0);
    $844 = $843 << 31 >> 31;
    $845 = ((($qlp_coeff)) + 4|0);
    $846 = HEAP32[$845>>2]|0;
    $847 = ($846|0)<(0);
    $848 = $847 << 31 >> 31;
    $849 = HEAP32[$qlp_coeff>>2]|0;
    $850 = ($849|0)<(0);
    $851 = $850 << 31 >> 31;
    $i$636 = 0;
    while(1) {
     $852 = (($i$636) + -6)|0;
     $853 = (($data) + ($852<<2)|0);
     $854 = HEAP32[$853>>2]|0;
     $855 = ($854|0)<(0);
     $856 = $855 << 31 >> 31;
     $857 = (___muldi3(($854|0),($856|0),($830|0),($832|0))|0);
     $858 = tempRet0;
     $859 = (($i$636) + -5)|0;
     $860 = (($data) + ($859<<2)|0);
     $861 = HEAP32[$860>>2]|0;
     $862 = ($861|0)<(0);
     $863 = $862 << 31 >> 31;
     $864 = (___muldi3(($861|0),($863|0),($834|0),($836|0))|0);
     $865 = tempRet0;
     $866 = (_i64Add(($864|0),($865|0),($857|0),($858|0))|0);
     $867 = tempRet0;
     $868 = (($i$636) + -4)|0;
     $869 = (($data) + ($868<<2)|0);
     $870 = HEAP32[$869>>2]|0;
     $871 = ($870|0)<(0);
     $872 = $871 << 31 >> 31;
     $873 = (___muldi3(($870|0),($872|0),($838|0),($840|0))|0);
     $874 = tempRet0;
     $875 = (_i64Add(($866|0),($867|0),($873|0),($874|0))|0);
     $876 = tempRet0;
     $877 = (($i$636) + -3)|0;
     $878 = (($data) + ($877<<2)|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = ($879|0)<(0);
     $881 = $880 << 31 >> 31;
     $882 = (___muldi3(($879|0),($881|0),($842|0),($844|0))|0);
     $883 = tempRet0;
     $884 = (_i64Add(($875|0),($876|0),($882|0),($883|0))|0);
     $885 = tempRet0;
     $886 = (($i$636) + -2)|0;
     $887 = (($data) + ($886<<2)|0);
     $888 = HEAP32[$887>>2]|0;
     $889 = ($888|0)<(0);
     $890 = $889 << 31 >> 31;
     $891 = (___muldi3(($888|0),($890|0),($846|0),($848|0))|0);
     $892 = tempRet0;
     $893 = (_i64Add(($884|0),($885|0),($891|0),($892|0))|0);
     $894 = tempRet0;
     $895 = (($i$636) + -1)|0;
     $896 = (($data) + ($895<<2)|0);
     $897 = HEAP32[$896>>2]|0;
     $898 = ($897|0)<(0);
     $899 = $898 << 31 >> 31;
     $900 = (___muldi3(($897|0),($899|0),($849|0),($851|0))|0);
     $901 = tempRet0;
     $902 = (_i64Add(($893|0),($894|0),($900|0),($901|0))|0);
     $903 = tempRet0;
     $904 = (($residual) + ($i$636<<2)|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = (_bitshift64Ashr(($902|0),($903|0),($lp_quantization|0))|0);
     $907 = tempRet0;
     $908 = (($906) + ($905))|0;
     $909 = (($data) + ($i$636<<2)|0);
     HEAP32[$909>>2] = $908;
     $910 = (($i$636) + 1)|0;
     $exitcond74 = ($910|0)==($data_len|0);
     if ($exitcond74) {
      break;
     } else {
      $i$636 = $910;
     }
    }
    return;
   } else {
    if (!($809)) {
     return;
    }
    $810 = ((($qlp_coeff)) + 16|0);
    $811 = HEAP32[$810>>2]|0;
    $812 = ($811|0)<(0);
    $813 = $812 << 31 >> 31;
    $814 = ((($qlp_coeff)) + 12|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = ($815|0)<(0);
    $817 = $816 << 31 >> 31;
    $818 = ((($qlp_coeff)) + 8|0);
    $819 = HEAP32[$818>>2]|0;
    $820 = ($819|0)<(0);
    $821 = $820 << 31 >> 31;
    $822 = ((($qlp_coeff)) + 4|0);
    $823 = HEAP32[$822>>2]|0;
    $824 = ($823|0)<(0);
    $825 = $824 << 31 >> 31;
    $826 = HEAP32[$qlp_coeff>>2]|0;
    $827 = ($826|0)<(0);
    $828 = $827 << 31 >> 31;
    $i$738 = 0;
    while(1) {
     $911 = (($i$738) + -5)|0;
     $912 = (($data) + ($911<<2)|0);
     $913 = HEAP32[$912>>2]|0;
     $914 = ($913|0)<(0);
     $915 = $914 << 31 >> 31;
     $916 = (___muldi3(($913|0),($915|0),($811|0),($813|0))|0);
     $917 = tempRet0;
     $918 = (($i$738) + -4)|0;
     $919 = (($data) + ($918<<2)|0);
     $920 = HEAP32[$919>>2]|0;
     $921 = ($920|0)<(0);
     $922 = $921 << 31 >> 31;
     $923 = (___muldi3(($920|0),($922|0),($815|0),($817|0))|0);
     $924 = tempRet0;
     $925 = (_i64Add(($923|0),($924|0),($916|0),($917|0))|0);
     $926 = tempRet0;
     $927 = (($i$738) + -3)|0;
     $928 = (($data) + ($927<<2)|0);
     $929 = HEAP32[$928>>2]|0;
     $930 = ($929|0)<(0);
     $931 = $930 << 31 >> 31;
     $932 = (___muldi3(($929|0),($931|0),($819|0),($821|0))|0);
     $933 = tempRet0;
     $934 = (_i64Add(($925|0),($926|0),($932|0),($933|0))|0);
     $935 = tempRet0;
     $936 = (($i$738) + -2)|0;
     $937 = (($data) + ($936<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = ($938|0)<(0);
     $940 = $939 << 31 >> 31;
     $941 = (___muldi3(($938|0),($940|0),($823|0),($825|0))|0);
     $942 = tempRet0;
     $943 = (_i64Add(($934|0),($935|0),($941|0),($942|0))|0);
     $944 = tempRet0;
     $945 = (($i$738) + -1)|0;
     $946 = (($data) + ($945<<2)|0);
     $947 = HEAP32[$946>>2]|0;
     $948 = ($947|0)<(0);
     $949 = $948 << 31 >> 31;
     $950 = (___muldi3(($947|0),($949|0),($826|0),($828|0))|0);
     $951 = tempRet0;
     $952 = (_i64Add(($943|0),($944|0),($950|0),($951|0))|0);
     $953 = tempRet0;
     $954 = (($residual) + ($i$738<<2)|0);
     $955 = HEAP32[$954>>2]|0;
     $956 = (_bitshift64Ashr(($952|0),($953|0),($lp_quantization|0))|0);
     $957 = tempRet0;
     $958 = (($956) + ($955))|0;
     $959 = (($data) + ($i$738<<2)|0);
     HEAP32[$959>>2] = $958;
     $960 = (($i$738) + 1)|0;
     $exitcond75 = ($960|0)==($data_len|0);
     if ($exitcond75) {
      break;
     } else {
      $i$738 = $960;
     }
    }
    return;
   }
  }
 } else {
  $961 = ($order>>>0)>(2);
  if ($961) {
   $962 = ($order|0)==(4);
   $963 = ($data_len|0)>(0);
   if ($962) {
    if (!($963)) {
     return;
    }
    $975 = ((($qlp_coeff)) + 12|0);
    $976 = HEAP32[$975>>2]|0;
    $977 = ($976|0)<(0);
    $978 = $977 << 31 >> 31;
    $979 = ((($qlp_coeff)) + 8|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = ($980|0)<(0);
    $982 = $981 << 31 >> 31;
    $983 = ((($qlp_coeff)) + 4|0);
    $984 = HEAP32[$983>>2]|0;
    $985 = ($984|0)<(0);
    $986 = $985 << 31 >> 31;
    $987 = HEAP32[$qlp_coeff>>2]|0;
    $988 = ($987|0)<(0);
    $989 = $988 << 31 >> 31;
    $i$840 = 0;
    while(1) {
     $990 = (($i$840) + -4)|0;
     $991 = (($data) + ($990<<2)|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = ($992|0)<(0);
     $994 = $993 << 31 >> 31;
     $995 = (___muldi3(($992|0),($994|0),($976|0),($978|0))|0);
     $996 = tempRet0;
     $997 = (($i$840) + -3)|0;
     $998 = (($data) + ($997<<2)|0);
     $999 = HEAP32[$998>>2]|0;
     $1000 = ($999|0)<(0);
     $1001 = $1000 << 31 >> 31;
     $1002 = (___muldi3(($999|0),($1001|0),($980|0),($982|0))|0);
     $1003 = tempRet0;
     $1004 = (_i64Add(($1002|0),($1003|0),($995|0),($996|0))|0);
     $1005 = tempRet0;
     $1006 = (($i$840) + -2)|0;
     $1007 = (($data) + ($1006<<2)|0);
     $1008 = HEAP32[$1007>>2]|0;
     $1009 = ($1008|0)<(0);
     $1010 = $1009 << 31 >> 31;
     $1011 = (___muldi3(($1008|0),($1010|0),($984|0),($986|0))|0);
     $1012 = tempRet0;
     $1013 = (_i64Add(($1004|0),($1005|0),($1011|0),($1012|0))|0);
     $1014 = tempRet0;
     $1015 = (($i$840) + -1)|0;
     $1016 = (($data) + ($1015<<2)|0);
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = ($1017|0)<(0);
     $1019 = $1018 << 31 >> 31;
     $1020 = (___muldi3(($1017|0),($1019|0),($987|0),($989|0))|0);
     $1021 = tempRet0;
     $1022 = (_i64Add(($1013|0),($1014|0),($1020|0),($1021|0))|0);
     $1023 = tempRet0;
     $1024 = (($residual) + ($i$840<<2)|0);
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = (_bitshift64Ashr(($1022|0),($1023|0),($lp_quantization|0))|0);
     $1027 = tempRet0;
     $1028 = (($1026) + ($1025))|0;
     $1029 = (($data) + ($i$840<<2)|0);
     HEAP32[$1029>>2] = $1028;
     $1030 = (($i$840) + 1)|0;
     $exitcond76 = ($1030|0)==($data_len|0);
     if ($exitcond76) {
      break;
     } else {
      $i$840 = $1030;
     }
    }
    return;
   } else {
    if (!($963)) {
     return;
    }
    $964 = ((($qlp_coeff)) + 8|0);
    $965 = HEAP32[$964>>2]|0;
    $966 = ($965|0)<(0);
    $967 = $966 << 31 >> 31;
    $968 = ((($qlp_coeff)) + 4|0);
    $969 = HEAP32[$968>>2]|0;
    $970 = ($969|0)<(0);
    $971 = $970 << 31 >> 31;
    $972 = HEAP32[$qlp_coeff>>2]|0;
    $973 = ($972|0)<(0);
    $974 = $973 << 31 >> 31;
    $i$942 = 0;
    while(1) {
     $1031 = (($i$942) + -3)|0;
     $1032 = (($data) + ($1031<<2)|0);
     $1033 = HEAP32[$1032>>2]|0;
     $1034 = ($1033|0)<(0);
     $1035 = $1034 << 31 >> 31;
     $1036 = (___muldi3(($1033|0),($1035|0),($965|0),($967|0))|0);
     $1037 = tempRet0;
     $1038 = (($i$942) + -2)|0;
     $1039 = (($data) + ($1038<<2)|0);
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = ($1040|0)<(0);
     $1042 = $1041 << 31 >> 31;
     $1043 = (___muldi3(($1040|0),($1042|0),($969|0),($971|0))|0);
     $1044 = tempRet0;
     $1045 = (_i64Add(($1043|0),($1044|0),($1036|0),($1037|0))|0);
     $1046 = tempRet0;
     $1047 = (($i$942) + -1)|0;
     $1048 = (($data) + ($1047<<2)|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = ($1049|0)<(0);
     $1051 = $1050 << 31 >> 31;
     $1052 = (___muldi3(($1049|0),($1051|0),($972|0),($974|0))|0);
     $1053 = tempRet0;
     $1054 = (_i64Add(($1045|0),($1046|0),($1052|0),($1053|0))|0);
     $1055 = tempRet0;
     $1056 = (($residual) + ($i$942<<2)|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = (_bitshift64Ashr(($1054|0),($1055|0),($lp_quantization|0))|0);
     $1059 = tempRet0;
     $1060 = (($1058) + ($1057))|0;
     $1061 = (($data) + ($i$942<<2)|0);
     HEAP32[$1061>>2] = $1060;
     $1062 = (($i$942) + 1)|0;
     $exitcond77 = ($1062|0)==($data_len|0);
     if ($exitcond77) {
      break;
     } else {
      $i$942 = $1062;
     }
    }
    return;
   }
  } else {
   $1063 = ($order|0)==(2);
   $1064 = ($data_len|0)>(0);
   if ($1063) {
    if (!($1064)) {
     return;
    }
    $1068 = ((($qlp_coeff)) + 4|0);
    $1069 = HEAP32[$1068>>2]|0;
    $1070 = ($1069|0)<(0);
    $1071 = $1070 << 31 >> 31;
    $1072 = HEAP32[$qlp_coeff>>2]|0;
    $1073 = ($1072|0)<(0);
    $1074 = $1073 << 31 >> 31;
    $i$1044 = 0;
    while(1) {
     $1075 = (($i$1044) + -2)|0;
     $1076 = (($data) + ($1075<<2)|0);
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = ($1077|0)<(0);
     $1079 = $1078 << 31 >> 31;
     $1080 = (___muldi3(($1077|0),($1079|0),($1069|0),($1071|0))|0);
     $1081 = tempRet0;
     $1082 = (($i$1044) + -1)|0;
     $1083 = (($data) + ($1082<<2)|0);
     $1084 = HEAP32[$1083>>2]|0;
     $1085 = ($1084|0)<(0);
     $1086 = $1085 << 31 >> 31;
     $1087 = (___muldi3(($1084|0),($1086|0),($1072|0),($1074|0))|0);
     $1088 = tempRet0;
     $1089 = (_i64Add(($1087|0),($1088|0),($1080|0),($1081|0))|0);
     $1090 = tempRet0;
     $1091 = (($residual) + ($i$1044<<2)|0);
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = (_bitshift64Ashr(($1089|0),($1090|0),($lp_quantization|0))|0);
     $1094 = tempRet0;
     $1095 = (($1093) + ($1092))|0;
     $1096 = (($data) + ($i$1044<<2)|0);
     HEAP32[$1096>>2] = $1095;
     $1097 = (($i$1044) + 1)|0;
     $exitcond78 = ($1097|0)==($data_len|0);
     if ($exitcond78) {
      break;
     } else {
      $i$1044 = $1097;
     }
    }
    return;
   } else {
    if (!($1064)) {
     return;
    }
    $1065 = HEAP32[$qlp_coeff>>2]|0;
    $1066 = ($1065|0)<(0);
    $1067 = $1066 << 31 >> 31;
    $i$1146 = 0;
    while(1) {
     $1098 = (($residual) + ($i$1146<<2)|0);
     $1099 = HEAP32[$1098>>2]|0;
     $1100 = (($i$1146) + -1)|0;
     $1101 = (($data) + ($1100<<2)|0);
     $1102 = HEAP32[$1101>>2]|0;
     $1103 = ($1102|0)<(0);
     $1104 = $1103 << 31 >> 31;
     $1105 = (___muldi3(($1102|0),($1104|0),($1065|0),($1067|0))|0);
     $1106 = tempRet0;
     $1107 = (_bitshift64Ashr(($1105|0),($1106|0),($lp_quantization|0))|0);
     $1108 = tempRet0;
     $1109 = (($1107) + ($1099))|0;
     $1110 = (($data) + ($i$1146<<2)|0);
     HEAP32[$1110>>2] = $1109;
     $1111 = (($i$1146) + 1)|0;
     $exitcond79 = ($1111|0)==($data_len|0);
     if ($exitcond79) {
      break;
     } else {
      $i$1146 = $1111;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample($lpc_error,$total_samples) {
 $lpc_error = +$lpc_error;
 $total_samples = $total_samples|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($total_samples>>>0));
 $1 = 0.5 / $0;
 $2 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($lpc_error,$1));
 return (+$2);
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($lpc_error,$error_scale) {
 $lpc_error = +$lpc_error;
 $error_scale = +$error_scale;
 var $$ = 0.0, $$0 = 0.0, $$1 = 0.0, $$inv = 0, $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lpc_error > 0.0;
 if ($0) {
  $1 = $lpc_error * $error_scale;
  $2 = (+Math_log((+$1)));
  $3 = $2 * 0.5;
  $4 = $3 / 0.69314718055994529;
  $$inv = $4 >= 0.0;
  $$ = $$inv ? $4 : 0.0;
  $$0 = $$;
  return (+$$0);
 } else {
  $5 = $lpc_error < 0.0;
  $$1 = $5 ? 1.0000000000000001E+32 : 0.0;
  $$0 = $$1;
  return (+$$0);
 }
 return +(0.0);
}
function _FLAC__lpc_compute_best_order($lpc_error,$max_order,$total_samples,$overhead_bits_per_order) {
 $lpc_error = $lpc_error|0;
 $max_order = $max_order|0;
 $total_samples = $total_samples|0;
 $overhead_bits_per_order = $overhead_bits_per_order|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $best_bits$03 = 0.0, $best_bits$1 = 0.0, $best_index$0$lcssa = 0, $best_index$01 = 0, $best_index$1 = 0;
 var $best_index$1$lcssa = 0, $exitcond = 0, $indx$02 = 0, $order$04 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($total_samples>>>0));
 $1 = 0.5 / $0;
 $2 = ($max_order|0)==(0);
 if ($2) {
  $best_index$0$lcssa = 1;
  return ($best_index$0$lcssa|0);
 } else {
  $best_bits$03 = 4294967295.0;$best_index$01 = 0;$indx$02 = 0;$order$04 = 1;
 }
 while(1) {
  $3 = (($lpc_error) + ($indx$02<<3)|0);
  $4 = +HEAPF64[$3>>3];
  $5 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($4,$1));
  $6 = (($total_samples) - ($order$04))|0;
  $7 = (+($6>>>0));
  $8 = $7 * $5;
  $9 = Math_imul($order$04, $overhead_bits_per_order)|0;
  $10 = (+($9>>>0));
  $11 = $10 + $8;
  $12 = $11 < $best_bits$03;
  $best_index$1 = $12 ? $indx$02 : $best_index$01;
  $best_bits$1 = $12 ? $11 : $best_bits$03;
  $13 = (($indx$02) + 1)|0;
  $14 = (($order$04) + 1)|0;
  $exitcond = ($13|0)==($max_order|0);
  if ($exitcond) {
   $best_index$1$lcssa = $best_index$1;
   break;
  } else {
   $best_bits$03 = $best_bits$1;$best_index$01 = $best_index$1;$indx$02 = $13;$order$04 = $14;
  }
 }
 $phitmp = (($best_index$1$lcssa) + 1)|0;
 $best_index$0$lcssa = $phitmp;
 return ($best_index$0$lcssa|0);
}
function _FLAC__MD5Init($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 64|0);
 HEAP32[$0>>2] = 1732584193;
 $1 = ((($ctx)) + 68|0);
 HEAP32[$1>>2] = -271733879;
 $2 = ((($ctx)) + 72|0);
 HEAP32[$2>>2] = -1732584194;
 $3 = ((($ctx)) + 76|0);
 HEAP32[$3>>2] = 271733878;
 $4 = ((($ctx)) + 80|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 return;
}
function _FLAC__MD5Final($digest,$ctx) {
 $digest = $digest|0;
 $ctx = $ctx|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $p$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 $3 = (($ctx) + ($2)|0);
 $$sum = (($2) + 1)|0;
 $4 = (($ctx) + ($$sum)|0);
 HEAP8[$3>>0] = -128;
 $5 = (55 - ($2))|0;
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = (($5) + 8)|0;
  _memset(($4|0),0,($7|0))|0;
  $8 = ((($ctx)) + 64|0);
  _FLAC__MD5Transform($8,$ctx);
  $count$0 = 56;$p$0 = $ctx;
 } else {
  $count$0 = $5;$p$0 = $4;
 }
 _memset(($p$0|0),0,($count$0|0))|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 << 3;
 $11 = ((($ctx)) + 56|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($ctx)) + 84|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 3;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 >>> 29;
 $17 = $16 | $14;
 $18 = ((($ctx)) + 60|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($ctx)) + 64|0);
 _FLAC__MD5Transform($19,$ctx);
 dest=$digest; src=$19; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $20 = ((($ctx)) + 88|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  dest=$ctx; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  return;
 }
 _free($21);
 HEAP32[$20>>2] = 0;
 $23 = ((($ctx)) + 92|0);
 HEAP32[$23>>2] = 0;
 dest=$ctx; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _FLAC__MD5Accumulate($ctx,$signal,$channels,$samples,$bytes_per_sample) {
 $ctx = $ctx|0;
 $signal = $signal|0;
 $channels = $channels|0;
 $samples = $samples|0;
 $bytes_per_sample = $bytes_per_sample|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($samples, $channels)|0;
 $1 = Math_imul($0, $bytes_per_sample)|0;
 $2 = (4294967295 / ($bytes_per_sample>>>0))&-1;
 $3 = ($2>>>0)<($channels>>>0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = Math_imul($bytes_per_sample, $channels)|0;
 $5 = (4294967295 / ($samples>>>0))&-1;
 $6 = ($4>>>0)>($5>>>0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($ctx)) + 92|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<($1>>>0);
 if ($9) {
  $10 = ((($ctx)) + 88|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_safe_realloc_24($11,$1)|0);
  HEAP32[$10>>2] = $12;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $14 = (_safe_malloc_($1)|0);
   HEAP32[$10>>2] = $14;
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$7>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   }
  }
  HEAP32[$7>>2] = $1;
 }
 $16 = ((($ctx)) + 88|0);
 _format_input_($16,$signal,$channels,$samples,$bytes_per_sample);
 $17 = HEAP32[$16>>2]|0;
 _FLAC__MD5Update($ctx,$17,$1);
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__MD5Transform($buf,$in) {
 $buf = $buf|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$buf>>2]|0;
 $1 = ((($buf)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($buf)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($buf)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 ^ $4;
 $8 = $7 & $2;
 $9 = $8 ^ $6;
 $10 = HEAP32[$in>>2]|0;
 $11 = (($0) + -680876936)|0;
 $12 = (($11) + ($10))|0;
 $13 = (($12) + ($9))|0;
 $14 = $13 << 7;
 $15 = $13 >>> 25;
 $16 = $14 | $15;
 $17 = (($16) + ($2))|0;
 $18 = $4 ^ $2;
 $19 = $17 & $18;
 $20 = $19 ^ $4;
 $21 = ((($in)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($6) + -389564586)|0;
 $24 = (($23) + ($22))|0;
 $25 = (($24) + ($20))|0;
 $26 = $25 << 12;
 $27 = $25 >>> 20;
 $28 = $26 | $27;
 $29 = (($28) + ($17))|0;
 $30 = $17 ^ $2;
 $31 = $29 & $30;
 $32 = $31 ^ $2;
 $33 = ((($in)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($4) + 606105819)|0;
 $36 = (($35) + ($34))|0;
 $37 = (($36) + ($32))|0;
 $38 = $37 << 17;
 $39 = $37 >>> 15;
 $40 = $38 | $39;
 $41 = (($40) + ($29))|0;
 $42 = $29 ^ $17;
 $43 = $41 & $42;
 $44 = $43 ^ $17;
 $45 = ((($in)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($2) + -1044525330)|0;
 $48 = (($47) + ($46))|0;
 $49 = (($48) + ($44))|0;
 $50 = $49 << 22;
 $51 = $49 >>> 10;
 $52 = $50 | $51;
 $53 = (($52) + ($41))|0;
 $54 = $41 ^ $29;
 $55 = $53 & $54;
 $56 = $55 ^ $29;
 $57 = ((($in)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + -176418897)|0;
 $60 = (($59) + ($17))|0;
 $61 = (($60) + ($56))|0;
 $62 = $61 << 7;
 $63 = $61 >>> 25;
 $64 = $62 | $63;
 $65 = (($64) + ($53))|0;
 $66 = $53 ^ $41;
 $67 = $65 & $66;
 $68 = $67 ^ $41;
 $69 = ((($in)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 1200080426)|0;
 $72 = (($71) + ($29))|0;
 $73 = (($72) + ($68))|0;
 $74 = $73 << 12;
 $75 = $73 >>> 20;
 $76 = $74 | $75;
 $77 = (($76) + ($65))|0;
 $78 = $65 ^ $53;
 $79 = $77 & $78;
 $80 = $79 ^ $53;
 $81 = ((($in)) + 24|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + -1473231341)|0;
 $84 = (($83) + ($41))|0;
 $85 = (($84) + ($80))|0;
 $86 = $85 << 17;
 $87 = $85 >>> 15;
 $88 = $86 | $87;
 $89 = (($88) + ($77))|0;
 $90 = $77 ^ $65;
 $91 = $89 & $90;
 $92 = $91 ^ $65;
 $93 = ((($in)) + 28|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + -45705983)|0;
 $96 = (($95) + ($53))|0;
 $97 = (($96) + ($92))|0;
 $98 = $97 << 22;
 $99 = $97 >>> 10;
 $100 = $98 | $99;
 $101 = (($100) + ($89))|0;
 $102 = $89 ^ $77;
 $103 = $101 & $102;
 $104 = $103 ^ $77;
 $105 = ((($in)) + 32|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + 1770035416)|0;
 $108 = (($107) + ($65))|0;
 $109 = (($108) + ($104))|0;
 $110 = $109 << 7;
 $111 = $109 >>> 25;
 $112 = $110 | $111;
 $113 = (($112) + ($101))|0;
 $114 = $101 ^ $89;
 $115 = $113 & $114;
 $116 = $115 ^ $89;
 $117 = ((($in)) + 36|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + -1958414417)|0;
 $120 = (($119) + ($77))|0;
 $121 = (($120) + ($116))|0;
 $122 = $121 << 12;
 $123 = $121 >>> 20;
 $124 = $122 | $123;
 $125 = (($124) + ($113))|0;
 $126 = $113 ^ $101;
 $127 = $125 & $126;
 $128 = $127 ^ $101;
 $129 = ((($in)) + 40|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($130) + -42063)|0;
 $132 = (($131) + ($89))|0;
 $133 = (($132) + ($128))|0;
 $134 = $133 << 17;
 $135 = $133 >>> 15;
 $136 = $134 | $135;
 $137 = (($136) + ($125))|0;
 $138 = $125 ^ $113;
 $139 = $137 & $138;
 $140 = $139 ^ $113;
 $141 = ((($in)) + 44|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + -1990404162)|0;
 $144 = (($143) + ($101))|0;
 $145 = (($144) + ($140))|0;
 $146 = $145 << 22;
 $147 = $145 >>> 10;
 $148 = $146 | $147;
 $149 = (($148) + ($137))|0;
 $150 = $137 ^ $125;
 $151 = $149 & $150;
 $152 = $151 ^ $125;
 $153 = ((($in)) + 48|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + 1804603682)|0;
 $156 = (($155) + ($113))|0;
 $157 = (($156) + ($152))|0;
 $158 = $157 << 7;
 $159 = $157 >>> 25;
 $160 = $158 | $159;
 $161 = (($160) + ($149))|0;
 $162 = $149 ^ $137;
 $163 = $161 & $162;
 $164 = $163 ^ $137;
 $165 = ((($in)) + 52|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($166) + -40341101)|0;
 $168 = (($167) + ($125))|0;
 $169 = (($168) + ($164))|0;
 $170 = $169 << 12;
 $171 = $169 >>> 20;
 $172 = $170 | $171;
 $173 = (($172) + ($161))|0;
 $174 = $161 ^ $149;
 $175 = $173 & $174;
 $176 = $175 ^ $149;
 $177 = ((($in)) + 56|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + -1502002290)|0;
 $180 = (($179) + ($137))|0;
 $181 = (($180) + ($176))|0;
 $182 = $181 << 17;
 $183 = $181 >>> 15;
 $184 = $182 | $183;
 $185 = (($184) + ($173))|0;
 $186 = $173 ^ $161;
 $187 = $185 & $186;
 $188 = $187 ^ $161;
 $189 = ((($in)) + 60|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = (($190) + 1236535329)|0;
 $192 = (($191) + ($149))|0;
 $193 = (($192) + ($188))|0;
 $194 = $193 << 22;
 $195 = $193 >>> 10;
 $196 = $194 | $195;
 $197 = (($196) + ($185))|0;
 $198 = $197 ^ $185;
 $199 = $198 & $173;
 $200 = $199 ^ $185;
 $201 = (($22) + -165796510)|0;
 $202 = (($201) + ($161))|0;
 $203 = (($202) + ($200))|0;
 $204 = $203 << 5;
 $205 = $203 >>> 27;
 $206 = $204 | $205;
 $207 = (($206) + ($197))|0;
 $208 = $207 ^ $197;
 $209 = $208 & $185;
 $210 = $209 ^ $197;
 $211 = (($82) + -1069501632)|0;
 $212 = (($211) + ($173))|0;
 $213 = (($212) + ($210))|0;
 $214 = $213 << 9;
 $215 = $213 >>> 23;
 $216 = $214 | $215;
 $217 = (($216) + ($207))|0;
 $218 = $217 ^ $207;
 $219 = $218 & $197;
 $220 = $219 ^ $207;
 $221 = (($142) + 643717713)|0;
 $222 = (($221) + ($185))|0;
 $223 = (($222) + ($220))|0;
 $224 = $223 << 14;
 $225 = $223 >>> 18;
 $226 = $224 | $225;
 $227 = (($226) + ($217))|0;
 $228 = $227 ^ $217;
 $229 = $228 & $207;
 $230 = $229 ^ $217;
 $231 = (($10) + -373897302)|0;
 $232 = (($231) + ($197))|0;
 $233 = (($232) + ($230))|0;
 $234 = $233 << 20;
 $235 = $233 >>> 12;
 $236 = $234 | $235;
 $237 = (($236) + ($227))|0;
 $238 = $237 ^ $227;
 $239 = $238 & $217;
 $240 = $239 ^ $227;
 $241 = (($70) + -701558691)|0;
 $242 = (($241) + ($207))|0;
 $243 = (($242) + ($240))|0;
 $244 = $243 << 5;
 $245 = $243 >>> 27;
 $246 = $244 | $245;
 $247 = (($246) + ($237))|0;
 $248 = $247 ^ $237;
 $249 = $248 & $227;
 $250 = $249 ^ $237;
 $251 = (($130) + 38016083)|0;
 $252 = (($251) + ($217))|0;
 $253 = (($252) + ($250))|0;
 $254 = $253 << 9;
 $255 = $253 >>> 23;
 $256 = $254 | $255;
 $257 = (($256) + ($247))|0;
 $258 = $257 ^ $247;
 $259 = $258 & $237;
 $260 = $259 ^ $247;
 $261 = (($190) + -660478335)|0;
 $262 = (($261) + ($227))|0;
 $263 = (($262) + ($260))|0;
 $264 = $263 << 14;
 $265 = $263 >>> 18;
 $266 = $264 | $265;
 $267 = (($266) + ($257))|0;
 $268 = $267 ^ $257;
 $269 = $268 & $247;
 $270 = $269 ^ $257;
 $271 = (($58) + -405537848)|0;
 $272 = (($271) + ($237))|0;
 $273 = (($272) + ($270))|0;
 $274 = $273 << 20;
 $275 = $273 >>> 12;
 $276 = $274 | $275;
 $277 = (($276) + ($267))|0;
 $278 = $277 ^ $267;
 $279 = $278 & $257;
 $280 = $279 ^ $267;
 $281 = (($118) + 568446438)|0;
 $282 = (($281) + ($247))|0;
 $283 = (($282) + ($280))|0;
 $284 = $283 << 5;
 $285 = $283 >>> 27;
 $286 = $284 | $285;
 $287 = (($286) + ($277))|0;
 $288 = $287 ^ $277;
 $289 = $288 & $267;
 $290 = $289 ^ $277;
 $291 = (($178) + -1019803690)|0;
 $292 = (($291) + ($257))|0;
 $293 = (($292) + ($290))|0;
 $294 = $293 << 9;
 $295 = $293 >>> 23;
 $296 = $294 | $295;
 $297 = (($296) + ($287))|0;
 $298 = $297 ^ $287;
 $299 = $298 & $277;
 $300 = $299 ^ $287;
 $301 = (($46) + -187363961)|0;
 $302 = (($301) + ($267))|0;
 $303 = (($302) + ($300))|0;
 $304 = $303 << 14;
 $305 = $303 >>> 18;
 $306 = $304 | $305;
 $307 = (($306) + ($297))|0;
 $308 = $307 ^ $297;
 $309 = $308 & $287;
 $310 = $309 ^ $297;
 $311 = (($106) + 1163531501)|0;
 $312 = (($311) + ($277))|0;
 $313 = (($312) + ($310))|0;
 $314 = $313 << 20;
 $315 = $313 >>> 12;
 $316 = $314 | $315;
 $317 = (($316) + ($307))|0;
 $318 = $317 ^ $307;
 $319 = $318 & $297;
 $320 = $319 ^ $307;
 $321 = (($166) + -1444681467)|0;
 $322 = (($321) + ($287))|0;
 $323 = (($322) + ($320))|0;
 $324 = $323 << 5;
 $325 = $323 >>> 27;
 $326 = $324 | $325;
 $327 = (($326) + ($317))|0;
 $328 = $327 ^ $317;
 $329 = $328 & $307;
 $330 = $329 ^ $317;
 $331 = (($34) + -51403784)|0;
 $332 = (($331) + ($297))|0;
 $333 = (($332) + ($330))|0;
 $334 = $333 << 9;
 $335 = $333 >>> 23;
 $336 = $334 | $335;
 $337 = (($336) + ($327))|0;
 $338 = $337 ^ $327;
 $339 = $338 & $317;
 $340 = $339 ^ $327;
 $341 = (($94) + 1735328473)|0;
 $342 = (($341) + ($307))|0;
 $343 = (($342) + ($340))|0;
 $344 = $343 << 14;
 $345 = $343 >>> 18;
 $346 = $344 | $345;
 $347 = (($346) + ($337))|0;
 $348 = $347 ^ $337;
 $349 = $348 & $327;
 $350 = $349 ^ $337;
 $351 = (($154) + -1926607734)|0;
 $352 = (($351) + ($317))|0;
 $353 = (($352) + ($350))|0;
 $354 = $353 << 20;
 $355 = $353 >>> 12;
 $356 = $354 | $355;
 $357 = (($356) + ($347))|0;
 $358 = $347 ^ $337;
 $359 = $358 ^ $357;
 $360 = (($70) + -378558)|0;
 $361 = (($360) + ($327))|0;
 $362 = (($361) + ($359))|0;
 $363 = $362 << 4;
 $364 = $362 >>> 28;
 $365 = $363 | $364;
 $366 = (($365) + ($357))|0;
 $367 = $357 ^ $347;
 $368 = $367 ^ $366;
 $369 = (($106) + -2022574463)|0;
 $370 = (($369) + ($337))|0;
 $371 = (($370) + ($368))|0;
 $372 = $371 << 11;
 $373 = $371 >>> 21;
 $374 = $372 | $373;
 $375 = (($374) + ($366))|0;
 $376 = $366 ^ $357;
 $377 = $376 ^ $375;
 $378 = (($142) + 1839030562)|0;
 $379 = (($378) + ($347))|0;
 $380 = (($379) + ($377))|0;
 $381 = $380 << 16;
 $382 = $380 >>> 16;
 $383 = $381 | $382;
 $384 = (($383) + ($375))|0;
 $385 = $375 ^ $366;
 $386 = $385 ^ $384;
 $387 = (($178) + -35309556)|0;
 $388 = (($387) + ($357))|0;
 $389 = (($388) + ($386))|0;
 $390 = $389 << 23;
 $391 = $389 >>> 9;
 $392 = $390 | $391;
 $393 = (($392) + ($384))|0;
 $394 = $384 ^ $375;
 $395 = $394 ^ $393;
 $396 = (($22) + -1530992060)|0;
 $397 = (($396) + ($366))|0;
 $398 = (($397) + ($395))|0;
 $399 = $398 << 4;
 $400 = $398 >>> 28;
 $401 = $399 | $400;
 $402 = (($401) + ($393))|0;
 $403 = $393 ^ $384;
 $404 = $403 ^ $402;
 $405 = (($58) + 1272893353)|0;
 $406 = (($405) + ($375))|0;
 $407 = (($406) + ($404))|0;
 $408 = $407 << 11;
 $409 = $407 >>> 21;
 $410 = $408 | $409;
 $411 = (($410) + ($402))|0;
 $412 = $402 ^ $393;
 $413 = $412 ^ $411;
 $414 = (($94) + -155497632)|0;
 $415 = (($414) + ($384))|0;
 $416 = (($415) + ($413))|0;
 $417 = $416 << 16;
 $418 = $416 >>> 16;
 $419 = $417 | $418;
 $420 = (($419) + ($411))|0;
 $421 = $411 ^ $402;
 $422 = $421 ^ $420;
 $423 = (($130) + -1094730640)|0;
 $424 = (($423) + ($393))|0;
 $425 = (($424) + ($422))|0;
 $426 = $425 << 23;
 $427 = $425 >>> 9;
 $428 = $426 | $427;
 $429 = (($428) + ($420))|0;
 $430 = $420 ^ $411;
 $431 = $430 ^ $429;
 $432 = (($166) + 681279174)|0;
 $433 = (($432) + ($402))|0;
 $434 = (($433) + ($431))|0;
 $435 = $434 << 4;
 $436 = $434 >>> 28;
 $437 = $435 | $436;
 $438 = (($437) + ($429))|0;
 $439 = $429 ^ $420;
 $440 = $439 ^ $438;
 $441 = (($10) + -358537222)|0;
 $442 = (($441) + ($411))|0;
 $443 = (($442) + ($440))|0;
 $444 = $443 << 11;
 $445 = $443 >>> 21;
 $446 = $444 | $445;
 $447 = (($446) + ($438))|0;
 $448 = $438 ^ $429;
 $449 = $448 ^ $447;
 $450 = (($46) + -722521979)|0;
 $451 = (($450) + ($420))|0;
 $452 = (($451) + ($449))|0;
 $453 = $452 << 16;
 $454 = $452 >>> 16;
 $455 = $453 | $454;
 $456 = (($455) + ($447))|0;
 $457 = $447 ^ $438;
 $458 = $457 ^ $456;
 $459 = (($82) + 76029189)|0;
 $460 = (($459) + ($429))|0;
 $461 = (($460) + ($458))|0;
 $462 = $461 << 23;
 $463 = $461 >>> 9;
 $464 = $462 | $463;
 $465 = (($464) + ($456))|0;
 $466 = $456 ^ $447;
 $467 = $466 ^ $465;
 $468 = (($118) + -640364487)|0;
 $469 = (($468) + ($438))|0;
 $470 = (($469) + ($467))|0;
 $471 = $470 << 4;
 $472 = $470 >>> 28;
 $473 = $471 | $472;
 $474 = (($473) + ($465))|0;
 $475 = $465 ^ $456;
 $476 = $475 ^ $474;
 $477 = (($154) + -421815835)|0;
 $478 = (($477) + ($447))|0;
 $479 = (($478) + ($476))|0;
 $480 = $479 << 11;
 $481 = $479 >>> 21;
 $482 = $480 | $481;
 $483 = (($482) + ($474))|0;
 $484 = $474 ^ $465;
 $485 = $484 ^ $483;
 $486 = (($190) + 530742520)|0;
 $487 = (($486) + ($456))|0;
 $488 = (($487) + ($485))|0;
 $489 = $488 << 16;
 $490 = $488 >>> 16;
 $491 = $489 | $490;
 $492 = (($491) + ($483))|0;
 $493 = $483 ^ $474;
 $494 = $493 ^ $492;
 $495 = (($34) + -995338651)|0;
 $496 = (($495) + ($465))|0;
 $497 = (($496) + ($494))|0;
 $498 = $497 << 23;
 $499 = $497 >>> 9;
 $500 = $498 | $499;
 $501 = (($500) + ($492))|0;
 $502 = $483 ^ -1;
 $503 = $501 | $502;
 $504 = $503 ^ $492;
 $505 = (($10) + -198630844)|0;
 $506 = (($505) + ($474))|0;
 $507 = (($506) + ($504))|0;
 $508 = $507 << 6;
 $509 = $507 >>> 26;
 $510 = $508 | $509;
 $511 = (($510) + ($501))|0;
 $512 = $492 ^ -1;
 $513 = $511 | $512;
 $514 = $513 ^ $501;
 $515 = (($94) + 1126891415)|0;
 $516 = (($515) + ($483))|0;
 $517 = (($516) + ($514))|0;
 $518 = $517 << 10;
 $519 = $517 >>> 22;
 $520 = $518 | $519;
 $521 = (($520) + ($511))|0;
 $522 = $501 ^ -1;
 $523 = $521 | $522;
 $524 = $523 ^ $511;
 $525 = (($178) + -1416354905)|0;
 $526 = (($525) + ($492))|0;
 $527 = (($526) + ($524))|0;
 $528 = $527 << 15;
 $529 = $527 >>> 17;
 $530 = $528 | $529;
 $531 = (($530) + ($521))|0;
 $532 = $511 ^ -1;
 $533 = $531 | $532;
 $534 = $533 ^ $521;
 $535 = (($70) + -57434055)|0;
 $536 = (($535) + ($501))|0;
 $537 = (($536) + ($534))|0;
 $538 = $537 << 21;
 $539 = $537 >>> 11;
 $540 = $538 | $539;
 $541 = (($540) + ($531))|0;
 $542 = $521 ^ -1;
 $543 = $541 | $542;
 $544 = $543 ^ $531;
 $545 = (($154) + 1700485571)|0;
 $546 = (($545) + ($511))|0;
 $547 = (($546) + ($544))|0;
 $548 = $547 << 6;
 $549 = $547 >>> 26;
 $550 = $548 | $549;
 $551 = (($550) + ($541))|0;
 $552 = $531 ^ -1;
 $553 = $551 | $552;
 $554 = $553 ^ $541;
 $555 = (($46) + -1894986606)|0;
 $556 = (($555) + ($521))|0;
 $557 = (($556) + ($554))|0;
 $558 = $557 << 10;
 $559 = $557 >>> 22;
 $560 = $558 | $559;
 $561 = (($560) + ($551))|0;
 $562 = $541 ^ -1;
 $563 = $561 | $562;
 $564 = $563 ^ $551;
 $565 = (($130) + -1051523)|0;
 $566 = (($565) + ($531))|0;
 $567 = (($566) + ($564))|0;
 $568 = $567 << 15;
 $569 = $567 >>> 17;
 $570 = $568 | $569;
 $571 = (($570) + ($561))|0;
 $572 = $551 ^ -1;
 $573 = $571 | $572;
 $574 = $573 ^ $561;
 $575 = (($22) + -2054922799)|0;
 $576 = (($575) + ($541))|0;
 $577 = (($576) + ($574))|0;
 $578 = $577 << 21;
 $579 = $577 >>> 11;
 $580 = $578 | $579;
 $581 = (($580) + ($571))|0;
 $582 = $561 ^ -1;
 $583 = $581 | $582;
 $584 = $583 ^ $571;
 $585 = (($106) + 1873313359)|0;
 $586 = (($585) + ($551))|0;
 $587 = (($586) + ($584))|0;
 $588 = $587 << 6;
 $589 = $587 >>> 26;
 $590 = $588 | $589;
 $591 = (($590) + ($581))|0;
 $592 = $571 ^ -1;
 $593 = $591 | $592;
 $594 = $593 ^ $581;
 $595 = (($190) + -30611744)|0;
 $596 = (($595) + ($561))|0;
 $597 = (($596) + ($594))|0;
 $598 = $597 << 10;
 $599 = $597 >>> 22;
 $600 = $598 | $599;
 $601 = (($600) + ($591))|0;
 $602 = $581 ^ -1;
 $603 = $601 | $602;
 $604 = $603 ^ $591;
 $605 = (($82) + -1560198380)|0;
 $606 = (($605) + ($571))|0;
 $607 = (($606) + ($604))|0;
 $608 = $607 << 15;
 $609 = $607 >>> 17;
 $610 = $608 | $609;
 $611 = (($610) + ($601))|0;
 $612 = $591 ^ -1;
 $613 = $611 | $612;
 $614 = $613 ^ $601;
 $615 = (($166) + 1309151649)|0;
 $616 = (($615) + ($581))|0;
 $617 = (($616) + ($614))|0;
 $618 = $617 << 21;
 $619 = $617 >>> 11;
 $620 = $618 | $619;
 $621 = (($620) + ($611))|0;
 $622 = $601 ^ -1;
 $623 = $621 | $622;
 $624 = $623 ^ $611;
 $625 = (($58) + -145523070)|0;
 $626 = (($625) + ($591))|0;
 $627 = (($626) + ($624))|0;
 $628 = $627 << 6;
 $629 = $627 >>> 26;
 $630 = $628 | $629;
 $631 = (($630) + ($621))|0;
 $632 = $611 ^ -1;
 $633 = $631 | $632;
 $634 = $633 ^ $621;
 $635 = (($142) + -1120210379)|0;
 $636 = (($635) + ($601))|0;
 $637 = (($636) + ($634))|0;
 $638 = $637 << 10;
 $639 = $637 >>> 22;
 $640 = $638 | $639;
 $641 = (($640) + ($631))|0;
 $642 = $621 ^ -1;
 $643 = $641 | $642;
 $644 = $643 ^ $631;
 $645 = (($34) + 718787259)|0;
 $646 = (($645) + ($611))|0;
 $647 = (($646) + ($644))|0;
 $648 = $647 << 15;
 $649 = $647 >>> 17;
 $650 = $648 | $649;
 $651 = (($650) + ($641))|0;
 $652 = $631 ^ -1;
 $653 = $651 | $652;
 $654 = $653 ^ $641;
 $655 = (($118) + -343485551)|0;
 $656 = (($655) + ($621))|0;
 $657 = (($656) + ($654))|0;
 $658 = $657 << 21;
 $659 = $657 >>> 11;
 $660 = $658 | $659;
 $661 = (($631) + ($0))|0;
 HEAP32[$buf>>2] = $661;
 $662 = HEAP32[$1>>2]|0;
 $663 = (($651) + ($662))|0;
 $664 = (($663) + ($660))|0;
 HEAP32[$1>>2] = $664;
 $665 = HEAP32[$3>>2]|0;
 $666 = (($651) + ($665))|0;
 HEAP32[$3>>2] = $666;
 $667 = HEAP32[$5>>2]|0;
 $668 = (($641) + ($667))|0;
 HEAP32[$5>>2] = $668;
 return;
}
function _safe_realloc_24($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_realloc($ptr,$size)|0);
 $1 = ($size|0)!=(0);
 $2 = ($0|0)==(0|0);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  return ($0|0);
 }
 _free($ptr);
 return ($0|0);
}
function _safe_malloc_($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $1 = $0&1;
 $$size = (($1) + ($size))|0;
 $2 = (_malloc($$size)|0);
 return ($2|0);
}
function _format_input_($mbuf,$signal,$channels,$samples,$bytes_per_sample) {
 $mbuf = $mbuf|0;
 $signal = $signal|0;
 $channels = $channels|0;
 $samples = $samples|0;
 $bytes_per_sample = $bytes_per_sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf16$086 = 0;
 var $buf16$189 = 0, $buf16$292 = 0, $buf16$395 = 0, $buf16$498 = 0, $buf16$555 = 0, $buf16$6$lcssa = 0, $buf16$650 = 0, $buf32$0107 = 0, $buf32$1110 = 0, $buf32$2113 = 0, $buf32$3116 = 0, $buf32$4119 = 0, $buf32$569 = 0, $buf32$6$lcssa = 0, $buf32$664 = 0, $buf_$071 = 0, $buf_$10$lcssa = 0, $buf_$1057 = 0, $buf_$174 = 0, $buf_$277 = 0;
 var $buf_$380 = 0, $buf_$483 = 0, $buf_$5101 = 0, $buf_$6104 = 0, $buf_$748 = 0, $buf_$8$lcssa = 0, $buf_$846 = 0, $buf_$962 = 0, $channel$047 = 0, $channel$151 = 0, $channel$258 = 0, $channel$365 = 0, $exitcond = 0, $exitcond125 = 0, $exitcond127 = 0, $exitcond128 = 0, $exitcond130 = 0, $exitcond131 = 0, $exitcond133 = 0, $exitcond134 = 0;
 var $exitcond135 = 0, $exitcond136 = 0, $exitcond137 = 0, $exitcond138 = 0, $exitcond139 = 0, $exitcond140 = 0, $exitcond141 = 0, $exitcond142 = 0, $exitcond143 = 0, $exitcond144 = 0, $exitcond145 = 0, $exitcond146 = 0, $exitcond147 = 0, $exitcond148 = 0, $exitcond149 = 0, $exitcond150 = 0, $exitcond151 = 0, $sample$072 = 0, $sample$10102 = 0, $sample$11105 = 0;
 var $sample$12108 = 0, $sample$13111 = 0, $sample$14114 = 0, $sample$15117 = 0, $sample$16120 = 0, $sample$1749 = 0, $sample$175 = 0, $sample$1856 = 0, $sample$1963 = 0, $sample$2070 = 0, $sample$278 = 0, $sample$381 = 0, $sample$484 = 0, $sample$587 = 0, $sample$690 = 0, $sample$793 = 0, $sample$896 = 0, $sample$999 = 0, $scevgep = 0, $scevgep126 = 0;
 var $scevgep129 = 0, $scevgep132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mbuf>>2]|0;
 $1 = ($bytes_per_sample*100)|0;
 $2 = (($1) + ($channels))|0;
 do {
  switch ($2|0) {
  case 101:  {
   $110 = ($samples|0)==(0);
   if ($110) {
    return;
   } else {
    $buf_$071 = $0;$sample$072 = 0;
   }
   while(1) {
    $111 = HEAP32[$signal>>2]|0;
    $112 = (($111) + ($sample$072<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $113&255;
    $115 = ((($buf_$071)) + 1|0);
    HEAP8[$buf_$071>>0] = $114;
    $116 = (($sample$072) + 1)|0;
    $exitcond135 = ($116|0)==($samples|0);
    if ($exitcond135) {
     break;
    } else {
     $buf_$071 = $115;$sample$072 = $116;
    }
   }
   return;
   break;
  }
  case 102:  {
   $108 = ($samples|0)==(0);
   if ($108) {
    return;
   }
   $109 = ((($signal)) + 4|0);
   $buf_$174 = $0;$sample$175 = 0;
   while(1) {
    $117 = HEAP32[$signal>>2]|0;
    $118 = (($117) + ($sample$175<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $119&255;
    $121 = ((($buf_$174)) + 1|0);
    HEAP8[$buf_$174>>0] = $120;
    $122 = HEAP32[$109>>2]|0;
    $123 = (($122) + ($sample$175<<2)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124&255;
    $126 = ((($buf_$174)) + 2|0);
    HEAP8[$121>>0] = $125;
    $127 = (($sample$175) + 1)|0;
    $exitcond136 = ($127|0)==($samples|0);
    if ($exitcond136) {
     break;
    } else {
     $buf_$174 = $126;$sample$175 = $127;
    }
   }
   return;
   break;
  }
  case 104:  {
   $104 = ($samples|0)==(0);
   if ($104) {
    return;
   }
   $105 = ((($signal)) + 4|0);
   $106 = ((($signal)) + 8|0);
   $107 = ((($signal)) + 12|0);
   $buf_$277 = $0;$sample$278 = 0;
   while(1) {
    $128 = HEAP32[$signal>>2]|0;
    $129 = (($128) + ($sample$278<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $130&255;
    $132 = ((($buf_$277)) + 1|0);
    HEAP8[$buf_$277>>0] = $131;
    $133 = HEAP32[$105>>2]|0;
    $134 = (($133) + ($sample$278<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $135&255;
    $137 = ((($buf_$277)) + 2|0);
    HEAP8[$132>>0] = $136;
    $138 = HEAP32[$106>>2]|0;
    $139 = (($138) + ($sample$278<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $140&255;
    $142 = ((($buf_$277)) + 3|0);
    HEAP8[$137>>0] = $141;
    $143 = HEAP32[$107>>2]|0;
    $144 = (($143) + ($sample$278<<2)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $145&255;
    $147 = ((($buf_$277)) + 4|0);
    HEAP8[$142>>0] = $146;
    $148 = (($sample$278) + 1)|0;
    $exitcond137 = ($148|0)==($samples|0);
    if ($exitcond137) {
     break;
    } else {
     $buf_$277 = $147;$sample$278 = $148;
    }
   }
   return;
   break;
  }
  case 106:  {
   $98 = ($samples|0)==(0);
   if ($98) {
    return;
   }
   $99 = ((($signal)) + 4|0);
   $100 = ((($signal)) + 8|0);
   $101 = ((($signal)) + 12|0);
   $102 = ((($signal)) + 16|0);
   $103 = ((($signal)) + 20|0);
   $buf_$380 = $0;$sample$381 = 0;
   while(1) {
    $149 = HEAP32[$signal>>2]|0;
    $150 = (($149) + ($sample$381<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151&255;
    $153 = ((($buf_$380)) + 1|0);
    HEAP8[$buf_$380>>0] = $152;
    $154 = HEAP32[$99>>2]|0;
    $155 = (($154) + ($sample$381<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $156&255;
    $158 = ((($buf_$380)) + 2|0);
    HEAP8[$153>>0] = $157;
    $159 = HEAP32[$100>>2]|0;
    $160 = (($159) + ($sample$381<<2)|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $161&255;
    $163 = ((($buf_$380)) + 3|0);
    HEAP8[$158>>0] = $162;
    $164 = HEAP32[$101>>2]|0;
    $165 = (($164) + ($sample$381<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $166&255;
    $168 = ((($buf_$380)) + 4|0);
    HEAP8[$163>>0] = $167;
    $169 = HEAP32[$102>>2]|0;
    $170 = (($169) + ($sample$381<<2)|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $171&255;
    $173 = ((($buf_$380)) + 5|0);
    HEAP8[$168>>0] = $172;
    $174 = HEAP32[$103>>2]|0;
    $175 = (($174) + ($sample$381<<2)|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $176&255;
    $178 = ((($buf_$380)) + 6|0);
    HEAP8[$173>>0] = $177;
    $179 = (($sample$381) + 1)|0;
    $exitcond138 = ($179|0)==($samples|0);
    if ($exitcond138) {
     break;
    } else {
     $buf_$380 = $178;$sample$381 = $179;
    }
   }
   return;
   break;
  }
  case 108:  {
   $90 = ($samples|0)==(0);
   if ($90) {
    return;
   }
   $91 = ((($signal)) + 4|0);
   $92 = ((($signal)) + 8|0);
   $93 = ((($signal)) + 12|0);
   $94 = ((($signal)) + 16|0);
   $95 = ((($signal)) + 20|0);
   $96 = ((($signal)) + 24|0);
   $97 = ((($signal)) + 28|0);
   $buf_$483 = $0;$sample$484 = 0;
   while(1) {
    $180 = HEAP32[$signal>>2]|0;
    $181 = (($180) + ($sample$484<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = $182&255;
    $184 = ((($buf_$483)) + 1|0);
    HEAP8[$buf_$483>>0] = $183;
    $185 = HEAP32[$91>>2]|0;
    $186 = (($185) + ($sample$484<<2)|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $187&255;
    $189 = ((($buf_$483)) + 2|0);
    HEAP8[$184>>0] = $188;
    $190 = HEAP32[$92>>2]|0;
    $191 = (($190) + ($sample$484<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $192&255;
    $194 = ((($buf_$483)) + 3|0);
    HEAP8[$189>>0] = $193;
    $195 = HEAP32[$93>>2]|0;
    $196 = (($195) + ($sample$484<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $197&255;
    $199 = ((($buf_$483)) + 4|0);
    HEAP8[$194>>0] = $198;
    $200 = HEAP32[$94>>2]|0;
    $201 = (($200) + ($sample$484<<2)|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $202&255;
    $204 = ((($buf_$483)) + 5|0);
    HEAP8[$199>>0] = $203;
    $205 = HEAP32[$95>>2]|0;
    $206 = (($205) + ($sample$484<<2)|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $207&255;
    $209 = ((($buf_$483)) + 6|0);
    HEAP8[$204>>0] = $208;
    $210 = HEAP32[$96>>2]|0;
    $211 = (($210) + ($sample$484<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = $212&255;
    $214 = ((($buf_$483)) + 7|0);
    HEAP8[$209>>0] = $213;
    $215 = HEAP32[$97>>2]|0;
    $216 = (($215) + ($sample$484<<2)|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $217&255;
    $219 = ((($buf_$483)) + 8|0);
    HEAP8[$214>>0] = $218;
    $220 = (($sample$484) + 1)|0;
    $exitcond139 = ($220|0)==($samples|0);
    if ($exitcond139) {
     break;
    } else {
     $buf_$483 = $219;$sample$484 = $220;
    }
   }
   return;
   break;
  }
  case 201:  {
   $88 = ($samples|0)==(0);
   if ($88) {
    return;
   }
   $89 = HEAP32[$signal>>2]|0;
   $buf16$086 = $0;$sample$587 = 0;
   while(1) {
    $221 = (($89) + ($sample$587<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $222&65535;
    $224 = ((($buf16$086)) + 2|0);
    HEAP16[$buf16$086>>1] = $223;
    $225 = (($sample$587) + 1)|0;
    $exitcond140 = ($225|0)==($samples|0);
    if ($exitcond140) {
     break;
    } else {
     $buf16$086 = $224;$sample$587 = $225;
    }
   }
   return;
   break;
  }
  case 202:  {
   $84 = ($samples|0)==(0);
   if ($84) {
    return;
   }
   $85 = HEAP32[$signal>>2]|0;
   $86 = ((($signal)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $buf16$189 = $0;$sample$690 = 0;
   while(1) {
    $226 = (($85) + ($sample$690<<2)|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $227&65535;
    $229 = ((($buf16$189)) + 2|0);
    HEAP16[$buf16$189>>1] = $228;
    $230 = (($87) + ($sample$690<<2)|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $231&65535;
    $233 = ((($buf16$189)) + 4|0);
    HEAP16[$229>>1] = $232;
    $234 = (($sample$690) + 1)|0;
    $exitcond141 = ($234|0)==($samples|0);
    if ($exitcond141) {
     break;
    } else {
     $buf16$189 = $233;$sample$690 = $234;
    }
   }
   return;
   break;
  }
  case 204:  {
   $76 = ($samples|0)==(0);
   if ($76) {
    return;
   }
   $77 = HEAP32[$signal>>2]|0;
   $78 = ((($signal)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($signal)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($signal)) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $buf16$292 = $0;$sample$793 = 0;
   while(1) {
    $235 = (($77) + ($sample$793<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236&65535;
    $238 = ((($buf16$292)) + 2|0);
    HEAP16[$buf16$292>>1] = $237;
    $239 = (($79) + ($sample$793<<2)|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $240&65535;
    $242 = ((($buf16$292)) + 4|0);
    HEAP16[$238>>1] = $241;
    $243 = (($81) + ($sample$793<<2)|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $244&65535;
    $246 = ((($buf16$292)) + 6|0);
    HEAP16[$242>>1] = $245;
    $247 = (($83) + ($sample$793<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = $248&65535;
    $250 = ((($buf16$292)) + 8|0);
    HEAP16[$246>>1] = $249;
    $251 = (($sample$793) + 1)|0;
    $exitcond142 = ($251|0)==($samples|0);
    if ($exitcond142) {
     break;
    } else {
     $buf16$292 = $250;$sample$793 = $251;
    }
   }
   return;
   break;
  }
  case 206:  {
   $64 = ($samples|0)==(0);
   if ($64) {
    return;
   }
   $65 = HEAP32[$signal>>2]|0;
   $66 = ((($signal)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($signal)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($signal)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($signal)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($signal)) + 20|0);
   $75 = HEAP32[$74>>2]|0;
   $buf16$395 = $0;$sample$896 = 0;
   while(1) {
    $252 = (($65) + ($sample$896<<2)|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = $253&65535;
    $255 = ((($buf16$395)) + 2|0);
    HEAP16[$buf16$395>>1] = $254;
    $256 = (($67) + ($sample$896<<2)|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = $257&65535;
    $259 = ((($buf16$395)) + 4|0);
    HEAP16[$255>>1] = $258;
    $260 = (($69) + ($sample$896<<2)|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = $261&65535;
    $263 = ((($buf16$395)) + 6|0);
    HEAP16[$259>>1] = $262;
    $264 = (($71) + ($sample$896<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $265&65535;
    $267 = ((($buf16$395)) + 8|0);
    HEAP16[$263>>1] = $266;
    $268 = (($73) + ($sample$896<<2)|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = $269&65535;
    $271 = ((($buf16$395)) + 10|0);
    HEAP16[$267>>1] = $270;
    $272 = (($75) + ($sample$896<<2)|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $273&65535;
    $275 = ((($buf16$395)) + 12|0);
    HEAP16[$271>>1] = $274;
    $276 = (($sample$896) + 1)|0;
    $exitcond143 = ($276|0)==($samples|0);
    if ($exitcond143) {
     break;
    } else {
     $buf16$395 = $275;$sample$896 = $276;
    }
   }
   return;
   break;
  }
  case 208:  {
   $48 = ($samples|0)==(0);
   if ($48) {
    return;
   }
   $49 = HEAP32[$signal>>2]|0;
   $50 = ((($signal)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($signal)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($signal)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($signal)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($signal)) + 20|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($signal)) + 24|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($signal)) + 28|0);
   $63 = HEAP32[$62>>2]|0;
   $buf16$498 = $0;$sample$999 = 0;
   while(1) {
    $277 = (($49) + ($sample$999<<2)|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $278&65535;
    $280 = ((($buf16$498)) + 2|0);
    HEAP16[$buf16$498>>1] = $279;
    $281 = (($51) + ($sample$999<<2)|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = $282&65535;
    $284 = ((($buf16$498)) + 4|0);
    HEAP16[$280>>1] = $283;
    $285 = (($53) + ($sample$999<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $286&65535;
    $288 = ((($buf16$498)) + 6|0);
    HEAP16[$284>>1] = $287;
    $289 = (($55) + ($sample$999<<2)|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $290&65535;
    $292 = ((($buf16$498)) + 8|0);
    HEAP16[$288>>1] = $291;
    $293 = (($57) + ($sample$999<<2)|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294&65535;
    $296 = ((($buf16$498)) + 10|0);
    HEAP16[$292>>1] = $295;
    $297 = (($59) + ($sample$999<<2)|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $298&65535;
    $300 = ((($buf16$498)) + 12|0);
    HEAP16[$296>>1] = $299;
    $301 = (($61) + ($sample$999<<2)|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $302&65535;
    $304 = ((($buf16$498)) + 14|0);
    HEAP16[$300>>1] = $303;
    $305 = (($63) + ($sample$999<<2)|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $306&65535;
    $308 = ((($buf16$498)) + 16|0);
    HEAP16[$304>>1] = $307;
    $309 = (($sample$999) + 1)|0;
    $exitcond144 = ($309|0)==($samples|0);
    if ($exitcond144) {
     break;
    } else {
     $buf16$498 = $308;$sample$999 = $309;
    }
   }
   return;
   break;
  }
  case 301:  {
   $47 = ($samples|0)==(0);
   if ($47) {
    return;
   } else {
    $buf_$5101 = $0;$sample$10102 = 0;
   }
   while(1) {
    $310 = HEAP32[$signal>>2]|0;
    $311 = (($310) + ($sample$10102<<2)|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $312&255;
    $314 = ((($buf_$5101)) + 1|0);
    HEAP8[$buf_$5101>>0] = $313;
    $315 = $312 >>> 8;
    $316 = $315&255;
    $317 = ((($buf_$5101)) + 2|0);
    HEAP8[$314>>0] = $316;
    $318 = $312 >>> 16;
    $319 = $318&255;
    $320 = ((($buf_$5101)) + 3|0);
    HEAP8[$317>>0] = $319;
    $321 = (($sample$10102) + 1)|0;
    $exitcond145 = ($321|0)==($samples|0);
    if ($exitcond145) {
     break;
    } else {
     $buf_$5101 = $320;$sample$10102 = $321;
    }
   }
   return;
   break;
  }
  case 302:  {
   $45 = ($samples|0)==(0);
   if ($45) {
    return;
   }
   $46 = ((($signal)) + 4|0);
   $buf_$6104 = $0;$sample$11105 = 0;
   while(1) {
    $322 = HEAP32[$signal>>2]|0;
    $323 = (($322) + ($sample$11105<<2)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = $324&255;
    $326 = ((($buf_$6104)) + 1|0);
    HEAP8[$buf_$6104>>0] = $325;
    $327 = $324 >>> 8;
    $328 = $327&255;
    $329 = ((($buf_$6104)) + 2|0);
    HEAP8[$326>>0] = $328;
    $330 = $324 >>> 16;
    $331 = $330&255;
    $332 = ((($buf_$6104)) + 3|0);
    HEAP8[$329>>0] = $331;
    $333 = HEAP32[$46>>2]|0;
    $334 = (($333) + ($sample$11105<<2)|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = $335&255;
    $337 = ((($buf_$6104)) + 4|0);
    HEAP8[$332>>0] = $336;
    $338 = $335 >>> 8;
    $339 = $338&255;
    $340 = ((($buf_$6104)) + 5|0);
    HEAP8[$337>>0] = $339;
    $341 = $335 >>> 16;
    $342 = $341&255;
    $343 = ((($buf_$6104)) + 6|0);
    HEAP8[$340>>0] = $342;
    $344 = (($sample$11105) + 1)|0;
    $exitcond146 = ($344|0)==($samples|0);
    if ($exitcond146) {
     break;
    } else {
     $buf_$6104 = $343;$sample$11105 = $344;
    }
   }
   return;
   break;
  }
  case 401:  {
   $43 = ($samples|0)==(0);
   if ($43) {
    return;
   }
   $44 = HEAP32[$signal>>2]|0;
   $buf32$0107 = $0;$sample$12108 = 0;
   while(1) {
    $345 = (($44) + ($sample$12108<<2)|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = ((($buf32$0107)) + 4|0);
    HEAP32[$buf32$0107>>2] = $346;
    $348 = (($sample$12108) + 1)|0;
    $exitcond147 = ($348|0)==($samples|0);
    if ($exitcond147) {
     break;
    } else {
     $buf32$0107 = $347;$sample$12108 = $348;
    }
   }
   return;
   break;
  }
  case 402:  {
   $39 = ($samples|0)==(0);
   if ($39) {
    return;
   }
   $40 = HEAP32[$signal>>2]|0;
   $41 = ((($signal)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $buf32$1110 = $0;$sample$13111 = 0;
   while(1) {
    $349 = (($40) + ($sample$13111<<2)|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = ((($buf32$1110)) + 4|0);
    HEAP32[$buf32$1110>>2] = $350;
    $352 = (($42) + ($sample$13111<<2)|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = ((($buf32$1110)) + 8|0);
    HEAP32[$351>>2] = $353;
    $355 = (($sample$13111) + 1)|0;
    $exitcond148 = ($355|0)==($samples|0);
    if ($exitcond148) {
     break;
    } else {
     $buf32$1110 = $354;$sample$13111 = $355;
    }
   }
   return;
   break;
  }
  case 404:  {
   $31 = ($samples|0)==(0);
   if ($31) {
    return;
   }
   $32 = HEAP32[$signal>>2]|0;
   $33 = ((($signal)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($signal)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($signal)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $buf32$2113 = $0;$sample$14114 = 0;
   while(1) {
    $356 = (($32) + ($sample$14114<<2)|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ((($buf32$2113)) + 4|0);
    HEAP32[$buf32$2113>>2] = $357;
    $359 = (($34) + ($sample$14114<<2)|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = ((($buf32$2113)) + 8|0);
    HEAP32[$358>>2] = $360;
    $362 = (($36) + ($sample$14114<<2)|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ((($buf32$2113)) + 12|0);
    HEAP32[$361>>2] = $363;
    $365 = (($38) + ($sample$14114<<2)|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = ((($buf32$2113)) + 16|0);
    HEAP32[$364>>2] = $366;
    $368 = (($sample$14114) + 1)|0;
    $exitcond149 = ($368|0)==($samples|0);
    if ($exitcond149) {
     break;
    } else {
     $buf32$2113 = $367;$sample$14114 = $368;
    }
   }
   return;
   break;
  }
  case 406:  {
   $19 = ($samples|0)==(0);
   if ($19) {
    return;
   }
   $20 = HEAP32[$signal>>2]|0;
   $21 = ((($signal)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($signal)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($signal)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($signal)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($signal)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $buf32$3116 = $0;$sample$15117 = 0;
   while(1) {
    $369 = (($20) + ($sample$15117<<2)|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = ((($buf32$3116)) + 4|0);
    HEAP32[$buf32$3116>>2] = $370;
    $372 = (($22) + ($sample$15117<<2)|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ((($buf32$3116)) + 8|0);
    HEAP32[$371>>2] = $373;
    $375 = (($24) + ($sample$15117<<2)|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ((($buf32$3116)) + 12|0);
    HEAP32[$374>>2] = $376;
    $378 = (($26) + ($sample$15117<<2)|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = ((($buf32$3116)) + 16|0);
    HEAP32[$377>>2] = $379;
    $381 = (($28) + ($sample$15117<<2)|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = ((($buf32$3116)) + 20|0);
    HEAP32[$380>>2] = $382;
    $384 = (($30) + ($sample$15117<<2)|0);
    $385 = HEAP32[$384>>2]|0;
    $386 = ((($buf32$3116)) + 24|0);
    HEAP32[$383>>2] = $385;
    $387 = (($sample$15117) + 1)|0;
    $exitcond150 = ($387|0)==($samples|0);
    if ($exitcond150) {
     break;
    } else {
     $buf32$3116 = $386;$sample$15117 = $387;
    }
   }
   return;
   break;
  }
  case 408:  {
   $3 = ($samples|0)==(0);
   if ($3) {
    return;
   }
   $4 = HEAP32[$signal>>2]|0;
   $5 = ((($signal)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($signal)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($signal)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($signal)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($signal)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($signal)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($signal)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $buf32$4119 = $0;$sample$16120 = 0;
   while(1) {
    $388 = (($4) + ($sample$16120<<2)|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = ((($buf32$4119)) + 4|0);
    HEAP32[$buf32$4119>>2] = $389;
    $391 = (($6) + ($sample$16120<<2)|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = ((($buf32$4119)) + 8|0);
    HEAP32[$390>>2] = $392;
    $394 = (($8) + ($sample$16120<<2)|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ((($buf32$4119)) + 12|0);
    HEAP32[$393>>2] = $395;
    $397 = (($10) + ($sample$16120<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = ((($buf32$4119)) + 16|0);
    HEAP32[$396>>2] = $398;
    $400 = (($12) + ($sample$16120<<2)|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = ((($buf32$4119)) + 20|0);
    HEAP32[$399>>2] = $401;
    $403 = (($14) + ($sample$16120<<2)|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = ((($buf32$4119)) + 24|0);
    HEAP32[$402>>2] = $404;
    $406 = (($16) + ($sample$16120<<2)|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = ((($buf32$4119)) + 28|0);
    HEAP32[$405>>2] = $407;
    $409 = (($18) + ($sample$16120<<2)|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = ((($buf32$4119)) + 32|0);
    HEAP32[$408>>2] = $410;
    $412 = (($sample$16120) + 1)|0;
    $exitcond151 = ($412|0)==($samples|0);
    if ($exitcond151) {
     break;
    } else {
     $buf32$4119 = $411;$sample$16120 = $412;
    }
   }
   return;
   break;
  }
  default: {
   switch ($bytes_per_sample|0) {
   case 1:  {
    $420 = ($samples|0)==(0);
    if ($420) {
     return;
    }
    $421 = ($channels|0)==(0);
    $buf_$748 = $0;$sample$1749 = 0;
    while(1) {
     if ($421) {
      $buf_$8$lcssa = $buf_$748;
     } else {
      $buf_$846 = $buf_$748;$channel$047 = 0;
      while(1) {
       $422 = (($signal) + ($channel$047<<2)|0);
       $423 = HEAP32[$422>>2]|0;
       $424 = (($423) + ($sample$1749<<2)|0);
       $425 = HEAP32[$424>>2]|0;
       $426 = $425&255;
       $427 = ((($buf_$846)) + 1|0);
       HEAP8[$buf_$846>>0] = $426;
       $428 = (($channel$047) + 1)|0;
       $exitcond = ($428|0)==($channels|0);
       if ($exitcond) {
        break;
       } else {
        $buf_$846 = $427;$channel$047 = $428;
       }
      }
      $scevgep = (($buf_$748) + ($channels)|0);
      $buf_$8$lcssa = $scevgep;
     }
     $429 = (($sample$1749) + 1)|0;
     $exitcond125 = ($429|0)==($samples|0);
     if ($exitcond125) {
      break;
     } else {
      $buf_$748 = $buf_$8$lcssa;$sample$1749 = $429;
     }
    }
    return;
    break;
   }
   case 2:  {
    $418 = ($samples|0)==(0);
    if ($418) {
     return;
    }
    $419 = ($channels|0)==(0);
    $buf16$555 = $0;$sample$1856 = 0;
    while(1) {
     if ($419) {
      $buf16$6$lcssa = $buf16$555;
     } else {
      $buf16$650 = $buf16$555;$channel$151 = 0;
      while(1) {
       $430 = (($signal) + ($channel$151<<2)|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = (($431) + ($sample$1856<<2)|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = $433&65535;
       $435 = ((($buf16$650)) + 2|0);
       HEAP16[$buf16$650>>1] = $434;
       $436 = (($channel$151) + 1)|0;
       $exitcond127 = ($436|0)==($channels|0);
       if ($exitcond127) {
        break;
       } else {
        $buf16$650 = $435;$channel$151 = $436;
       }
      }
      $scevgep126 = (($buf16$555) + ($channels<<1)|0);
      $buf16$6$lcssa = $scevgep126;
     }
     $437 = (($sample$1856) + 1)|0;
     $exitcond128 = ($437|0)==($samples|0);
     if ($exitcond128) {
      break;
     } else {
      $buf16$555 = $buf16$6$lcssa;$sample$1856 = $437;
     }
    }
    return;
    break;
   }
   case 3:  {
    $415 = ($samples|0)==(0);
    if ($415) {
     return;
    }
    $416 = ($channels|0)==(0);
    $417 = ($channels*3)|0;
    $buf_$962 = $0;$sample$1963 = 0;
    while(1) {
     if ($416) {
      $buf_$10$lcssa = $buf_$962;
     } else {
      $buf_$1057 = $buf_$962;$channel$258 = 0;
      while(1) {
       $438 = (($signal) + ($channel$258<<2)|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = (($439) + ($sample$1963<<2)|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = $441&255;
       $443 = ((($buf_$1057)) + 1|0);
       HEAP8[$buf_$1057>>0] = $442;
       $444 = $441 >>> 8;
       $445 = $444&255;
       $446 = ((($buf_$1057)) + 2|0);
       HEAP8[$443>>0] = $445;
       $447 = $441 >>> 16;
       $448 = $447&255;
       $449 = ((($buf_$1057)) + 3|0);
       HEAP8[$446>>0] = $448;
       $450 = (($channel$258) + 1)|0;
       $exitcond130 = ($450|0)==($channels|0);
       if ($exitcond130) {
        break;
       } else {
        $buf_$1057 = $449;$channel$258 = $450;
       }
      }
      $scevgep129 = (($buf_$962) + ($417)|0);
      $buf_$10$lcssa = $scevgep129;
     }
     $451 = (($sample$1963) + 1)|0;
     $exitcond131 = ($451|0)==($samples|0);
     if ($exitcond131) {
      break;
     } else {
      $buf_$962 = $buf_$10$lcssa;$sample$1963 = $451;
     }
    }
    return;
    break;
   }
   case 4:  {
    $413 = ($samples|0)==(0);
    if ($413) {
     return;
    }
    $414 = ($channels|0)==(0);
    $buf32$569 = $0;$sample$2070 = 0;
    while(1) {
     if ($414) {
      $buf32$6$lcssa = $buf32$569;
     } else {
      $buf32$664 = $buf32$569;$channel$365 = 0;
      while(1) {
       $452 = (($signal) + ($channel$365<<2)|0);
       $453 = HEAP32[$452>>2]|0;
       $454 = (($453) + ($sample$2070<<2)|0);
       $455 = HEAP32[$454>>2]|0;
       $456 = ((($buf32$664)) + 4|0);
       HEAP32[$buf32$664>>2] = $455;
       $457 = (($channel$365) + 1)|0;
       $exitcond133 = ($457|0)==($channels|0);
       if ($exitcond133) {
        break;
       } else {
        $buf32$664 = $456;$channel$365 = $457;
       }
      }
      $scevgep132 = (($buf32$569) + ($channels<<2)|0);
      $buf32$6$lcssa = $scevgep132;
     }
     $458 = (($sample$2070) + 1)|0;
     $exitcond134 = ($458|0)==($samples|0);
     if ($exitcond134) {
      break;
     } else {
      $buf32$569 = $buf32$6$lcssa;$sample$2070 = $458;
     }
    }
    return;
    break;
   }
   default: {
    return;
   }
   }
  }
  }
 } while(0);
}
function _FLAC__MD5Update($ctx,$buf,$len) {
 $ctx = $ctx|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($len))|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  $4 = ((($ctx)) + 84|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$4>>2] = $6;
 }
 $7 = $1 & 63;
 $8 = (64 - ($7))|0;
 $9 = ($8>>>0)>($len>>>0);
 $10 = ((($ctx)) + 64|0);
 $11 = (0 - ($8))|0;
 $12 = (($10) + ($11)|0);
 if ($9) {
  _memcpy(($12|0),($buf|0),($len|0))|0;
  return;
 }
 _memcpy(($12|0),($buf|0),($8|0))|0;
 $13 = ((($ctx)) + 64|0);
 _FLAC__MD5Transform($13,$ctx);
 $14 = (($buf) + ($8)|0);
 $15 = (($len) - ($8))|0;
 $16 = ($15>>>0)>(63);
 if ($16) {
  $17 = $1 & 63;
  $18 = (($17) + ($len))|0;
  $19 = (($18) + -128)|0;
  $20 = $19 & -64;
  $21 = (($20) + 128)|0;
  $22 = (($21) - ($17))|0;
  $$012 = $14;$$03 = $15;
  while(1) {
   dest=$ctx; src=$$012; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   _FLAC__MD5Transform($13,$ctx);
   $23 = ((($$012)) + 64|0);
   $24 = (($$03) + -64)|0;
   $25 = ($24>>>0)>(63);
   if ($25) {
    $$012 = $23;$$03 = $24;
   } else {
    break;
   }
  }
  $26 = (($19) - ($20))|0;
  $scevgep = (($buf) + ($22)|0);
  $$0$lcssa = $26;$$01$lcssa = $scevgep;
 } else {
  $$0$lcssa = $15;$$01$lcssa = $14;
 }
 _memcpy(($ctx|0),($$01$lcssa|0),($$0$lcssa|0))|0;
 return;
}
function _FLAC__memory_alloc_aligned($bytes,$aligned_address) {
 $bytes = $bytes|0;
 $aligned_address = $aligned_address|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_safe_malloc_25($bytes)|0);
 HEAP32[$aligned_address>>2] = $0;
 return ($0|0);
}
function _FLAC__memory_alloc_aligned_int32_array($elements,$unaligned_pointer,$aligned_pointer) {
 $elements = $elements|0;
 $unaligned_pointer = $unaligned_pointer|0;
 $aligned_pointer = $aligned_pointer|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u = sp;
 $0 = ($elements>>>0)>(1073741823);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $elements << 2;
 $2 = (_FLAC__memory_alloc_aligned($1,$u)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$unaligned_pointer>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 HEAP32[$unaligned_pointer>>2] = $2;
 $6 = HEAP32[$u>>2]|0;
 HEAP32[$aligned_pointer>>2] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__memory_alloc_aligned_uint64_array($elements,$unaligned_pointer,$aligned_pointer) {
 $elements = $elements|0;
 $unaligned_pointer = $unaligned_pointer|0;
 $aligned_pointer = $aligned_pointer|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u = sp;
 $0 = ($elements>>>0)>(536870911);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $elements << 3;
 $2 = (_FLAC__memory_alloc_aligned($1,$u)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$unaligned_pointer>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 HEAP32[$unaligned_pointer>>2] = $2;
 $6 = HEAP32[$u>>2]|0;
 HEAP32[$aligned_pointer>>2] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__memory_alloc_aligned_unsigned_array($elements,$unaligned_pointer,$aligned_pointer) {
 $elements = $elements|0;
 $unaligned_pointer = $unaligned_pointer|0;
 $aligned_pointer = $aligned_pointer|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u = sp;
 $0 = ($elements>>>0)>(1073741823);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $elements << 2;
 $2 = (_FLAC__memory_alloc_aligned($1,$u)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$unaligned_pointer>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 HEAP32[$unaligned_pointer>>2] = $2;
 $6 = HEAP32[$u>>2]|0;
 HEAP32[$aligned_pointer>>2] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__memory_alloc_aligned_real_array($elements,$unaligned_pointer,$aligned_pointer) {
 $elements = $elements|0;
 $unaligned_pointer = $unaligned_pointer|0;
 $aligned_pointer = $aligned_pointer|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u = sp;
 $0 = ($elements>>>0)>(1073741823);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $elements << 2;
 $2 = (_FLAC__memory_alloc_aligned($1,$u)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$unaligned_pointer>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 HEAP32[$unaligned_pointer>>2] = $2;
 $6 = HEAP32[$u>>2]|0;
 HEAP32[$aligned_pointer>>2] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _safe_malloc_mul_2op_p($size1,$size2) {
 $size1 = $size1|0;
 $size2 = $size2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size1|0)!=(0);
 $1 = ($size2|0)!=(0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $2 = (_malloc(1)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = (4294967295 / ($size2>>>0))&-1;
 $4 = ($3>>>0)<($size1>>>0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = Math_imul($size2, $size1)|0;
 $6 = (_malloc($5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _safe_malloc_25($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $1 = $0&1;
 $$size = (($1) + ($size))|0;
 $2 = (_malloc($$size)|0);
 return ($2|0);
}
function _FLAC__stream_decoder_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_calloc(1,32)|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_calloc(1,6184)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  _free($7);
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_FLAC__bitreader_new()|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 56|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$5>>2]|0;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  _free($11);
  $15 = HEAP32[$0>>2]|0;
  _free($15);
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($11)) + 1128|0);
 HEAP32[$16>>2] = 16;
 $17 = HEAP32[1060>>2]|0;
 $18 = $17 >>> 3;
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($19)) + 1128|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($21, $18)|0;
 $23 = (_malloc($22)|0);
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($24)) + 1120|0);
 HEAP32[$25>>2] = $23;
 $26 = ($23|0)==(0|0);
 $27 = HEAP32[$5>>2]|0;
 if ($26) {
  $28 = ((($27)) + 56|0);
  $29 = HEAP32[$28>>2]|0;
  _FLAC__bitreader_delete($29);
  $30 = HEAP32[$5>>2]|0;
  _free($30);
  $31 = HEAP32[$0>>2]|0;
  _free($31);
  _free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $32 = ((($27)) + 60|0);
  $33 = ((($27)) + 3616|0);
  $34 = ((($27)) + 220|0);
  HEAP32[$34>>2] = 0;
  dest=$32; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;HEAP32[$33+20>>2]=0|0;HEAP32[$33+24>>2]=0|0;HEAP32[$33+28>>2]=0|0;
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($35)) + 224|0);
  HEAP32[$36>>2] = 0;
  $37 = HEAP32[$5>>2]|0;
  $38 = ((($37)) + 252|0);
  HEAP32[$38>>2] = 0;
  $39 = HEAP32[$5>>2]|0;
  $40 = ((($39)) + 124|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($40);
  $41 = ((($39)) + 136|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($41);
  $42 = ((($39)) + 148|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($42);
  $43 = ((($39)) + 160|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($43);
  $44 = ((($39)) + 172|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($44);
  $45 = ((($39)) + 184|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($45);
  $46 = ((($39)) + 196|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($46);
  $47 = ((($39)) + 208|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($47);
  $48 = ((($39)) + 52|0);
  HEAP32[$48>>2] = 0;
  _set_defaults_($0);
  $49 = HEAP32[$0>>2]|0;
  HEAP32[$49>>2] = 9;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__stream_decoder_delete($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decoder|0)==(0|0);
 if ($0) {
  return;
 }
 (_FLAC__stream_decoder_finish($decoder)|0);
 $1 = ((($decoder)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 1120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 _FLAC__bitreader_delete($8);
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 124|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($10);
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 136|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($12);
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 148|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($14);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 160|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($16);
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 172|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($18);
 $19 = HEAP32[$1>>2]|0;
 $20 = ((($19)) + 184|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($20);
 $21 = HEAP32[$1>>2]|0;
 $22 = ((($21)) + 196|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($22);
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 208|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($24);
 $25 = HEAP32[$1>>2]|0;
 _free($25);
 $26 = HEAP32[$decoder>>2]|0;
 _free($26);
 _free($decoder);
 return;
}
function _FLAC__stream_decoder_finish($decoder) {
 $decoder = $decoder|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$01 = 0, $md5_failed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$decoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($decoder)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 3756|0);
 $6 = ((($4)) + 3660|0);
 _FLAC__MD5Final($5,$6);
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 452|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 452|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 252|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 _FLAC__bitreader_free($16);
 $17 = HEAP32[$3>>2]|0;
 $19 = $17;$i$01 = 0;
 while(1) {
  $18 = (((($19)) + 60|0) + ($i$01<<2)|0);
  $20 = HEAP32[$18>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   $22 = ((($20)) + -16|0);
   _free($22);
   $23 = HEAP32[$3>>2]|0;
   $24 = (((($23)) + 60|0) + ($i$01<<2)|0);
   HEAP32[$24>>2] = 0;
  }
  $25 = HEAP32[$3>>2]|0;
  $26 = (((($25)) + 3616|0) + ($i$01<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   _free($27);
   $29 = HEAP32[$3>>2]|0;
   $30 = (((($29)) + 92|0) + ($i$01<<2)|0);
   HEAP32[$30>>2] = 0;
   $31 = HEAP32[$3>>2]|0;
   $32 = (((($31)) + 3616|0) + ($i$01<<2)|0);
   HEAP32[$32>>2] = 0;
  }
  $33 = (($i$01) + 1)|0;
  $34 = HEAP32[$3>>2]|0;
  $exitcond = ($33|0)==(8);
  if ($exitcond) {
   $$lcssa = $34;
   break;
  } else {
   $19 = $34;$i$01 = $33;
  }
 }
 $35 = ((($$lcssa)) + 220|0);
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$3>>2]|0;
 $37 = ((($36)) + 224|0);
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$3>>2]|0;
 $39 = ((($38)) + 52|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if (!($41)) {
  $42 = HEAP32[1568>>2]|0;
  $43 = ($40|0)==($42|0);
  if (!($43)) {
   (_fclose($40)|0);
  }
  $44 = HEAP32[$3>>2]|0;
  $45 = ((($44)) + 52|0);
  HEAP32[$45>>2] = 0;
 }
 $46 = HEAP32[$3>>2]|0;
 $47 = ((($46)) + 3648|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0);
 if ($49) {
  $md5_failed$0 = 1;
 } else {
  $50 = ((($46)) + 312|0);
  $51 = ((($46)) + 3756|0);
  $52 = (_memcmp($50,$51,16)|0);
  $53 = ($52|0)==(0);
  $$ = $53&1;
  $md5_failed$0 = $$;
 }
 $54 = HEAP32[$3>>2]|0;
 $55 = ((($54)) + 3656|0);
 HEAP32[$55>>2] = 0;
 _set_defaults_($decoder);
 $56 = HEAP32[$decoder>>2]|0;
 HEAP32[$56>>2] = 9;
 $$0 = $md5_failed$0;
 return ($$0|0);
}
function _FLAC__stream_decoder_init_stream($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data) {
 $decoder = $decoder|0;
 $read_callback = $read_callback|0;
 $seek_callback = $seek_callback|0;
 $tell_callback = $tell_callback|0;
 $length_callback = $length_callback|0;
 $eof_callback = $eof_callback|0;
 $write_callback = $write_callback|0;
 $metadata_callback = $metadata_callback|0;
 $error_callback = $error_callback|0;
 $client_data = $client_data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_init_stream_internal_($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data,0)|0);
 return ($0|0);
}
function _FLAC__stream_decoder_set_md5_checking($decoder,$value) {
 $decoder = $decoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$decoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 28|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_decoder_get_state($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$decoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FLAC__stream_decoder_get_md5_checking($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$decoder>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _FLAC__stream_decoder_get_total_samples($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 248|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $12 = 0;$13 = 0;
  tempRet0 = ($12);
  return ($13|0);
 }
 $5 = ((($1)) + 304|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;$13 = $8;
 tempRet0 = ($12);
 return ($13|0);
}
function _FLAC__stream_decoder_get_decode_position($decoder,$position) {
 $decoder = $decoder|0;
 $position = $position|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($1)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$3 & 31]($decoder,$position,$6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_FLAC__bitreader_is_consumed_byte_aligned($11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = (_FLAC__stream_decoder_get_input_bytes_unconsumed($decoder)|0);
 $15 = $position;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_i64Subtract(($17|0),($20|0),($14|0),0)|0);
 $22 = tempRet0;
 $23 = $position;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_decoder_get_input_bytes_unconsumed($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FLAC__bitreader_get_input_bits_unconsumed($3)|0);
 $5 = $4 >>> 3;
 return ($5|0);
}
function _FLAC__stream_decoder_flush($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3652|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$decoder>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(9);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 240|0);
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 3648|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_FLAC__bitreader_clear($18)|0);
 $20 = ($19|0)==(0);
 $21 = HEAP32[$decoder>>2]|0;
 if ($20) {
  HEAP32[$21>>2] = 8;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$21>>2] = 2;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__stream_decoder_reset($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FLAC__stream_decoder_flush($decoder)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($decoder)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 3652|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($3)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[1568>>2]|0;
  $10 = ($8|0)==($9|0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
  $11 = ((($3)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = ((($3)) + 48|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (FUNCTION_TABLE_iiiii[$12 & 15]($decoder,0,0,$15)|0);
   $17 = ($16|0)==(1);
   if ($17) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } else {
  HEAP32[$4>>2] = 0;
 }
 $18 = HEAP32[$decoder>>2]|0;
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 248|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 452|0);
 $23 = HEAP32[$22>>2]|0;
 _free($23);
 $24 = HEAP32[$2>>2]|0;
 $25 = ((($24)) + 452|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$2>>2]|0;
 $27 = ((($26)) + 252|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$decoder>>2]|0;
 $29 = ((($28)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$2>>2]|0;
 $32 = ((($31)) + 3648|0);
 HEAP32[$32>>2] = $30;
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 232|0);
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 $36 = ((($35)) + 228|0);
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$2>>2]|0;
 $38 = ((($37)) + 3660|0);
 _FLAC__MD5Init($38);
 $39 = HEAP32[$2>>2]|0;
 $40 = ((($39)) + 6160|0);
 $41 = $40;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$2>>2]|0;
 $46 = ((($45)) + 6176|0);
 HEAP32[$46>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_decoder_process_single($decoder) {
 $decoder = $decoder|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $got_a_frame = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $got_a_frame = sp;
 L1: while(1) {
  $0 = HEAP32[$decoder>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  switch ($1|0) {
  case 1:  {
   label = 4;
   break L1;
   break;
  }
  case 7: case 4:  {
   $$0 = 1;
   break L1;
   break;
  }
  case 0:  {
   $2 = (_find_metadata_($decoder)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $$0 = 0;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  case 2:  {
   $5 = (_frame_sync_($decoder)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 1;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  case 3:  {
   $7 = (_read_frame_($decoder,$got_a_frame,1)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
    break L1;
   }
   $9 = HEAP32[$got_a_frame>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    continue L1;
   } else {
    $$0 = 1;
    break L1;
   }
   break;
  }
  default: {
   label = 8;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $4 = (_read_metadata_($decoder)|0);
  $not$ = ($4|0)!=(0);
  $$ = $not$&1;
  $$0 = $$;
 }
 else if ((label|0) == 8) {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__stream_decoder_process_until_end_of_metadata($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$decoder>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  switch ($1|0) {
  case 7: case 4: case 3: case 2:  {
   $$0 = 1;
   break L1;
   break;
  }
  case 0:  {
   $2 = (_find_metadata_($decoder)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $$0 = 0;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  case 1:  {
   $4 = (_read_metadata_($decoder)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = 0;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  default: {
   label = 5;
   break L1;
  }
  }
 }
 if ((label|0) == 5) {
  $$0 = 0;
 }
 return ($$0|0);
}
function _FLAC__stream_decoder_process_until_end_of_stream($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy = sp;
 L1: while(1) {
  $0 = HEAP32[$decoder>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  switch ($1|0) {
  case 7: case 4:  {
   $$0 = 1;
   break L1;
   break;
  }
  case 0:  {
   $2 = (_find_metadata_($decoder)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $$0 = 0;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  case 1:  {
   $4 = (_read_metadata_($decoder)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = 0;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  case 2:  {
   $6 = (_frame_sync_($decoder)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = 1;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  case 3:  {
   $8 = (_read_frame_($decoder,$dummy,1)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
    break L1;
   } else {
    continue L1;
   }
   break;
  }
  default: {
   label = 7;
   break L1;
  }
  }
 }
 if ((label|0) == 7) {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _set_defaults_($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 48|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 608|0);
 _memset(($21|0),0,512)|0;
 $22 = HEAP32[$0>>2]|0;
 $23 = ((($22)) + 608|0);
 HEAP32[$23>>2] = 1;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 1124|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$decoder>>2]|0;
 $27 = ((($26)) + 28|0);
 HEAP32[$27>>2] = 0;
 return;
}
function _init_stream_internal_($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data,$is_ogg) {
 $decoder = $decoder|0;
 $read_callback = $read_callback|0;
 $seek_callback = $seek_callback|0;
 $tell_callback = $tell_callback|0;
 $length_callback = $length_callback|0;
 $eof_callback = $eof_callback|0;
 $write_callback = $write_callback|0;
 $metadata_callback = $metadata_callback|0;
 $error_callback = $error_callback|0;
 $client_data = $client_data|0;
 $is_ogg = $is_ogg|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$decoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9);
 if (!($2)) {
  $$0 = 5;
  return ($$0|0);
 }
 $3 = ($is_ogg|0)==(0);
 if (!($3)) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ($read_callback|0)==(0|0);
 $5 = ($write_callback|0)==(0|0);
 $or$cond = $4 | $5;
 $6 = ($error_callback|0)==(0|0);
 $or$cond3 = $or$cond | $6;
 if ($or$cond3) {
  $$0 = 2;
  return ($$0|0);
 }
 $7 = ($seek_callback|0)==(0|0);
 if (!($7)) {
  $8 = ($tell_callback|0)==(0|0);
  $9 = ($length_callback|0)==(0|0);
  $or$cond5 = $8 | $9;
  $10 = ($eof_callback|0)==(0|0);
  $or$cond7 = $or$cond5 | $10;
  if ($or$cond7) {
   $$0 = 2;
   return ($$0|0);
  }
 }
 $11 = ((($decoder)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 3524|0);
 _FLAC__cpu_info($13);
 $14 = HEAP32[$11>>2]|0;
 $15 = ((($14)) + 36|0);
 HEAP32[$15>>2] = 12;
 $16 = HEAP32[$11>>2]|0;
 $17 = ((($16)) + 40|0);
 HEAP32[$17>>2] = 13;
 $18 = HEAP32[$11>>2]|0;
 $19 = ((($18)) + 44|0);
 HEAP32[$19>>2] = 12;
 $20 = HEAP32[$11>>2]|0;
 $21 = ((($20)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_FLAC__bitreader_init($22,15,$decoder)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = HEAP32[$decoder>>2]|0;
  HEAP32[$25>>2] = 8;
  $$0 = 3;
  return ($$0|0);
 } else {
  $26 = HEAP32[$11>>2]|0;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $read_callback;
  $28 = HEAP32[$11>>2]|0;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $seek_callback;
  $30 = HEAP32[$11>>2]|0;
  $31 = ((($30)) + 12|0);
  HEAP32[$31>>2] = $tell_callback;
  $32 = HEAP32[$11>>2]|0;
  $33 = ((($32)) + 16|0);
  HEAP32[$33>>2] = $length_callback;
  $34 = HEAP32[$11>>2]|0;
  $35 = ((($34)) + 20|0);
  HEAP32[$35>>2] = $eof_callback;
  $36 = HEAP32[$11>>2]|0;
  $37 = ((($36)) + 24|0);
  HEAP32[$37>>2] = $write_callback;
  $38 = HEAP32[$11>>2]|0;
  $39 = ((($38)) + 28|0);
  HEAP32[$39>>2] = $metadata_callback;
  $40 = HEAP32[$11>>2]|0;
  $41 = ((($40)) + 32|0);
  HEAP32[$41>>2] = $error_callback;
  $42 = HEAP32[$11>>2]|0;
  $43 = ((($42)) + 48|0);
  HEAP32[$43>>2] = $client_data;
  $44 = HEAP32[$11>>2]|0;
  $45 = ((($44)) + 232|0);
  HEAP32[$45>>2] = 0;
  $46 = HEAP32[$11>>2]|0;
  $47 = ((($46)) + 228|0);
  HEAP32[$47>>2] = 0;
  $48 = HEAP32[$11>>2]|0;
  $49 = ((($48)) + 240|0);
  $50 = $49;
  $51 = $50;
  HEAP32[$51>>2] = 0;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = 0;
  $54 = HEAP32[$11>>2]|0;
  $55 = ((($54)) + 248|0);
  HEAP32[$55>>2] = 0;
  $56 = HEAP32[$11>>2]|0;
  $57 = ((($56)) + 3520|0);
  HEAP32[$57>>2] = 0;
  $58 = HEAP32[$decoder>>2]|0;
  $59 = ((($58)) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$11>>2]|0;
  $62 = ((($61)) + 3648|0);
  HEAP32[$62>>2] = $60;
  $63 = HEAP32[$11>>2]|0;
  $64 = ((($63)) + 3656|0);
  HEAP32[$64>>2] = 0;
  $65 = HEAP32[$11>>2]|0;
  $66 = ((($65)) + 3652|0);
  HEAP32[$66>>2] = 1;
  $67 = (_FLAC__stream_decoder_reset($decoder)|0);
  $68 = ($67|0)==(0);
  $$ = $68 ? 3 : 0;
  $$0 = $$;
  return ($$0|0);
 }
 return (0)|0;
}
function _safe_realloc_mul_2op_138($ptr,$size1,$size2) {
 $ptr = $ptr|0;
 $size1 = $size1|0;
 $size2 = $size2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size1|0)!=(0);
 $1 = ($size2|0)!=(0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $2 = (_realloc($ptr,0)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = (4294967295 / ($size2>>>0))&-1;
 $4 = ($3>>>0)<($size1>>>0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = Math_imul($size2, $size1)|0;
 $6 = (_safe_realloc_178($ptr,$5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _find_metadata_($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa32 = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first$0$ph12 = 0, $i$0$ph11 = 0, $i$09 = 0;
 var $i$09$lcssa30 = 0, $id$010 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ((($decoder)) + 4|0);
 $first$0$ph12 = 1;$i$0$ph11 = 0;
 L1: while(1) {
  $i$09 = $i$0$ph11;$id$010 = 0;
  while(1) {
   $1 = HEAP32[$0>>2]|0;
   $2 = ((($1)) + 3520|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $10 = ((($1)) + 56|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_FLAC__bitreader_read_raw_uint32($11,$x,8)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
     label = 21;
     break L1;
    }
   } else {
    $5 = ((($1)) + 3614|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = $6&255;
    HEAP32[$x>>2] = $7;
    $8 = HEAP32[$0>>2]|0;
    $9 = ((($8)) + 3520|0);
    HEAP32[$9>>2] = 0;
   }
   $14 = HEAP32[$x>>2]|0;
   $15 = (2592 + ($i$09)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $i$09$lcssa30 = $i$09;
    label = 7;
    break;
   }
   $21 = ($id$010>>>0)>(2);
   if ($21) {
    $$0 = 0;
    label = 21;
    break L1;
   }
   $22 = (3467 + ($id$010)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($14|0)==($24|0);
   if (!($25)) {
    $$lcssa32 = $14;
    break;
   }
   $26 = (($id$010) + 1)|0;
   $27 = ($26|0)==(3);
   if (!($27)) {
    $i$09 = 0;$id$010 = $26;
    continue;
   }
   $28 = (_skip_id3v2_tag_($decoder)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $$0 = 0;
    label = 21;
    break L1;
   } else {
    $i$09 = 0;$id$010 = 3;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $19 = (($i$09$lcssa30) + 1)|0;
   $20 = ($19>>>0)<(4);
   if ($20) {
    $first$0$ph12 = 1;$i$0$ph11 = $19;
    continue;
   } else {
    label = 20;
    break;
   }
  }
  $30 = ($$lcssa32|0)==(255);
  do {
   if ($30) {
    $31 = $$lcssa32&255;
    $32 = HEAP32[$0>>2]|0;
    $33 = ((($32)) + 3612|0);
    HEAP8[$33>>0] = $31;
    $34 = HEAP32[$0>>2]|0;
    $35 = ((($34)) + 56|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_FLAC__bitreader_read_raw_uint32($36,$x,8)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $$0 = 0;
     label = 21;
     break L1;
    }
    $39 = HEAP32[$x>>2]|0;
    $40 = ($39|0)==(255);
    if ($40) {
     $41 = $39&255;
     $42 = HEAP32[$0>>2]|0;
     $43 = ((($42)) + 3614|0);
     HEAP8[$43>>0] = $41;
     $44 = HEAP32[$0>>2]|0;
     $45 = ((($44)) + 3520|0);
     HEAP32[$45>>2] = 1;
     break;
    } else {
     $$mask = $39 & -2;
     $46 = ($$mask|0)==(248);
     if ($46) {
      $$lcssa = $39;
      label = 17;
      break L1;
     } else {
      break;
     }
    }
   }
  } while(0);
  $51 = ($first$0$ph12|0)==(0);
  if ($51) {
   $first$0$ph12 = 0;$i$0$ph11 = 0;
   continue;
  }
  _send_error_to_client_($decoder,0);
  $first$0$ph12 = 0;$i$0$ph11 = 0;
 }
 if ((label|0) == 17) {
  $47 = $$lcssa&255;
  $48 = HEAP32[$0>>2]|0;
  $49 = ((($48)) + 3613|0);
  HEAP8[$49>>0] = $47;
  $50 = HEAP32[$decoder>>2]|0;
  HEAP32[$50>>2] = 3;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 20) {
  $52 = HEAP32[$decoder>>2]|0;
  HEAP32[$52>>2] = 1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _read_metadata_($decoder) {
 $decoder = $decoder|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $i$020 = 0, $i$121 = 0, $length = 0, $not$ = 0, $not$13 = 0, $not$14 = 0, $not$15 = 0, $not$16 = 0, $not$17 = 0, $ok$09 = 0, $real_length$0 = 0, $skip_it$0 = 0, $type = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $x = sp + 184|0;
 $type = sp + 180|0;
 $length = sp + 176|0;
 $block = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[1108>>2]|0;
 $5 = (_FLAC__bitreader_read_raw_uint32($3,$x,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $7 = HEAP32[$x>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $8&1;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[1064>>2]|0;
 $14 = (_FLAC__bitreader_read_raw_uint32($12,$type,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[1068>>2]|0;
 $20 = (_FLAC__bitreader_read_raw_uint32($18,$length,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $22 = HEAP32[$type>>2]|0;
 L10: do {
  switch ($22|0) {
  case 0:  {
   $23 = HEAP32[$length>>2]|0;
   $24 = (_read_metadata_streaminfo_($decoder,$9,$23)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = ((($26)) + 248|0);
   HEAP32[$27>>2] = 1;
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 312|0);
   $30 = (_memcmp($29,3450,16)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = ((($28)) + 3648|0);
    HEAP32[$32>>2] = 0;
   }
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 3656|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = ((($33)) + 608|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(0);
    if (!($39)) {
     $40 = ((($33)) + 28|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0|0);
     if (!($42)) {
      $43 = ((($33)) + 256|0);
      $44 = ((($33)) + 48|0);
      $45 = HEAP32[$44>>2]|0;
      FUNCTION_TABLE_viii[$41 & 15]($decoder,$43,$45);
     }
    }
   }
   break;
  }
  case 3:  {
   $46 = HEAP32[$0>>2]|0;
   $47 = ((($46)) + 252|0);
   HEAP32[$47>>2] = 0;
   $48 = HEAP32[$length>>2]|0;
   $49 = (_read_metadata_seektable_($decoder,$9,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   $51 = HEAP32[$0>>2]|0;
   $52 = ((($51)) + 252|0);
   HEAP32[$52>>2] = 1;
   $53 = HEAP32[$0>>2]|0;
   $54 = ((($53)) + 3656|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = ((($53)) + 620|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(0);
    if (!($59)) {
     $60 = ((($53)) + 28|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if (!($62)) {
      $63 = ((($53)) + 432|0);
      $64 = ((($53)) + 48|0);
      $65 = HEAP32[$64>>2]|0;
      FUNCTION_TABLE_viii[$61 & 15]($decoder,$63,$65);
     }
    }
   }
   break;
  }
  default: {
   $66 = HEAP32[$0>>2]|0;
   $67 = (((($66)) + 608|0) + ($22<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)!=(0);
   $70 = $69&1;
   $71 = $70 ^ 1;
   $72 = HEAP32[$length>>2]|0;
   _memset(($block|0),0,176)|0;
   $73 = ((($block)) + 4|0);
   HEAP32[$73>>2] = $9;
   $74 = HEAP32[$type>>2]|0;
   HEAP32[$block>>2] = $74;
   $75 = HEAP32[$length>>2]|0;
   $76 = ((($block)) + 8|0);
   HEAP32[$76>>2] = $75;
   $77 = HEAP32[$type>>2]|0;
   $78 = ($77|0)==(2);
   do {
    if ($78) {
     $79 = HEAP32[$0>>2]|0;
     $80 = ((($79)) + 56|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($block)) + 16|0);
     $83 = HEAP32[1060>>2]|0;
     $84 = $83 >>> 3;
     $85 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($81,$82,$84)|0);
     $86 = ($85|0)==(0);
     if (!($86)) {
      $87 = HEAP32[1060>>2]|0;
      $88 = $87 >>> 3;
      $89 = ($72>>>0)<($88>>>0);
      if ($89) {
       $90 = HEAP32[$decoder>>2]|0;
       HEAP32[$90>>2] = 8;
       $$1 = 0;
       STACKTOP = sp;return ($$1|0);
      } else {
       $91 = (($72) - ($88))|0;
       $92 = HEAP32[$0>>2]|0;
       $93 = ((($92)) + 1124|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($94|0)==(0);
       if ($95) {
        $real_length$0 = $91;$skip_it$0 = $71;
        label = 23;
        break;
       }
       $96 = (_has_id_filtered_($decoder,$82)|0);
       $97 = ($96|0)==(0);
       $$ = $97 ? $71 : $70;
       $real_length$0 = $91;$skip_it$0 = $$;
       label = 23;
       break;
      }
     }
    } else {
     $real_length$0 = $72;$skip_it$0 = $71;
     label = 23;
    }
   } while(0);
   do {
    if ((label|0) == 23) {
     $98 = ($skip_it$0|0)==(0);
     if ($98) {
      $104 = HEAP32[$type>>2]|0;
      L24: do {
       switch ($104|0) {
       case 1:  {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + 56|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($107,$real_length$0)|0);
        $not$16 = ($108|0)==(0);
        if ($not$16) {
         $ok$09 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 2:  {
        $109 = ($real_length$0|0)==(0);
        if ($109) {
         $118 = ((($block)) + 20|0);
         HEAP32[$118>>2] = 0;
         label = 40;
         break L24;
        }
        $110 = (_malloc($real_length$0)|0);
        $111 = ((($block)) + 20|0);
        HEAP32[$111>>2] = $110;
        $112 = ($110|0)==(0|0);
        if ($112) {
         $113 = HEAP32[$decoder>>2]|0;
         HEAP32[$113>>2] = 8;
         $ok$09 = 0;
         break L24;
        } else {
         $114 = HEAP32[$0>>2]|0;
         $115 = ((($114)) + 56|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($116,$110,$real_length$0)|0);
         $not$15 = ($117|0)==(0);
         if ($not$15) {
          $ok$09 = 0;
          break L24;
         } else {
          label = 40;
          break L24;
         }
        }
        break;
       }
       case 4:  {
        $119 = ((($block)) + 16|0);
        $120 = (_read_metadata_vorbiscomment_($decoder,$119,$real_length$0)|0);
        $not$14 = ($120|0)==(0);
        if ($not$14) {
         $ok$09 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 5:  {
        $121 = ((($block)) + 16|0);
        $122 = (_read_metadata_cuesheet_($decoder,$121)|0);
        $not$13 = ($122|0)==(0);
        if ($not$13) {
         $ok$09 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 6:  {
        $123 = ((($block)) + 16|0);
        $124 = (_read_metadata_picture_($decoder,$123)|0);
        $not$ = ($124|0)==(0);
        if ($not$) {
         $ok$09 = 0;
        } else {
         label = 40;
        }
        break;
       }
       case 3: case 0:  {
        label = 40;
        break;
       }
       default: {
        $125 = ($real_length$0|0)==(0);
        if ($125) {
         $130 = ((($block)) + 16|0);
         HEAP32[$130>>2] = 0;
         label = 40;
         break L24;
        }
        $126 = (_malloc($real_length$0)|0);
        $127 = ((($block)) + 16|0);
        HEAP32[$127>>2] = $126;
        $128 = ($126|0)==(0|0);
        if ($128) {
         $129 = HEAP32[$decoder>>2]|0;
         HEAP32[$129>>2] = 8;
         $ok$09 = 0;
         break L24;
        } else {
         $131 = HEAP32[$0>>2]|0;
         $132 = ((($131)) + 56|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($133,$126,$real_length$0)|0);
         $not$17 = ($134|0)==(0);
         if ($not$17) {
          $ok$09 = 0;
          break L24;
         } else {
          label = 40;
          break L24;
         }
        }
       }
       }
      } while(0);
      if ((label|0) == 40) {
       $135 = HEAP32[$0>>2]|0;
       $136 = ((($135)) + 3656|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ($137|0)==(0);
       if ($138) {
        $139 = ((($135)) + 28|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ($140|0)==(0|0);
        if ($141) {
         $ok$09 = 1;
        } else {
         $142 = ((($135)) + 48|0);
         $143 = HEAP32[$142>>2]|0;
         FUNCTION_TABLE_viii[$140 & 15]($decoder,$block,$143);
         $ok$09 = 1;
        }
       } else {
        $ok$09 = 1;
       }
      }
      $144 = HEAP32[$type>>2]|0;
      switch ($144|0) {
      case 1:  {
       break;
      }
      case 2:  {
       $145 = ((($block)) + 20|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ($146|0)==(0|0);
       if (!($147)) {
        _free($146);
       }
       break;
      }
      case 4:  {
       $148 = ((($block)) + 20|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($149|0)==(0|0);
       if (!($150)) {
        _free($149);
       }
       $151 = ((($block)) + 24|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($152|0)==(0);
       if (!($153)) {
        $154 = HEAP32[$151>>2]|0;
        $155 = ($154|0)==(0);
        if (!($155)) {
         $156 = ((($block)) + 28|0);
         $i$020 = 0;
         while(1) {
          $157 = HEAP32[$156>>2]|0;
          $158 = (((($157) + ($i$020<<3)|0)) + 4|0);
          $159 = HEAP32[$158>>2]|0;
          $160 = ($159|0)==(0|0);
          if (!($160)) {
           _free($159);
          }
          $161 = (($i$020) + 1)|0;
          $162 = HEAP32[$151>>2]|0;
          $163 = ($161>>>0)<($162>>>0);
          if ($163) {
           $i$020 = $161;
          } else {
           break;
          }
         }
        }
       }
       $164 = ((($block)) + 28|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==(0|0);
       if (!($166)) {
        _free($165);
       }
       break;
      }
      case 5:  {
       $167 = ((($block)) + 164|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0);
       if (!($169)) {
        $170 = ((($block)) + 168|0);
        $i$121 = 0;
        while(1) {
         $171 = HEAP32[$170>>2]|0;
         $172 = (((($171) + ($i$121<<5)|0)) + 24|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = ($173|0)==(0|0);
         if (!($174)) {
          _free($173);
         }
         $175 = (($i$121) + 1)|0;
         $176 = HEAP32[$167>>2]|0;
         $177 = ($175>>>0)<($176>>>0);
         if ($177) {
          $i$121 = $175;
         } else {
          break;
         }
        }
       }
       $178 = ((($block)) + 168|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if (!($180)) {
        _free($179);
       }
       break;
      }
      case 6:  {
       $181 = ((($block)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        _free($182);
       }
       $184 = ((($block)) + 24|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        _free($185);
       }
       $187 = ((($block)) + 48|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if (!($189)) {
        _free($188);
       }
       break;
      }
      default: {
       $190 = ((($block)) + 16|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = ($191|0)==(0|0);
       if (!($192)) {
        _free($191);
       }
      }
      }
      if (!($ok$09)) {
       break;
      }
     } else {
      $99 = HEAP32[$0>>2]|0;
      $100 = ((($99)) + 56|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($101,$real_length$0)|0);
      $103 = ($102|0)==(0);
      if ($103) {
       break;
      }
     }
     break L10;
    }
   } while(0);
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  }
 } while(0);
 if (!($8)) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $193 = HEAP32[$0>>2]|0;
 $194 = ((($193)) + 6160|0);
 $195 = (_FLAC__stream_decoder_get_decode_position($decoder,$194)|0);
 $196 = ($195|0)==(0);
 if ($196) {
  $197 = HEAP32[$0>>2]|0;
  $198 = ((($197)) + 6160|0);
  $199 = $198;
  $200 = $199;
  HEAP32[$200>>2] = 0;
  $201 = (($199) + 4)|0;
  $202 = $201;
  HEAP32[$202>>2] = 0;
 }
 $203 = HEAP32[$decoder>>2]|0;
 HEAP32[$203>>2] = 2;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _frame_sync_($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $$lcssa = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $first$0 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = (_FLAC__stream_decoder_get_total_samples($decoder)|0);
 $1 = tempRet0;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if (!($4)) {
  $5 = ((($decoder)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 240|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)<($1>>>0);
  $15 = ($10>>>0)<($0>>>0);
  $16 = ($13|0)==($1|0);
  $17 = $16 & $15;
  $18 = $14 | $17;
  if (!($18)) {
   $19 = HEAP32[$decoder>>2]|0;
   HEAP32[$19>>2] = 4;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $20 = ((($decoder)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_FLAC__bitreader_is_consumed_byte_aligned($23)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = HEAP32[$20>>2]|0;
  $27 = ((($26)) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_FLAC__bitreader_bits_left_for_byte_alignment($28)|0);
  $30 = (_FLAC__bitreader_read_raw_uint32($28,$x,$29)|0);
  $31 = ($30|0)==(0);
  if ($31) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $first$0 = 1;
  }
 } else {
  $first$0 = 1;
 }
 L9: while(1) {
  $32 = HEAP32[$20>>2]|0;
  $33 = ((($32)) + 3520|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $41 = ((($32)) + 56|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_FLAC__bitreader_read_raw_uint32($42,$x,8)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $$0 = 0;
    label = 17;
    break;
   }
  } else {
   $36 = ((($32)) + 3614|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   HEAP32[$x>>2] = $38;
   $39 = HEAP32[$20>>2]|0;
   $40 = ((($39)) + 3520|0);
   HEAP32[$40>>2] = 0;
  }
  $45 = HEAP32[$x>>2]|0;
  $46 = ($45|0)==(255);
  do {
   if ($46) {
    $47 = $45&255;
    $48 = HEAP32[$20>>2]|0;
    $49 = ((($48)) + 3612|0);
    HEAP8[$49>>0] = $47;
    $50 = HEAP32[$20>>2]|0;
    $51 = ((($50)) + 56|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (_FLAC__bitreader_read_raw_uint32($52,$x,8)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $$0 = 0;
     label = 17;
     break L9;
    }
    $55 = HEAP32[$x>>2]|0;
    $56 = ($55|0)==(255);
    if ($56) {
     $57 = $55&255;
     $58 = HEAP32[$20>>2]|0;
     $59 = ((($58)) + 3614|0);
     HEAP8[$59>>0] = $57;
     $60 = HEAP32[$20>>2]|0;
     $61 = ((($60)) + 3520|0);
     HEAP32[$61>>2] = 1;
     break;
    } else {
     $$mask = $55 & -2;
     $62 = ($$mask|0)==(248);
     if ($62) {
      $$lcssa = $55;
      label = 14;
      break L9;
     } else {
      break;
     }
    }
   }
  } while(0);
  $67 = ($first$0|0)==(0);
  if ($67) {
   $first$0 = 0;
   continue;
  }
  _send_error_to_client_($decoder,0);
  $first$0 = 0;
 }
 if ((label|0) == 14) {
  $63 = $$lcssa&255;
  $64 = HEAP32[$20>>2]|0;
  $65 = ((($64)) + 3613|0);
  HEAP8[$65>>0] = $63;
  $66 = HEAP32[$decoder>>2]|0;
  HEAP32[$66>>2] = 3;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _read_frame_($decoder,$got_a_frame,$do_full_decode) {
 $decoder = $decoder|0;
 $got_a_frame = $got_a_frame|0;
 $do_full_decode = $do_full_decode|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bps$0 = 0;
 var $channel$018 = 0, $channel$116 = 0, $i$012 = 0, $i$114 = 0, $i$211 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 HEAP32[$got_a_frame>>2] = 0;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3612|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (8 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 8;
 $8 = $6 >>> 8;
 $9 = ((($1)) + 3613|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 ^ $8;
 $13 = (8 + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 ^ $7;
 $16 = ((($1)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $15&65535;
 _FLAC__bitreader_reset_read_crc16($17,$18);
 $19 = (_read_frame_header_($decoder)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$decoder>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(2);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 1136|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($24)) + 1144|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_allocate_output_($decoder,$26,$28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = ((($31)) + 1144|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 L10: do {
  if (!($34)) {
   $41 = $31;$channel$018 = 0;
   while(1) {
    $40 = ((($41)) + 1152|0);
    $42 = HEAP32[$40>>2]|0;
    $43 = ((($41)) + 1148|0);
    $44 = HEAP32[$43>>2]|0;
    switch ($44|0) {
    case 3:  {
     $49 = ($channel$018|0)==(1);
     $50 = $49&1;
     $$2 = (($42) + ($50))|0;
     $bps$0 = $$2;
     break;
    }
    case 1:  {
     $45 = ($channel$018|0)==(1);
     $46 = $45&1;
     $$ = (($42) + ($46))|0;
     $bps$0 = $$;
     break;
    }
    case 2:  {
     $47 = ($channel$018|0)==(0);
     $48 = $47&1;
     $$1 = (($42) + ($48))|0;
     $bps$0 = $$1;
     break;
    }
    default: {
     $bps$0 = $42;
    }
    }
    $51 = (_read_subframe_($decoder,$channel$018,$bps$0,$do_full_decode)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $$0 = 0;
     label = 36;
     break;
    }
    $53 = HEAP32[$decoder>>2]|0;
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(2);
    $38 = (($channel$018) + 1)|0;
    if ($55) {
     $$0 = 1;
     label = 36;
     break;
    }
    $35 = HEAP32[$0>>2]|0;
    $36 = ((($35)) + 1144|0);
    $37 = HEAP32[$36>>2]|0;
    $39 = ($38>>>0)<($37>>>0);
    if ($39) {
     $41 = $35;$channel$018 = $38;
    } else {
     break L10;
    }
   }
   if ((label|0) == 36) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $56 = (_read_zero_padding_($decoder)|0);
 $57 = ($56|0)==(0);
 if ($57) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = HEAP32[$decoder>>2]|0;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(2);
 if ($60) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP32[$0>>2]|0;
 $62 = ((($61)) + 56|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (_FLAC__bitreader_get_read_crc16($63)|0);
 $65 = HEAP32[$0>>2]|0;
 $66 = ((($65)) + 56|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[1120>>2]|0;
 $69 = (_FLAC__bitreader_read_raw_uint32($67,$x,$68)|0);
 $70 = ($69|0)==(0);
 if ($70) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = $64&65535;
 $72 = HEAP32[$x>>2]|0;
 $73 = ($71|0)==($72|0);
 L33: do {
  if ($73) {
   $74 = ($do_full_decode|0)==(0);
   if (!($74)) {
    $75 = HEAP32[$0>>2]|0;
    $76 = ((($75)) + 1148|0);
    $77 = HEAP32[$76>>2]|0;
    switch ($77|0) {
    case 3:  {
     $90 = HEAP32[$0>>2]|0;
     $91 = ((($90)) + 1136|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)==(0);
     if ($93) {
      break L33;
     }
     $94 = HEAP32[$0>>2]|0;
     $95 = ((($94)) + 64|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($94)) + 1136|0);
     $125 = $90;$i$211 = 0;
     while(1) {
      $124 = ((($125)) + 60|0);
      $126 = HEAP32[$124>>2]|0;
      $127 = (($126) + ($i$211<<2)|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($125)) + 64|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (($130) + ($i$211<<2)|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = $128 << 1;
      $134 = $132 & 1;
      $135 = $134 | $133;
      $136 = (($135) + ($132))|0;
      $137 = $136 >> 1;
      HEAP32[$127>>2] = $137;
      $138 = (($135) - ($132))|0;
      $139 = $138 >> 1;
      $140 = (($96) + ($i$211<<2)|0);
      HEAP32[$140>>2] = $139;
      $141 = (($i$211) + 1)|0;
      $142 = HEAP32[$97>>2]|0;
      $143 = ($141>>>0)<($142>>>0);
      if ($143) {
       $125 = $94;$i$211 = $141;
      } else {
       break;
      }
     }
     break;
    }
    case 1:  {
     $84 = HEAP32[$0>>2]|0;
     $85 = ((($84)) + 1136|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)==(0);
     if ($87) {
      break L33;
     }
     $88 = HEAP32[$0>>2]|0;
     $89 = ((($88)) + 1136|0);
     $99 = $84;$i$012 = 0;
     while(1) {
      $98 = ((($99)) + 60|0);
      $100 = HEAP32[$98>>2]|0;
      $101 = (($100) + ($i$012<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ((($99)) + 64|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($104) + ($i$012<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($102) - ($106))|0;
      HEAP32[$105>>2] = $107;
      $108 = (($i$012) + 1)|0;
      $109 = HEAP32[$89>>2]|0;
      $110 = ($108>>>0)<($109>>>0);
      if ($110) {
       $99 = $88;$i$012 = $108;
      } else {
       break;
      }
     }
     break;
    }
    case 2:  {
     $78 = HEAP32[$0>>2]|0;
     $79 = ((($78)) + 1136|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(0);
     if ($81) {
      break L33;
     }
     $82 = HEAP32[$0>>2]|0;
     $83 = ((($82)) + 1136|0);
     $112 = $78;$i$114 = 0;
     while(1) {
      $111 = ((($112)) + 64|0);
      $113 = HEAP32[$111>>2]|0;
      $114 = (($113) + ($i$114<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($112)) + 60|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($117) + ($i$114<<2)|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (($119) + ($115))|0;
      HEAP32[$118>>2] = $120;
      $121 = (($i$114) + 1)|0;
      $122 = HEAP32[$83>>2]|0;
      $123 = ($121>>>0)<($122>>>0);
      if ($123) {
       $112 = $82;$i$114 = $121;
      } else {
       break;
      }
     }
     break;
    }
    default: {
     break L33;
    }
    }
   }
  } else {
   _send_error_to_client_($decoder,2);
   $144 = ($do_full_decode|0)==(0);
   if (!($144)) {
    $145 = HEAP32[$0>>2]|0;
    $146 = ((($145)) + 1144|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ($147|0)==(0);
    if (!($148)) {
     $150 = $145;$channel$116 = 0;
     while(1) {
      $149 = (((($150)) + 60|0) + ($channel$116<<2)|0);
      $151 = HEAP32[$149>>2]|0;
      $152 = ((($150)) + 1136|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $153 << 2;
      _memset(($151|0),0,($154|0))|0;
      $155 = (($channel$116) + 1)|0;
      $156 = HEAP32[$0>>2]|0;
      $157 = ((($156)) + 1144|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($155>>>0)<($158>>>0);
      if ($159) {
       $150 = $156;$channel$116 = $155;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$got_a_frame>>2] = 1;
 $160 = HEAP32[$0>>2]|0;
 $161 = ((($160)) + 232|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)==(0);
 if (!($163)) {
  $164 = ((($160)) + 228|0);
  HEAP32[$164>>2] = $162;
 }
 $165 = HEAP32[$0>>2]|0;
 $166 = ((($165)) + 1144|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = HEAP32[$decoder>>2]|0;
 $169 = ((($168)) + 8|0);
 HEAP32[$169>>2] = $167;
 $170 = HEAP32[$0>>2]|0;
 $171 = ((($170)) + 1148|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = HEAP32[$decoder>>2]|0;
 $174 = ((($173)) + 12|0);
 HEAP32[$174>>2] = $172;
 $175 = HEAP32[$0>>2]|0;
 $176 = ((($175)) + 1152|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = HEAP32[$decoder>>2]|0;
 $179 = ((($178)) + 16|0);
 HEAP32[$179>>2] = $177;
 $180 = HEAP32[$0>>2]|0;
 $181 = ((($180)) + 1140|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = HEAP32[$decoder>>2]|0;
 $184 = ((($183)) + 20|0);
 HEAP32[$184>>2] = $182;
 $185 = HEAP32[$0>>2]|0;
 $186 = ((($185)) + 1136|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = HEAP32[$decoder>>2]|0;
 $189 = ((($188)) + 24|0);
 HEAP32[$189>>2] = $187;
 $190 = HEAP32[$0>>2]|0;
 $191 = ((($190)) + 1160|0);
 $192 = $191;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (($192) + 4)|0;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = ((($190)) + 1136|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (_i64Add(($199|0),0,($194|0),($197|0))|0);
 $201 = tempRet0;
 $202 = ((($190)) + 240|0);
 $203 = $202;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $205 = (($203) + 4)|0;
 $206 = $205;
 HEAP32[$206>>2] = $201;
 $207 = ($do_full_decode|0)==(0);
 if (!($207)) {
  $208 = HEAP32[$0>>2]|0;
  $209 = ((($208)) + 1136|0);
  $210 = ((($208)) + 60|0);
  $211 = (_write_audio_frame_to_client_($decoder,$209,$210)|0);
  $212 = ($211|0)==(0);
  if (!($212)) {
   $213 = HEAP32[$decoder>>2]|0;
   HEAP32[$213>>2] = 7;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $214 = HEAP32[$decoder>>2]|0;
 HEAP32[$214>>2] = 2;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _read_frame_header_($decoder) {
 $decoder = $decoder|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_x = 0, $_x1 = 0, $blocksize_hint$0 = 0, $cond = 0, $is_unparseable$1 = 0, $is_unparseable$2 = 0, $is_unparseable$3 = 0, $is_unparseable$4 = 0, $raw_header = 0, $raw_header_len = 0, $sample_rate_hint$0 = 0, $x = 0;
 var $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $x = sp + 20|0;
 $xx = sp;
 $raw_header = sp + 24|0;
 $raw_header_len = sp + 16|0;
 $_x = sp + 12|0;
 $_x1 = sp + 8|0;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3612|0);
 $3 = HEAP8[$2>>0]|0;
 HEAP8[$raw_header>>0] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 3613|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($raw_header)) + 1|0);
 HEAP8[$7>>0] = $6;
 HEAP32[$raw_header_len>>2] = 2;
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8&255) >>> 1;
 $$lobit = $9 & 1;
 $$ = $$lobit&255;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_FLAC__bitreader_read_raw_uint32($12,$x,8)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$x>>2]|0;
 $16 = ($15|0)==(255);
 $17 = $15&255;
 if ($16) {
  $$lcssa = $17;
 } else {
  $23 = HEAP32[$raw_header_len>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$raw_header_len>>2] = $24;
  $25 = (($raw_header) + ($23)|0);
  HEAP8[$25>>0] = $17;
  $26 = HEAP32[$0>>2]|0;
  $27 = ((($26)) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_FLAC__bitreader_read_raw_uint32($28,$x,8)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $335 = HEAP32[$x>>2]|0;
  $336 = ($335|0)==(255);
  $337 = $335&255;
  if ($336) {
   $$lcssa = $337;
  } else {
   $338 = HEAP32[$raw_header_len>>2]|0;
   $339 = (($338) + 1)|0;
   HEAP32[$raw_header_len>>2] = $339;
   $340 = (($raw_header) + ($338)|0);
   HEAP8[$340>>0] = $337;
   $45 = ((($raw_header)) + 2|0);
   $341 = HEAP8[$45>>0]|0;
   $342 = $341&255;
   $343 = $342 >>> 4;
   HEAP32[$x>>2] = $343;
   switch ($343|0) {
   case 0:  {
    $blocksize_hint$0 = 0;$is_unparseable$1 = 1;
    break;
   }
   case 1:  {
    $31 = HEAP32[$0>>2]|0;
    $32 = ((($31)) + 1136|0);
    HEAP32[$32>>2] = 192;
    $blocksize_hint$0 = 0;$is_unparseable$1 = $$;
    break;
   }
   case 5: case 4: case 3: case 2:  {
    $33 = HEAP32[$x>>2]|0;
    $34 = (($33) + -2)|0;
    $35 = 576 << $34;
    $36 = HEAP32[$0>>2]|0;
    $37 = ((($36)) + 1136|0);
    HEAP32[$37>>2] = $35;
    $blocksize_hint$0 = 0;$is_unparseable$1 = $$;
    break;
   }
   case 7: case 6:  {
    $38 = HEAP32[$x>>2]|0;
    $blocksize_hint$0 = $38;$is_unparseable$1 = $$;
    break;
   }
   case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8:  {
    $39 = HEAP32[$x>>2]|0;
    $40 = (($39) + -8)|0;
    $41 = 256 << $40;
    $42 = HEAP32[$0>>2]|0;
    $43 = ((($42)) + 1136|0);
    HEAP32[$43>>2] = $41;
    $blocksize_hint$0 = 0;$is_unparseable$1 = $$;
    break;
   }
   default: {
    $blocksize_hint$0 = 0;$is_unparseable$1 = $$;
   }
   }
   $44 = HEAP8[$45>>0]|0;
   $46 = $44&255;
   $47 = $46 & 15;
   HEAP32[$x>>2] = $47;
   do {
    switch ($47|0) {
    case 0:  {
     $48 = HEAP32[$0>>2]|0;
     $49 = ((($48)) + 248|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0);
     if ($51) {
      $is_unparseable$2 = 1;$sample_rate_hint$0 = 0;
     } else {
      $52 = ((($48)) + 288|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($48)) + 1140|0);
      HEAP32[$54>>2] = $53;
      $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     }
     break;
    }
    case 1:  {
     $55 = HEAP32[$0>>2]|0;
     $56 = ((($55)) + 1140|0);
     HEAP32[$56>>2] = 88200;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 2:  {
     $57 = HEAP32[$0>>2]|0;
     $58 = ((($57)) + 1140|0);
     HEAP32[$58>>2] = 176400;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 3:  {
     $59 = HEAP32[$0>>2]|0;
     $60 = ((($59)) + 1140|0);
     HEAP32[$60>>2] = 192000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 4:  {
     $61 = HEAP32[$0>>2]|0;
     $62 = ((($61)) + 1140|0);
     HEAP32[$62>>2] = 8000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 5:  {
     $63 = HEAP32[$0>>2]|0;
     $64 = ((($63)) + 1140|0);
     HEAP32[$64>>2] = 16000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 6:  {
     $65 = HEAP32[$0>>2]|0;
     $66 = ((($65)) + 1140|0);
     HEAP32[$66>>2] = 22050;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 7:  {
     $67 = HEAP32[$0>>2]|0;
     $68 = ((($67)) + 1140|0);
     HEAP32[$68>>2] = 24000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 8:  {
     $69 = HEAP32[$0>>2]|0;
     $70 = ((($69)) + 1140|0);
     HEAP32[$70>>2] = 32000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 9:  {
     $71 = HEAP32[$0>>2]|0;
     $72 = ((($71)) + 1140|0);
     HEAP32[$72>>2] = 44100;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 10:  {
     $73 = HEAP32[$0>>2]|0;
     $74 = ((($73)) + 1140|0);
     HEAP32[$74>>2] = 48000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 11:  {
     $75 = HEAP32[$0>>2]|0;
     $76 = ((($75)) + 1140|0);
     HEAP32[$76>>2] = 96000;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
     break;
    }
    case 14: case 13: case 12:  {
     $77 = HEAP32[$x>>2]|0;
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = $77;
     break;
    }
    case 15:  {
     _send_error_to_client_($decoder,1);
     $78 = HEAP32[$decoder>>2]|0;
     HEAP32[$78>>2] = 2;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    default: {
     $is_unparseable$2 = $is_unparseable$1;$sample_rate_hint$0 = 0;
    }
    }
   } while(0);
   $79 = ((($raw_header)) + 3|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $81 >>> 4;
   HEAP32[$x>>2] = $82;
   $83 = $82 & 8;
   $84 = ($83|0)==(0);
   L35: do {
    if ($84) {
     $95 = (($82) + 1)|0;
     $96 = HEAP32[$0>>2]|0;
     $97 = ((($96)) + 1144|0);
     HEAP32[$97>>2] = $95;
     $98 = HEAP32[$0>>2]|0;
     $99 = ((($98)) + 1148|0);
     HEAP32[$99>>2] = 0;
     $is_unparseable$3 = $is_unparseable$2;
    } else {
     $85 = HEAP32[$0>>2]|0;
     $86 = ((($85)) + 1144|0);
     HEAP32[$86>>2] = 2;
     $87 = HEAP32[$x>>2]|0;
     $88 = $87 & 7;
     switch ($88|0) {
     case 0:  {
      $89 = HEAP32[$0>>2]|0;
      $90 = ((($89)) + 1148|0);
      HEAP32[$90>>2] = 1;
      $is_unparseable$3 = $is_unparseable$2;
      break L35;
      break;
     }
     case 1:  {
      $91 = HEAP32[$0>>2]|0;
      $92 = ((($91)) + 1148|0);
      HEAP32[$92>>2] = 2;
      $is_unparseable$3 = $is_unparseable$2;
      break L35;
      break;
     }
     case 2:  {
      $93 = HEAP32[$0>>2]|0;
      $94 = ((($93)) + 1148|0);
      HEAP32[$94>>2] = 3;
      $is_unparseable$3 = $is_unparseable$2;
      break L35;
      break;
     }
     default: {
      $is_unparseable$3 = 1;
      break L35;
     }
     }
    }
   } while(0);
   $100 = HEAP8[$79>>0]|0;
   $101 = $100&255;
   $102 = $101 >>> 1;
   $103 = $102 & 7;
   HEAP32[$x>>2] = $103;
   switch ($103|0) {
   case 0:  {
    $104 = HEAP32[$0>>2]|0;
    $105 = ((($104)) + 248|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $is_unparseable$4 = 1;
    } else {
     $108 = ((($104)) + 296|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($104)) + 1152|0);
     HEAP32[$110>>2] = $109;
     $is_unparseable$4 = $is_unparseable$3;
    }
    break;
   }
   case 1:  {
    $111 = HEAP32[$0>>2]|0;
    $112 = ((($111)) + 1152|0);
    HEAP32[$112>>2] = 8;
    $is_unparseable$4 = $is_unparseable$3;
    break;
   }
   case 2:  {
    $113 = HEAP32[$0>>2]|0;
    $114 = ((($113)) + 1152|0);
    HEAP32[$114>>2] = 12;
    $is_unparseable$4 = $is_unparseable$3;
    break;
   }
   case 4:  {
    $115 = HEAP32[$0>>2]|0;
    $116 = ((($115)) + 1152|0);
    HEAP32[$116>>2] = 16;
    $is_unparseable$4 = $is_unparseable$3;
    break;
   }
   case 5:  {
    $117 = HEAP32[$0>>2]|0;
    $118 = ((($117)) + 1152|0);
    HEAP32[$118>>2] = 20;
    $is_unparseable$4 = $is_unparseable$3;
    break;
   }
   case 6:  {
    $119 = HEAP32[$0>>2]|0;
    $120 = ((($119)) + 1152|0);
    HEAP32[$120>>2] = 24;
    $is_unparseable$4 = $is_unparseable$3;
    break;
   }
   case 7: case 3:  {
    $is_unparseable$4 = 1;
    break;
   }
   default: {
    $is_unparseable$4 = $is_unparseable$3;
   }
   }
   $121 = HEAP8[$79>>0]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   $124 = HEAP8[$7>>0]|0;
   $125 = $124 & 1;
   $126 = ($125<<24>>24)==(0);
   do {
    if ($126) {
     $127 = HEAP32[$0>>2]|0;
     $128 = ((($127)) + 248|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)==(0);
     if (!($130)) {
      $131 = ((($127)) + 272|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ((($127)) + 276|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if (!($135)) {
       label = 44;
       break;
      }
     }
     $173 = HEAP32[$0>>2]|0;
     $174 = ((($173)) + 56|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (_FLAC__bitreader_read_utf8_uint32($175,$x,$raw_header,$raw_header_len)|0);
     $177 = ($176|0)==(0);
     if ($177) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $178 = HEAP32[$x>>2]|0;
     $179 = ($178|0)==(-1);
     if (!($179)) {
      $189 = HEAP32[$0>>2]|0;
      $190 = ((($189)) + 1156|0);
      HEAP32[$190>>2] = 0;
      $191 = HEAP32[$x>>2]|0;
      $192 = HEAP32[$0>>2]|0;
      $193 = ((($192)) + 1160|0);
      HEAP32[$193>>2] = $191;
      break;
     }
     $180 = HEAP32[$raw_header_len>>2]|0;
     $181 = (($180) + -1)|0;
     $182 = (($raw_header) + ($181)|0);
     $183 = HEAP8[$182>>0]|0;
     $184 = HEAP32[$0>>2]|0;
     $185 = ((($184)) + 3614|0);
     HEAP8[$185>>0] = $183;
     $186 = HEAP32[$0>>2]|0;
     $187 = ((($186)) + 3520|0);
     HEAP32[$187>>2] = 1;
     _send_error_to_client_($decoder,1);
     $188 = HEAP32[$decoder>>2]|0;
     HEAP32[$188>>2] = 2;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     label = 44;
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     $136 = HEAP32[$0>>2]|0;
     $137 = ((($136)) + 56|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (_FLAC__bitreader_read_utf8_uint64($138,$xx,$raw_header,$raw_header_len)|0);
     $140 = ($139|0)==(0);
     if ($140) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $141 = $xx;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = (($141) + 4)|0;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($143|0)==(-1);
     $148 = ($146|0)==(-1);
     $149 = $147 & $148;
     if (!($149)) {
      $159 = HEAP32[$0>>2]|0;
      $160 = ((($159)) + 1156|0);
      HEAP32[$160>>2] = 1;
      $161 = $xx;
      $162 = $161;
      $163 = HEAP32[$162>>2]|0;
      $164 = (($161) + 4)|0;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[$0>>2]|0;
      $168 = ((($167)) + 1160|0);
      $169 = $168;
      $170 = $169;
      HEAP32[$170>>2] = $163;
      $171 = (($169) + 4)|0;
      $172 = $171;
      HEAP32[$172>>2] = $166;
      break;
     }
     $150 = HEAP32[$raw_header_len>>2]|0;
     $151 = (($150) + -1)|0;
     $152 = (($raw_header) + ($151)|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = HEAP32[$0>>2]|0;
     $155 = ((($154)) + 3614|0);
     HEAP8[$155>>0] = $153;
     $156 = HEAP32[$0>>2]|0;
     $157 = ((($156)) + 3520|0);
     HEAP32[$157>>2] = 1;
     _send_error_to_client_($decoder,1);
     $158 = HEAP32[$decoder>>2]|0;
     HEAP32[$158>>2] = 2;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $194 = ($blocksize_hint$0|0)==(0);
   if (!($194)) {
    $195 = HEAP32[$0>>2]|0;
    $196 = ((($195)) + 56|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (_FLAC__bitreader_read_raw_uint32($197,$x,8)|0);
    $199 = ($198|0)==(0);
    if ($199) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $200 = HEAP32[$x>>2]|0;
    $201 = $200&255;
    $202 = HEAP32[$raw_header_len>>2]|0;
    $203 = (($202) + 1)|0;
    HEAP32[$raw_header_len>>2] = $203;
    $204 = (($raw_header) + ($202)|0);
    HEAP8[$204>>0] = $201;
    $205 = ($blocksize_hint$0|0)==(7);
    do {
     if ($205) {
      $206 = HEAP32[$0>>2]|0;
      $207 = ((($206)) + 56|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = (_FLAC__bitreader_read_raw_uint32($208,$_x,8)|0);
      $210 = ($209|0)==(0);
      if ($210) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      } else {
       $211 = HEAP32[$_x>>2]|0;
       $212 = $211&255;
       $213 = HEAP32[$raw_header_len>>2]|0;
       $214 = (($213) + 1)|0;
       HEAP32[$raw_header_len>>2] = $214;
       $215 = (($raw_header) + ($213)|0);
       HEAP8[$215>>0] = $212;
       $216 = HEAP32[$x>>2]|0;
       $217 = $216 << 8;
       $218 = HEAP32[$_x>>2]|0;
       $219 = $217 | $218;
       HEAP32[$x>>2] = $219;
       break;
      }
     }
    } while(0);
    $220 = HEAP32[$x>>2]|0;
    $221 = (($220) + 1)|0;
    $222 = HEAP32[$0>>2]|0;
    $223 = ((($222)) + 1136|0);
    HEAP32[$223>>2] = $221;
   }
   $224 = ($sample_rate_hint$0|0)==(0);
   do {
    if (!($224)) {
     $225 = HEAP32[$0>>2]|0;
     $226 = ((($225)) + 56|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (_FLAC__bitreader_read_raw_uint32($227,$x,8)|0);
     $229 = ($228|0)==(0);
     if ($229) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $230 = HEAP32[$x>>2]|0;
     $231 = $230&255;
     $232 = HEAP32[$raw_header_len>>2]|0;
     $233 = (($232) + 1)|0;
     HEAP32[$raw_header_len>>2] = $233;
     $234 = (($raw_header) + ($232)|0);
     HEAP8[$234>>0] = $231;
     $cond = ($sample_rate_hint$0|0)==(12);
     if (!($cond)) {
      $235 = HEAP32[$0>>2]|0;
      $236 = ((($235)) + 56|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (_FLAC__bitreader_read_raw_uint32($237,$_x1,8)|0);
      $239 = ($238|0)==(0);
      if ($239) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $240 = HEAP32[$_x1>>2]|0;
      $241 = $240&255;
      $242 = HEAP32[$raw_header_len>>2]|0;
      $243 = (($242) + 1)|0;
      HEAP32[$raw_header_len>>2] = $243;
      $244 = (($raw_header) + ($242)|0);
      HEAP8[$244>>0] = $241;
      $245 = HEAP32[$x>>2]|0;
      $246 = $245 << 8;
      $247 = HEAP32[$_x1>>2]|0;
      $248 = $246 | $247;
      HEAP32[$x>>2] = $248;
      if (!($cond)) {
       $253 = ($sample_rate_hint$0|0)==(13);
       if ($253) {
        $254 = HEAP32[$0>>2]|0;
        $255 = ((($254)) + 1140|0);
        HEAP32[$255>>2] = $248;
        break;
       } else {
        $256 = ($248*10)|0;
        $257 = HEAP32[$0>>2]|0;
        $258 = ((($257)) + 1140|0);
        HEAP32[$258>>2] = $256;
        break;
       }
      }
     }
     $249 = HEAP32[$x>>2]|0;
     $250 = ($249*1000)|0;
     $251 = HEAP32[$0>>2]|0;
     $252 = ((($251)) + 1140|0);
     HEAP32[$252>>2] = $250;
    }
   } while(0);
   $259 = HEAP32[$0>>2]|0;
   $260 = ((($259)) + 56|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = (_FLAC__bitreader_read_raw_uint32($261,$x,8)|0);
   $263 = ($262|0)==(0);
   if ($263) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $264 = HEAP32[$x>>2]|0;
   $265 = HEAP32[$raw_header_len>>2]|0;
   $266 = (_FLAC__crc8($raw_header,$265)|0);
   $267 = $264&255;
   $268 = ($266<<24>>24)==($267<<24>>24);
   if (!($268)) {
    _send_error_to_client_($decoder,1);
    $269 = HEAP32[$decoder>>2]|0;
    HEAP32[$269>>2] = 2;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $270 = HEAP32[$0>>2]|0;
   $271 = ((($270)) + 232|0);
   HEAP32[$271>>2] = 0;
   $272 = HEAP32[$0>>2]|0;
   $273 = ((($272)) + 1156|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = ($274|0)==(0);
   do {
    if ($275) {
     $276 = ((($272)) + 1160|0);
     $277 = HEAP32[$276>>2]|0;
     HEAP32[$x>>2] = $277;
     $278 = HEAP32[$0>>2]|0;
     $279 = ((($278)) + 1156|0);
     HEAP32[$279>>2] = 1;
     $280 = HEAP32[$0>>2]|0;
     $281 = ((($280)) + 228|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = ($282|0)==(0);
     if (!($283)) {
      $284 = HEAP32[$x>>2]|0;
      $285 = (___muldi3(($284|0),0,($282|0),0)|0);
      $286 = tempRet0;
      $287 = ((($280)) + 1160|0);
      $288 = $287;
      $289 = $288;
      HEAP32[$289>>2] = $285;
      $290 = (($288) + 4)|0;
      $291 = $290;
      HEAP32[$291>>2] = $286;
      label = 79;
      break;
     }
     $292 = ((($280)) + 248|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = ($293|0)==(0);
     if (!($294)) {
      $295 = ((($280)) + 272|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($280)) + 276|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ($296|0)==($298|0);
      if (!($299)) {
       break;
      }
      $300 = HEAP32[$x>>2]|0;
      $301 = (___muldi3(($300|0),0,($296|0),0)|0);
      $302 = tempRet0;
      $303 = ((($280)) + 1160|0);
      $304 = $303;
      $305 = $304;
      HEAP32[$305>>2] = $301;
      $306 = (($304) + 4)|0;
      $307 = $306;
      HEAP32[$307>>2] = $302;
      $308 = HEAP32[$0>>2]|0;
      $309 = ((($308)) + 276|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = ((($308)) + 232|0);
      HEAP32[$311>>2] = $310;
      label = 79;
      break;
     }
     $312 = HEAP32[$x>>2]|0;
     $313 = ($312|0)==(0);
     if ($313) {
      $314 = ((($280)) + 1160|0);
      $315 = $314;
      $316 = $315;
      HEAP32[$316>>2] = 0;
      $317 = (($315) + 4)|0;
      $318 = $317;
      HEAP32[$318>>2] = 0;
      $319 = HEAP32[$0>>2]|0;
      $320 = ((($319)) + 1136|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = ((($319)) + 232|0);
      HEAP32[$322>>2] = $321;
      label = 79;
      break;
     } else {
      $323 = ((($280)) + 1136|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = (___muldi3(($324|0),0,($312|0),0)|0);
      $326 = tempRet0;
      $327 = ((($280)) + 1160|0);
      $328 = $327;
      $329 = $328;
      HEAP32[$329>>2] = $325;
      $330 = (($328) + 4)|0;
      $331 = $330;
      HEAP32[$331>>2] = $326;
      label = 79;
      break;
     }
    } else {
     label = 79;
    }
   } while(0);
   if ((label|0) == 79) {
    $332 = ($is_unparseable$4|0)==(0);
    $333 = $332 & $123;
    if ($333) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _send_error_to_client_($decoder,3);
   $334 = HEAP32[$decoder>>2]|0;
   HEAP32[$334>>2] = 2;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 3614|0);
 HEAP8[$19>>0] = $$lcssa;
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 3520|0);
 HEAP32[$21>>2] = 1;
 _send_error_to_client_($decoder,1);
 $22 = HEAP32[$decoder>>2]|0;
 HEAP32[$22>>2] = 2;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _allocate_output_($decoder,$size,$channels) {
 $decoder = $decoder|0;
 $size = $size|0;
 $channels = $channels|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 220|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($size>>>0);
 if ($4) {
  $i$03 = 0;
 } else {
  $5 = ((($1)) + 224|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)<($channels>>>0);
  if ($7) {
   $i$03 = 0;
  } else {
   $$0 = 1;
   return ($$0|0);
  }
 }
 while(1) {
  $9 = HEAP32[$0>>2]|0;
  $10 = (((($9)) + 60|0) + ($i$03<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + -16|0);
   _free($13);
   $14 = HEAP32[$0>>2]|0;
   $15 = (((($14)) + 60|0) + ($i$03<<2)|0);
   HEAP32[$15>>2] = 0;
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = (((($16)) + 3616|0) + ($i$03<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   _free($18);
   $20 = HEAP32[$0>>2]|0;
   $21 = (((($20)) + 92|0) + ($i$03<<2)|0);
   HEAP32[$21>>2] = 0;
   $22 = HEAP32[$0>>2]|0;
   $23 = (((($22)) + 3616|0) + ($i$03<<2)|0);
   HEAP32[$23>>2] = 0;
  }
  $24 = (($i$03) + 1)|0;
  $exitcond = ($24|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$03 = $24;
  }
 }
 $8 = ($channels|0)==(0);
 L13: do {
  if (!($8)) {
   $i$12 = 0;
   while(1) {
    $27 = (_safe_malloc_muladd2_($size)|0);
    $28 = ($27|0)==(0|0);
    if ($28) {
     label = 11;
     break;
    }
    ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
    $30 = ((($27)) + 16|0);
    $31 = HEAP32[$0>>2]|0;
    $32 = (((($31)) + 60|0) + ($i$12<<2)|0);
    HEAP32[$32>>2] = $30;
    $33 = HEAP32[$0>>2]|0;
    $34 = (((($33)) + 3616|0) + ($i$12<<2)|0);
    $35 = (((($33)) + 92|0) + ($i$12<<2)|0);
    $36 = (_FLAC__memory_alloc_aligned_int32_array($size,$34,$35)|0);
    $37 = ($36|0)==(0);
    $25 = (($i$12) + 1)|0;
    if ($37) {
     label = 13;
     break;
    }
    $26 = ($25>>>0)<($channels>>>0);
    if ($26) {
     $i$12 = $25;
    } else {
     break L13;
    }
   }
   if ((label|0) == 11) {
    $29 = HEAP32[$decoder>>2]|0;
    HEAP32[$29>>2] = 8;
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 13) {
    $38 = HEAP32[$decoder>>2]|0;
    HEAP32[$38>>2] = 8;
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $39 = HEAP32[$0>>2]|0;
 $40 = ((($39)) + 220|0);
 HEAP32[$40>>2] = $size;
 $41 = HEAP32[$0>>2]|0;
 $42 = ((($41)) + 224|0);
 HEAP32[$42>>2] = $channels;
 $$0 = 1;
 return ($$0|0);
}
function _read_subframe_($decoder,$channel,$bps,$do_full_decode) {
 $decoder = $decoder|0;
 $channel = $channel|0;
 $bps = $bps|0;
 $do_full_decode = $do_full_decode|0;
 var $$0 = 0, $$02 = 0, $$old = 0, $$old4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i$06 = 0, $or$cond = 0, $or$cond$old = 0;
 var $or$cond$old$old = 0, $or$cond3 = 0, $or$cond5 = 0, $u = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp + 4|0;
 $u = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FLAC__bitreader_read_raw_uint32($3,$x,8)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$x>>2]|0;
 $7 = $6 & 1;
 $8 = $6 & 254;
 HEAP32[$x>>2] = $8;
 $9 = ($7|0)!=(0);
 $10 = HEAP32[$0>>2]|0;
 do {
  if ($9) {
   $11 = ((($10)) + 56|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_FLAC__bitreader_read_unary_unsigned($12,$u)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = HEAP32[$u>>2]|0;
   $16 = (($15) + 1)|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = (((((($17)) + 1176|0) + (($channel*292)|0)|0)) + 288|0);
   HEAP32[$18>>2] = $16;
   $19 = HEAP32[$0>>2]|0;
   $20 = (((((($19)) + 1176|0) + (($channel*292)|0)|0)) + 288|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21>>>0)<($bps>>>0);
   if ($22) {
    $23 = (($bps) - ($21))|0;
    $$02 = $23;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $24 = (((((($10)) + 1176|0) + (($channel*292)|0)|0)) + 288|0);
   HEAP32[$24>>2] = 0;
   $$02 = $bps;
  }
 } while(0);
 $25 = HEAP32[$x>>2]|0;
 $26 = $25 & 128;
 $27 = ($26|0)==(0);
 if (!($27)) {
  _send_error_to_client_($decoder,0);
  $28 = HEAP32[$decoder>>2]|0;
  HEAP32[$28>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 L18: do {
  switch ($25|0) {
  case 0:  {
   $29 = (_read_subframe_constant_($decoder,$channel,$$02,$do_full_decode)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    label = 21;
   }
   break;
  }
  case 2:  {
   $31 = (_read_subframe_verbatim_($decoder,$channel,$$02,$do_full_decode)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    label = 21;
   }
   break;
  }
  default: {
   $33 = ($25>>>0)<(16);
   if ($33) {
    _send_error_to_client_($decoder,3);
    $34 = HEAP32[$decoder>>2]|0;
    HEAP32[$34>>2] = 2;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = ($25>>>0)<(25);
   if ($35) {
    $36 = $25 >>> 1;
    $37 = $36 & 7;
    $38 = (_read_subframe_fixed_($decoder,$channel,$$02,$37,$do_full_decode)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $40 = HEAP32[$decoder>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)!=(2);
    $$old = ($do_full_decode|0)!=(0);
    $or$cond$old = $$old & $9;
    $or$cond5 = $or$cond$old & $42;
    if ($or$cond5) {
     break L18;
    } else {
     $$0 = 1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $43 = ($25>>>0)<(64);
   if ($43) {
    _send_error_to_client_($decoder,3);
    $44 = HEAP32[$decoder>>2]|0;
    HEAP32[$44>>2] = 2;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $45 = $25 >>> 1;
   $46 = $45 & 31;
   $47 = (($46) + 1)|0;
   $48 = (_read_subframe_lpc_($decoder,$channel,$$02,$47,$do_full_decode)|0);
   $49 = ($48|0)==(0);
   if ($49) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $50 = HEAP32[$decoder>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(2);
   $53 = ($do_full_decode|0)!=(0);
   $or$cond = $53 & $9;
   $or$cond3 = $or$cond & $52;
   if (!($or$cond3)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  }
 } while(0);
 if ((label|0) == 21) {
  $$old4 = ($do_full_decode|0)!=(0);
  $or$cond$old$old = $$old4 & $9;
  if (!($or$cond$old$old)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $54 = HEAP32[$0>>2]|0;
 $55 = (((((($54)) + 1176|0) + (($channel*292)|0)|0)) + 288|0);
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$x>>2] = $56;
 $57 = HEAP32[$0>>2]|0;
 $58 = ((($57)) + 1136|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0);
 if ($60) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP32[$0>>2]|0;
 $62 = ((($61)) + 1136|0);
 $64 = $57;$i$06 = 0;
 while(1) {
  $63 = (((($64)) + 60|0) + ($channel<<2)|0);
  $65 = HEAP32[$63>>2]|0;
  $66 = (($65) + ($i$06<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP32[$x>>2]|0;
  $69 = $67 << $68;
  HEAP32[$66>>2] = $69;
  $70 = (($i$06) + 1)|0;
  $71 = HEAP32[$62>>2]|0;
  $72 = ($70>>>0)<($71>>>0);
  if ($72) {
   $64 = $61;$i$06 = $70;
  } else {
   $$0 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _read_zero_padding_($decoder) {
 $decoder = $decoder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $zero = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FLAC__bitreader_is_consumed_byte_aligned($3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$zero>>2] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FLAC__bitreader_bits_left_for_byte_alignment($8)|0);
 $10 = (_FLAC__bitreader_read_raw_uint32($8,$zero,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$zero>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _send_error_to_client_($decoder,0);
 $14 = HEAP32[$decoder>>2]|0;
 HEAP32[$14>>2] = 2;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _send_error_to_client_($decoder,$status) {
 $decoder = $decoder|0;
 $status = $status|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3656|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($1)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_viii[$6 & 15]($decoder,$status,$8);
  return;
 }
 $9 = ($status|0)==(3);
 if (!($9)) {
  return;
 }
 $10 = ((($1)) + 6176|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 return;
}
function _write_audio_frame_to_client_($decoder,$frame,$buffer) {
 $decoder = $decoder|0;
 $frame = $frame|0;
 $buffer = $buffer|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $channel$01 = 0, $newbuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $newbuffer = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3656|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $79 = ((($1)) + 248|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)==(0);
  if ($81) {
   $82 = ((($1)) + 3648|0);
   HEAP32[$82>>2] = 0;
  }
  $83 = HEAP32[$0>>2]|0;
  $84 = ((($83)) + 3648|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0);
  if (!($86)) {
   $87 = ((($83)) + 3660|0);
   $88 = ((($frame)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$frame>>2]|0;
   $91 = ((($frame)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + 7)|0;
   $94 = $93 >>> 3;
   $95 = (_FLAC__MD5Accumulate($87,$buffer,$89,$90,$94)|0);
   $96 = ($95|0)==(0);
   if ($96) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $97 = HEAP32[$0>>2]|0;
  $98 = ((($97)) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($97)) + 48|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (FUNCTION_TABLE_iiiii[$99 & 15]($decoder,$frame,$buffer,$101)|0);
  $$0 = $102;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($frame)) + 24|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$frame>>2]|0;
 $13 = ((($1)) + 6168|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 3776|0);
 _memcpy(($20|0),($frame|0),2384)|0;
 $21 = ($19>>>0)<($11>>>0);
 $22 = ($16>>>0)<($8>>>0);
 $23 = ($19|0)==($11|0);
 $24 = $23 & $22;
 $25 = $21 | $24;
 if ($25) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (_i64Add(($12|0),0,($8|0),($11|0))|0);
 $27 = tempRet0;
 $28 = ($19>>>0)<($27>>>0);
 $29 = ($16>>>0)<($26>>>0);
 $30 = ($19|0)==($27|0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 if (!($32)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (_i64Subtract(($16|0),($19|0),($8|0),($11|0))|0);
 $34 = tempRet0;
 $35 = HEAP32[$0>>2]|0;
 $36 = ((($35)) + 3656|0);
 HEAP32[$36>>2] = 0;
 $37 = ($33|0)==(0);
 if ($37) {
  $73 = HEAP32[$0>>2]|0;
  $74 = ((($73)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($73)) + 48|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (FUNCTION_TABLE_iiiii[$75 & 15]($decoder,$frame,$buffer,$77)|0);
  $$0 = $78;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($frame)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if (!($40)) {
  $41 = HEAP32[$38>>2]|0;
  $channel$01 = 0;
  while(1) {
   $42 = (($buffer) + ($channel$01<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($33<<2)|0);
   $45 = (($newbuffer) + ($channel$01<<2)|0);
   HEAP32[$45>>2] = $44;
   $46 = (($channel$01) + 1)|0;
   $47 = ($46>>>0)<($41>>>0);
   if ($47) {
    $channel$01 = $46;
   } else {
    break;
   }
  }
 }
 $48 = HEAP32[$0>>2]|0;
 $49 = ((($48)) + 3776|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) - ($33))|0;
 HEAP32[$49>>2] = $51;
 $52 = HEAP32[$0>>2]|0;
 $53 = ((($52)) + 3800|0);
 $54 = $53;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (_i64Add(($56|0),($59|0),($33|0),0)|0);
 $61 = tempRet0;
 $62 = $53;
 $63 = $62;
 HEAP32[$63>>2] = $60;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = $61;
 $66 = HEAP32[$0>>2]|0;
 $67 = ((($66)) + 24|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($66)) + 3776|0);
 $70 = ((($66)) + 48|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (FUNCTION_TABLE_iiiii[$68 & 15]($decoder,$69,$newbuffer,$71)|0);
 $$0 = $72;
 STACKTOP = sp;return ($$0|0);
}
function _read_subframe_constant_($decoder,$channel,$bps,$do_full_decode) {
 $decoder = $decoder|0;
 $channel = $channel|0;
 $bps = $bps|0;
 $do_full_decode = $do_full_decode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($1)) + 60|0) + ($channel<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($1)) + 1176|0) + (($channel*292)|0)|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_FLAC__bitreader_read_raw_int32($7,$x,$bps)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$x>>2]|0;
 $11 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = ($do_full_decode|0)==(0);
 if ($12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 1136|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 1136|0);
 $i$01 = 0;
 while(1) {
  $19 = HEAP32[$x>>2]|0;
  $20 = (($3) + ($i$01<<2)|0);
  HEAP32[$20>>2] = $19;
  $21 = (($i$01) + 1)|0;
  $22 = HEAP32[$18>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $i$01 = $21;
  } else {
   $$0 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _read_subframe_verbatim_($decoder,$channel,$bps,$do_full_decode) {
 $decoder = $decoder|0;
 $channel = $channel|0;
 $bps = $bps|0;
 $do_full_decode = $do_full_decode|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa15 = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $phitmp = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 4|0);
 $3 = (((($1)) + 92|0) + ($channel<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($1)) + 1176|0) + (($channel*292)|0)|0);
 HEAP32[$5>>2] = 1;
 HEAP32[$2>>2] = $4;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 1136|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$lcssa = $6;$$lcssa2 = 0;
  } else {
   $11 = $6;$i$04 = 0;
   while(1) {
    $10 = ((($11)) + 56|0);
    $12 = HEAP32[$10>>2]|0;
    $13 = (_FLAC__bitreader_read_raw_int32($12,$x,$bps)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$0 = 0;
     label = 7;
     break;
    }
    $15 = HEAP32[$x>>2]|0;
    $16 = (($4) + ($i$04<<2)|0);
    HEAP32[$16>>2] = $15;
    $17 = (($i$04) + 1)|0;
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($18)) + 1136|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($17>>>0)<($20>>>0);
    if ($21) {
     $11 = $18;$i$04 = $17;
    } else {
     $$lcssa14 = $18;$$lcssa15 = $20;
     label = 4;
     break;
    }
   }
   if ((label|0) == 4) {
    $phitmp = $$lcssa15 << 2;
    $$lcssa = $$lcssa14;$$lcssa2 = $phitmp;
    break;
   }
   else if ((label|0) == 7) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $22 = ($do_full_decode|0)==(0);
 if ($22) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (((($$lcssa)) + 60|0) + ($channel<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$2>>2]|0;
 _memcpy(($24|0),($25|0),($$lcssa2|0))|0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _read_subframe_fixed_($decoder,$channel,$bps,$order,$do_full_decode) {
 $decoder = $decoder|0;
 $channel = $channel|0;
 $bps = $bps|0;
 $order = $order|0;
 $do_full_decode = $do_full_decode|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i32 = 0, $switch = 0, $switch1 = 0, $u$03 = 0, $u32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i32 = sp + 4|0;
 $u32 = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($1)) + 1176|0) + (($channel*292)|0)|0);
 HEAP32[$2>>2] = 2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (((($3)) + 92|0) + ($channel<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 16|0);
 HEAP32[$7>>2] = $order;
 $8 = ($order|0)==(0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 L1: do {
  if ($8) {
   $$lcssa = $11;
  } else {
   $12 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 20|0);
   $13 = $11;$u$03 = 0;
   while(1) {
    $14 = (_FLAC__bitreader_read_raw_int32($13,$i32,$bps)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     break;
    }
    $16 = HEAP32[$i32>>2]|0;
    $17 = (($12) + ($u$03<<2)|0);
    HEAP32[$17>>2] = $16;
    $18 = (($u$03) + 1)|0;
    $19 = ($18>>>0)<($order>>>0);
    $20 = HEAP32[$0>>2]|0;
    $21 = ((($20)) + 56|0);
    $22 = HEAP32[$21>>2]|0;
    if ($19) {
     $13 = $22;$u$03 = $18;
    } else {
     $$lcssa = $22;
     break L1;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $23 = HEAP32[1116>>2]|0;
 $24 = (_FLAC__bitreader_read_raw_uint32($$lcssa,$u32,$23)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = HEAP32[$u32>>2]|0;
 $27 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 4|0);
 HEAP32[$27>>2] = $26;
 $switch = ($26>>>0)<(2);
 if (!($switch)) {
  _send_error_to_client_($decoder,3);
  $46 = HEAP32[$decoder>>2]|0;
  HEAP32[$46>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($28)) + 56|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[1096>>2]|0;
 $32 = (_FLAC__bitreader_read_raw_uint32($30,$u32,$31)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[$0>>2]|0;
 $35 = ((($34)) + 1136|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$u32>>2]|0;
 $38 = $36 >>> $37;
 $39 = ($38>>>0)<($order>>>0);
 if ($39) {
  _send_error_to_client_($decoder,0);
  $40 = HEAP32[$decoder>>2]|0;
  HEAP32[$40>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 8|0);
 HEAP32[$41>>2] = $37;
 $42 = HEAP32[$0>>2]|0;
 $43 = (((($42)) + 124|0) + (($channel*12)|0)|0);
 $44 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = HEAP32[$27>>2]|0;
 $switch1 = ($45>>>0)<(2);
 if ($switch1) {
  $47 = HEAP32[$41>>2]|0;
  $48 = HEAP32[$0>>2]|0;
  $49 = (((($48)) + 124|0) + (($channel*12)|0)|0);
  $50 = (((($48)) + 92|0) + ($channel<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($45|0)==(1);
  $53 = $52&1;
  $54 = (_read_residual_partitioned_rice_($decoder,$order,$47,$49,$51,$53)|0);
  $55 = ($54|0)==(0);
  if ($55) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $56 = ($do_full_decode|0)==(0);
 if ($56) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = HEAP32[$0>>2]|0;
 $58 = (((($57)) + 60|0) + ($channel<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 20|0);
 $61 = $order << 2;
 _memcpy(($59|0),($60|0),($61|0))|0;
 $62 = HEAP32[$0>>2]|0;
 $63 = (((($62)) + 92|0) + ($channel<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($62)) + 1136|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) - ($order))|0;
 $68 = (((($62)) + 60|0) + ($channel<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + ($order<<2)|0);
 _FLAC__fixed_restore_signal($64,$67,$order,$70);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _read_subframe_lpc_($decoder,$channel,$bps,$order,$do_full_decode) {
 $decoder = $decoder|0;
 $channel = $channel|0;
 $bps = $bps|0;
 $order = $order|0;
 $do_full_decode = $do_full_decode|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i32 = 0, $or$cond = 0, $switch = 0, $switch1 = 0, $u$07 = 0, $u$16 = 0, $u32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i32 = sp + 4|0;
 $u32 = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($1)) + 1176|0) + (($channel*292)|0)|0);
 HEAP32[$2>>2] = 3;
 $3 = HEAP32[$0>>2]|0;
 $4 = (((($3)) + 92|0) + ($channel<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 284|0);
 HEAP32[$6>>2] = $5;
 $7 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 16|0);
 HEAP32[$7>>2] = $order;
 $8 = ($order|0)==(0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 L1: do {
  if ($8) {
   $$lcssa4 = $11;
  } else {
   $12 = $11;$u$07 = 0;
   while(1) {
    $13 = (_FLAC__bitreader_read_raw_int32($12,$i32,$bps)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$0 = 0;
     break;
    }
    $15 = HEAP32[$i32>>2]|0;
    $16 = ((((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 156|0) + ($u$07<<2)|0);
    HEAP32[$16>>2] = $15;
    $17 = (($u$07) + 1)|0;
    $18 = ($17>>>0)<($order>>>0);
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($19)) + 56|0);
    $21 = HEAP32[$20>>2]|0;
    if ($18) {
     $12 = $21;$u$07 = $17;
    } else {
     $$lcssa4 = $21;
     break L1;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $22 = HEAP32[1096>>2]|0;
 $23 = (_FLAC__bitreader_read_raw_uint32($$lcssa4,$u32,$22)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[$u32>>2]|0;
 $26 = HEAP32[1096>>2]|0;
 $27 = 1 << $26;
 $28 = (($27) + -1)|0;
 $29 = ($25|0)==($28|0);
 if ($29) {
  _send_error_to_client_($decoder,0);
  $30 = HEAP32[$decoder>>2]|0;
  HEAP32[$30>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (($25) + 1)|0;
 $32 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 20|0);
 HEAP32[$32>>2] = $31;
 $33 = HEAP32[$0>>2]|0;
 $34 = ((($33)) + 56|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[1100>>2]|0;
 $37 = (_FLAC__bitreader_read_raw_int32($35,$i32,$36)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = HEAP32[$i32>>2]|0;
 $40 = ($39|0)<(0);
 if ($40) {
  _send_error_to_client_($decoder,0);
  $41 = HEAP32[$decoder>>2]|0;
  HEAP32[$41>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 24|0);
 HEAP32[$42>>2] = $39;
 $43 = ($order|0)==(0);
 $44 = HEAP32[$0>>2]|0;
 $45 = ((($44)) + 56|0);
 $46 = HEAP32[$45>>2]|0;
 L21: do {
  if ($43) {
   $$lcssa = $46;
  } else {
   $48 = $46;$u$16 = 0;
   while(1) {
    $47 = HEAP32[$32>>2]|0;
    $49 = (_FLAC__bitreader_read_raw_int32($48,$i32,$47)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $$0 = 0;
     break;
    }
    $51 = HEAP32[$i32>>2]|0;
    $52 = ((((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 28|0) + ($u$16<<2)|0);
    HEAP32[$52>>2] = $51;
    $53 = (($u$16) + 1)|0;
    $54 = ($53>>>0)<($order>>>0);
    $55 = HEAP32[$0>>2]|0;
    $56 = ((($55)) + 56|0);
    $57 = HEAP32[$56>>2]|0;
    if ($54) {
     $48 = $57;$u$16 = $53;
    } else {
     $$lcssa = $57;
     break L21;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $58 = HEAP32[1116>>2]|0;
 $59 = (_FLAC__bitreader_read_raw_uint32($$lcssa,$u32,$58)|0);
 $60 = ($59|0)==(0);
 if ($60) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP32[$u32>>2]|0;
 $62 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 4|0);
 HEAP32[$62>>2] = $61;
 $switch = ($61>>>0)<(2);
 if (!($switch)) {
  _send_error_to_client_($decoder,3);
  $81 = HEAP32[$decoder>>2]|0;
  HEAP32[$81>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[$0>>2]|0;
 $64 = ((($63)) + 56|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[1096>>2]|0;
 $67 = (_FLAC__bitreader_read_raw_uint32($65,$u32,$66)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = HEAP32[$0>>2]|0;
 $70 = ((($69)) + 1136|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$u32>>2]|0;
 $73 = $71 >>> $72;
 $74 = ($73>>>0)<($order>>>0);
 if ($74) {
  _send_error_to_client_($decoder,0);
  $75 = HEAP32[$decoder>>2]|0;
  HEAP32[$75>>2] = 2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 8|0);
 HEAP32[$76>>2] = $72;
 $77 = HEAP32[$0>>2]|0;
 $78 = (((($77)) + 124|0) + (($channel*12)|0)|0);
 $79 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 12|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$62>>2]|0;
 $switch1 = ($80>>>0)<(2);
 if ($switch1) {
  $82 = HEAP32[$76>>2]|0;
  $83 = HEAP32[$0>>2]|0;
  $84 = (((($83)) + 124|0) + (($channel*12)|0)|0);
  $85 = (((($83)) + 92|0) + ($channel<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($80|0)==(1);
  $88 = $87&1;
  $89 = (_read_residual_partitioned_rice_($decoder,$order,$82,$84,$86,$88)|0);
  $90 = ($89|0)==(0);
  if ($90) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $91 = ($do_full_decode|0)==(0);
 if ($91) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $92 = HEAP32[$0>>2]|0;
 $93 = (((($92)) + 60|0) + ($channel<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 156|0);
 $96 = $order << 2;
 _memcpy(($94|0),($95|0),($96|0))|0;
 $97 = HEAP32[$32>>2]|0;
 $98 = (($97) + ($bps))|0;
 $99 = (_FLAC__bitmath_ilog2($order)|0);
 $100 = (($98) + ($99))|0;
 $101 = ($100>>>0)<(33);
 if (!($101)) {
  $129 = HEAP32[$0>>2]|0;
  $130 = ((($129)) + 40|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (((($129)) + 92|0) + ($channel<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($129)) + 1136|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) - ($order))|0;
  $137 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 28|0);
  $138 = HEAP32[$42>>2]|0;
  $139 = (((($129)) + 60|0) + ($channel<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + ($order<<2)|0);
  FUNCTION_TABLE_viiiiii[$131 & 15]($133,$136,$137,$order,$138,$141);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $102 = ($bps>>>0)<(17);
 $103 = ($97>>>0)<(17);
 $or$cond = $102 & $103;
 $104 = HEAP32[$0>>2]|0;
 if ($or$cond) {
  $105 = ((($104)) + 44|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (((($104)) + 92|0) + ($channel<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($104)) + 1136|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) - ($order))|0;
  $112 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 28|0);
  $113 = HEAP32[$42>>2]|0;
  $114 = (((($104)) + 60|0) + ($channel<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($order<<2)|0);
  FUNCTION_TABLE_viiiiii[$106 & 15]($108,$111,$112,$order,$113,$116);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $117 = ((($104)) + 36|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (((($104)) + 92|0) + ($channel<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($104)) + 1136|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) - ($order))|0;
  $124 = (((((($1)) + 1176|0) + (($channel*292)|0)|0)) + 28|0);
  $125 = HEAP32[$42>>2]|0;
  $126 = (((($104)) + 60|0) + ($channel<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + ($order<<2)|0);
  FUNCTION_TABLE_viiiiii[$118 & 15]($120,$123,$124,$order,$125,$128);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _read_residual_partitioned_rice_($decoder,$predictor_order,$partition_order,$partitioned_rice_contents,$residual,$is_extended) {
 $decoder = $decoder|0;
 $predictor_order = $predictor_order|0;
 $partition_order = $partition_order|0;
 $partitioned_rice_contents = $partitioned_rice_contents|0;
 $residual = $residual|0;
 $is_extended = $is_extended|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $partition$010 = 0, $rice_parameter = 0, $sample$09 = 0;
 var $sample$18 = 0, $sample$2 = 0, $u$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rice_parameter = sp + 4|0;
 $i = sp;
 $0 = 1 << $partition_order;
 $1 = ($partition_order|0)!=(0);
 $2 = ((($decoder)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1136|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> $partition_order;
 $7 = (($5) - ($predictor_order))|0;
 $8 = $1 ? $6 : $7;
 $9 = ($is_extended|0)!=(0);
 $10 = HEAP32[1100>>2]|0;
 $11 = HEAP32[1096>>2]|0;
 $12 = $9 ? $10 : $11;
 $13 = HEAP32[1092>>2]|0;
 $14 = HEAP32[1088>>2]|0;
 $15 = $9 ? $13 : $14;
 $16 = ($partition_order>>>0)<(6);
 $17 = $16 ? 6 : $partition_order;
 $18 = (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($partitioned_rice_contents,$17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $25 = HEAP32[$decoder>>2]|0;
  HEAP32[$25>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ((($partitioned_rice_contents)) + 4|0);
 $21 = ($partition_order|0)==(0);
 $22 = HEAP32[1100>>2]|0;
 $23 = ((($partitioned_rice_contents)) + 4|0);
 $24 = ($partition_order|0)==(0);
 $partition$010 = 0;$sample$09 = 0;
 L5: while(1) {
  $26 = HEAP32[$2>>2]|0;
  $27 = ((($26)) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_FLAC__bitreader_read_raw_uint32($28,$rice_parameter,$12)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $$0 = 0;
   label = 13;
   break;
  }
  $31 = HEAP32[$rice_parameter>>2]|0;
  $32 = HEAP32[$partitioned_rice_contents>>2]|0;
  $33 = (($32) + ($partition$010<<2)|0);
  HEAP32[$33>>2] = $31;
  $34 = HEAP32[$rice_parameter>>2]|0;
  $35 = ($34>>>0)<($15>>>0);
  if ($35) {
   $36 = HEAP32[$20>>2]|0;
   $37 = (($36) + ($partition$010<<2)|0);
   HEAP32[$37>>2] = 0;
   $38 = ($partition$010|0)!=(0);
   $or$cond = $21 | $38;
   $39 = $or$cond ? 0 : $predictor_order;
   $40 = (($8) - ($39))|0;
   $41 = HEAP32[$2>>2]|0;
   $42 = ((($41)) + 56|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($residual) + ($sample$09<<2)|0);
   $45 = HEAP32[$rice_parameter>>2]|0;
   $46 = (_FLAC__bitreader_read_rice_signed_block($43,$44,$40,$45)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    $$0 = 0;
    label = 13;
    break;
   }
   $48 = (($40) + ($sample$09))|0;
   $sample$2 = $48;
  } else {
   $49 = HEAP32[$2>>2]|0;
   $50 = ((($49)) + 56|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_FLAC__bitreader_read_raw_uint32($51,$rice_parameter,$22)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $$0 = 0;
    label = 13;
    break;
   }
   $54 = HEAP32[$rice_parameter>>2]|0;
   $55 = HEAP32[$23>>2]|0;
   $56 = (($55) + ($partition$010<<2)|0);
   HEAP32[$56>>2] = $54;
   $57 = ($partition$010|0)!=(0);
   $or$cond3 = $24 | $57;
   $58 = $or$cond3 ? 0 : $predictor_order;
   $59 = ($58>>>0)<($8>>>0);
   if ($59) {
    $sample$18 = $sample$09;$u$07 = $58;
    while(1) {
     $60 = HEAP32[$2>>2]|0;
     $61 = ((($60)) + 56|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[$rice_parameter>>2]|0;
     $64 = (_FLAC__bitreader_read_raw_int32($62,$i,$63)|0);
     $65 = ($64|0)==(0);
     if ($65) {
      $$0 = 0;
      label = 13;
      break L5;
     }
     $66 = HEAP32[$i>>2]|0;
     $67 = (($residual) + ($sample$18<<2)|0);
     HEAP32[$67>>2] = $66;
     $68 = (($u$07) + 1)|0;
     $69 = (($sample$18) + 1)|0;
     $70 = ($68>>>0)<($8>>>0);
     if ($70) {
      $sample$18 = $69;$u$07 = $68;
     } else {
      $sample$2 = $69;
      break;
     }
    }
   } else {
    $sample$2 = $sample$09;
   }
  }
  $71 = (($partition$010) + 1)|0;
  $72 = ($71>>>0)<($0>>>0);
  if ($72) {
   $partition$010 = $71;$sample$09 = $sample$2;
  } else {
   $$0 = 1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitmath_ilog2($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FLAC__clz_uint32173($v)|0);
 $1 = $0 ^ 31;
 return ($1|0);
}
function _FLAC__clz_uint32173($v) {
 $v = $v|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Math_clz32(($v|0))|0);
 return ($0|0);
}
function _safe_malloc_muladd2_($size2) {
 $size2 = $size2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size2) + 4)|0;
 $1 = ($size2>>>0)>(4294967291);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (4294967295 / ($0>>>0))&-1;
  $3 = ($2>>>0)<(4);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = $0 << 2;
   $5 = (_malloc($4)|0);
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _read_metadata_streaminfo_($decoder,$is_last,$length) {
 $decoder = $decoder|0;
 $is_last = $is_last|0;
 $length = $length|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $not$ = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 256|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 260|0);
 HEAP32[$4>>2] = $is_last;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 264|0);
 HEAP32[$6>>2] = $length;
 $7 = HEAP32[1120>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_FLAC__bitreader_read_raw_uint32($10,$x,$7)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$x>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 272|0);
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[1120>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_FLAC__bitreader_read_raw_uint32($19,$x,$16)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP32[$x>>2]|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($23)) + 276|0);
 HEAP32[$24>>2] = $22;
 $25 = HEAP32[1068>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = ((($26)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_FLAC__bitreader_read_raw_uint32($28,$x,$25)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP32[$x>>2]|0;
 $32 = HEAP32[$0>>2]|0;
 $33 = ((($32)) + 280|0);
 HEAP32[$33>>2] = $31;
 $34 = HEAP32[1068>>2]|0;
 $35 = HEAP32[$0>>2]|0;
 $36 = ((($35)) + 56|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (_FLAC__bitreader_read_raw_uint32($37,$x,$34)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$x>>2]|0;
 $41 = HEAP32[$0>>2]|0;
 $42 = ((($41)) + 284|0);
 HEAP32[$42>>2] = $40;
 $43 = HEAP32[1036>>2]|0;
 $44 = HEAP32[$0>>2]|0;
 $45 = ((($44)) + 56|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_FLAC__bitreader_read_raw_uint32($46,$x,$43)|0);
 $48 = ($47|0)==(0);
 if ($48) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = HEAP32[$x>>2]|0;
 $50 = HEAP32[$0>>2]|0;
 $51 = ((($50)) + 288|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[1080>>2]|0;
 $53 = HEAP32[$0>>2]|0;
 $54 = ((($53)) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_FLAC__bitreader_read_raw_uint32($55,$x,$52)|0);
 $57 = ($56|0)==(0);
 if ($57) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = HEAP32[$x>>2]|0;
 $59 = (($58) + 1)|0;
 $60 = HEAP32[$0>>2]|0;
 $61 = ((($60)) + 292|0);
 HEAP32[$61>>2] = $59;
 $62 = HEAP32[1100>>2]|0;
 $63 = HEAP32[$0>>2]|0;
 $64 = ((($63)) + 56|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (_FLAC__bitreader_read_raw_uint32($65,$x,$62)|0);
 $67 = ($66|0)==(0);
 if ($67) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $68 = HEAP32[$x>>2]|0;
 $69 = (($68) + 1)|0;
 $70 = HEAP32[$0>>2]|0;
 $71 = ((($70)) + 296|0);
 HEAP32[$71>>2] = $69;
 $72 = HEAP32[1040>>2]|0;
 $73 = HEAP32[$0>>2]|0;
 $74 = ((($73)) + 56|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($73)) + 304|0);
 $77 = (_FLAC__bitreader_read_raw_uint64($75,$76,$72)|0);
 $78 = ($77|0)==(0);
 if ($78) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = HEAP32[$0>>2]|0;
 $80 = ((($79)) + 56|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($79)) + 312|0);
 $83 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($81,$82,16)|0);
 $84 = ($83|0)==(0);
 if ($84) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $85 = (($7) + 128)|0;
 $86 = (($85) + ($16))|0;
 $87 = (($86) + ($25))|0;
 $88 = (($87) + ($34))|0;
 $89 = (($88) + ($43))|0;
 $90 = (($89) + ($52))|0;
 $91 = (($90) + ($62))|0;
 $92 = (($91) + ($72))|0;
 $93 = $92 >>> 3;
 $94 = (($length) - ($93))|0;
 $95 = HEAP32[$0>>2]|0;
 $96 = ((($95)) + 56|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($97,$94)|0);
 $not$ = ($98|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _read_metadata_seektable_($decoder,$is_last,$length) {
 $decoder = $decoder|0;
 $is_last = $is_last|0;
 $length = $length|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa15 = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i$04 = 0, $phitmp = 0, $x = 0, $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp + 8|0;
 $xx = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 432|0);
 HEAP32[$2>>2] = 3;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 436|0);
 HEAP32[$4>>2] = $is_last;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 440|0);
 HEAP32[$6>>2] = $length;
 $7 = (($length>>>0) / 18)&-1;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 448|0);
 HEAP32[$9>>2] = $7;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 448|0);
 $12 = ((($10)) + 452|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = (_safe_realloc_mul_2op_138($13,$14,24)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 452|0);
 HEAP32[$17>>2] = $15;
 $18 = ($15|0)==(0|0);
 if ($18) {
  $26 = HEAP32[$decoder>>2]|0;
  HEAP32[$26>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($19)) + 448|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 do {
  if ($22) {
   $$lcssa = $19;$$lcssa2 = 0;
  } else {
   $23 = HEAP32[1124>>2]|0;
   $24 = HEAP32[1124>>2]|0;
   $25 = HEAP32[1120>>2]|0;
   $28 = $19;$i$04 = 0;
   while(1) {
    $27 = ((($28)) + 56|0);
    $29 = HEAP32[$27>>2]|0;
    $30 = (_FLAC__bitreader_read_raw_uint64($29,$xx,$23)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $$0 = 0;
     label = 13;
     break;
    }
    $32 = $xx;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[$0>>2]|0;
    $39 = ((($38)) + 452|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + (($i$04*24)|0)|0);
    $42 = $41;
    $43 = $42;
    HEAP32[$43>>2] = $34;
    $44 = (($42) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = $37;
    $46 = HEAP32[$0>>2]|0;
    $47 = ((($46)) + 56|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (_FLAC__bitreader_read_raw_uint64($48,$xx,$24)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $$0 = 0;
     label = 13;
     break;
    }
    $51 = $xx;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$0>>2]|0;
    $58 = ((($57)) + 452|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($59) + (($i$04*24)|0)|0)) + 8|0);
    $61 = $60;
    $62 = $61;
    HEAP32[$62>>2] = $53;
    $63 = (($61) + 4)|0;
    $64 = $63;
    HEAP32[$64>>2] = $56;
    $65 = HEAP32[$0>>2]|0;
    $66 = ((($65)) + 56|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_FLAC__bitreader_read_raw_uint32($67,$x,$25)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     $$0 = 0;
     label = 13;
     break;
    }
    $70 = HEAP32[$x>>2]|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ((($71)) + 452|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (((($73) + (($i$04*24)|0)|0)) + 16|0);
    HEAP32[$74>>2] = $70;
    $75 = (($i$04) + 1)|0;
    $76 = HEAP32[$0>>2]|0;
    $77 = ((($76)) + 448|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75>>>0)<($78>>>0);
    if ($79) {
     $28 = $76;$i$04 = $75;
    } else {
     $$lcssa14 = $76;$$lcssa15 = $78;
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    $phitmp = Math_imul($$lcssa15, -18)|0;
    $$lcssa = $$lcssa14;$$lcssa2 = $phitmp;
    break;
   }
   else if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $80 = (($$lcssa2) + ($length))|0;
 $81 = ($80|0)==(0);
 if (!($81)) {
  $82 = ((($$lcssa)) + 56|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($83,$80)|0);
  $85 = ($84|0)==(0);
  if ($85) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _has_id_filtered_($decoder,$id) {
 $decoder = $decoder|0;
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[1060>>2]|0;
 $6 = $5 >>> 3;
 $13 = $1;$i$01 = 0;
 while(1) {
  $12 = ((($13)) + 1120|0);
  $14 = HEAP32[$12>>2]|0;
  $15 = Math_imul($6, $i$01)|0;
  $16 = (($14) + ($15)|0);
  $17 = (_memcmp($16,$id,$6)|0);
  $18 = ($17|0)==(0);
  $10 = (($i$01) + 1)|0;
  if ($18) {
   $$0 = 1;
   label = 5;
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 1124|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = ($10>>>0)<($9>>>0);
  if ($11) {
   $13 = $7;$i$01 = $10;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _read_metadata_vorbiscomment_($decoder,$obj,$length) {
 $decoder = $decoder|0;
 $obj = $obj|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$116 = 0, $$116$lcssa = 0, $$2 = 0, $$3 = 0, $$lcssa88 = 0, $$lcssa92 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$017 = 0, $i$017$lcssa = 0, $i$017$lcssa78 = 0, $i$017$lcssa79 = 0, $i$017$lcssa80 = 0, $i$017$lcssa81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($length>>>0)>(7);
 L1: do {
  if ($0) {
   $1 = (($length) + -8)|0;
   $2 = ((($decoder)) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($3)) + 56|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_FLAC__bitreader_read_uint32_little_endian($5,$obj)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$01 = 0;
    return ($$01|0);
   }
   $8 = HEAP32[$obj>>2]|0;
   $9 = ($8|0)==(0);
   do {
    if ($9) {
     $26 = ((($obj)) + 4|0);
     HEAP32[$26>>2] = 0;
     $$0 = $1;
    } else {
     $10 = ($1>>>0)<($8>>>0);
     if ($10) {
      HEAP32[$obj>>2] = 0;
      $11 = ((($obj)) + 4|0);
      HEAP32[$11>>2] = 0;
      $$3 = $1;
      break L1;
     }
     $12 = (($1) - ($8))|0;
     $13 = (_safe_malloc_add_2op_175($8)|0);
     $14 = ((($obj)) + 4|0);
     HEAP32[$14>>2] = $13;
     $15 = ($13|0)==(0|0);
     if ($15) {
      $16 = HEAP32[$decoder>>2]|0;
      HEAP32[$16>>2] = 8;
      $$01 = 0;
      return ($$01|0);
     }
     $17 = HEAP32[$2>>2]|0;
     $18 = ((($17)) + 56|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$obj>>2]|0;
     $21 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($19,$13,$20)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $$01 = 0;
      return ($$01|0);
     } else {
      $23 = HEAP32[$obj>>2]|0;
      $24 = HEAP32[$14>>2]|0;
      $25 = (($24) + ($23)|0);
      HEAP8[$25>>0] = 0;
      $$0 = $12;
      break;
     }
    }
   } while(0);
   $27 = HEAP32[$2>>2]|0;
   $28 = ((($27)) + 56|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($obj)) + 8|0);
   $31 = (_FLAC__bitreader_read_uint32_little_endian($29,$30)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $$01 = 0;
    return ($$01|0);
   }
   $33 = HEAP32[$30>>2]|0;
   $34 = ($33>>>0)>(100000);
   if ($34) {
    HEAP32[$30>>2] = 0;
    $$01 = 0;
    return ($$01|0);
   }
   $35 = ($33|0)==(0);
   if ($35) {
    $$3 = $$0;
   } else {
    $36 = (_safe_malloc_mul_2op_p($33,8)|0);
    $37 = ((($obj)) + 12|0);
    HEAP32[$37>>2] = $36;
    $38 = ($36|0)==(0|0);
    if ($38) {
     HEAP32[$30>>2] = 0;
     $41 = HEAP32[$decoder>>2]|0;
     HEAP32[$41>>2] = 8;
     $$01 = 0;
     return ($$01|0);
    }
    $39 = HEAP32[$30>>2]|0;
    $40 = ($39|0)==(0);
    if ($40) {
     $$3 = $$0;
    } else {
     $$116 = $$0;$i$017 = 0;
     while(1) {
      $42 = HEAP32[$37>>2]|0;
      $43 = (($42) + ($i$017<<3)|0);
      HEAP32[$43>>2] = 0;
      $44 = HEAP32[$37>>2]|0;
      $45 = (((($44) + ($i$017<<3)|0)) + 4|0);
      HEAP32[$45>>2] = 0;
      $46 = ($$116>>>0)<(4);
      if ($46) {
       $$116$lcssa = $$116;$i$017$lcssa = $i$017;
       label = 19;
       break;
      }
      $47 = (($$116) + -4)|0;
      $48 = HEAP32[$2>>2]|0;
      $49 = ((($48)) + 56|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = HEAP32[$37>>2]|0;
      $52 = (($51) + ($i$017<<3)|0);
      $53 = (_FLAC__bitreader_read_uint32_little_endian($50,$52)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       $i$017$lcssa78 = $i$017;
       label = 21;
       break;
      }
      $55 = HEAP32[$37>>2]|0;
      $56 = (($55) + ($i$017<<3)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0);
      if ($58) {
       $87 = (((($55) + ($i$017<<3)|0)) + 4|0);
       HEAP32[$87>>2] = 0;
       $$2 = $47;
      } else {
       $59 = ($47>>>0)<($57>>>0);
       if ($59) {
        $$lcssa88 = $47;$i$017$lcssa79 = $i$017;
        label = 24;
        break;
       }
       $60 = (($47) - ($57))|0;
       $61 = (_safe_malloc_add_2op_175($57)|0);
       $62 = HEAP32[$37>>2]|0;
       $63 = (((($62) + ($i$017<<3)|0)) + 4|0);
       HEAP32[$63>>2] = $61;
       $64 = ($61|0)==(0|0);
       if ($64) {
        $i$017$lcssa80 = $i$017;
        label = 26;
        break;
       }
       $66 = HEAP32[$37>>2]|0;
       $67 = (((($66) + ($i$017<<3)|0)) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = (($66) + ($i$017<<3)|0);
       $70 = HEAP32[$69>>2]|0;
       _memset(($68|0),0,($70|0))|0;
       $71 = HEAP32[$2>>2]|0;
       $72 = ((($71)) + 56|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = HEAP32[$37>>2]|0;
       $75 = (((($74) + ($i$017<<3)|0)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (($74) + ($i$017<<3)|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($73,$76,$78)|0);
       $80 = ($79|0)==(0);
       if ($80) {
        $$lcssa92 = $60;$i$017$lcssa81 = $i$017;
        label = 28;
        break;
       }
       $81 = HEAP32[$37>>2]|0;
       $82 = (($81) + ($i$017<<3)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (((($81) + ($i$017<<3)|0)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($85) + ($83)|0);
       HEAP8[$86>>0] = 0;
       $$2 = $60;
      }
      $88 = (($i$017) + 1)|0;
      $89 = HEAP32[$30>>2]|0;
      $90 = ($88>>>0)<($89>>>0);
      if ($90) {
       $$116 = $$2;$i$017 = $88;
      } else {
       $$3 = $$2;
       break L1;
      }
     }
     if ((label|0) == 19) {
      HEAP32[$30>>2] = $i$017$lcssa;
      $$3 = $$116$lcssa;
      break;
     }
     else if ((label|0) == 21) {
      HEAP32[$30>>2] = $i$017$lcssa78;
      $$01 = 0;
      return ($$01|0);
     }
     else if ((label|0) == 24) {
      HEAP32[$30>>2] = $i$017$lcssa79;
      $$3 = $$lcssa88;
      break;
     }
     else if ((label|0) == 26) {
      $65 = HEAP32[$decoder>>2]|0;
      HEAP32[$65>>2] = 8;
      HEAP32[$30>>2] = $i$017$lcssa80;
      $$01 = 0;
      return ($$01|0);
     }
     else if ((label|0) == 28) {
      HEAP32[$30>>2] = $i$017$lcssa81;
      $$3 = $$lcssa92;
      break;
     }
    }
   }
  } else {
   $$3 = $length;
  }
 } while(0);
 $91 = ($$3|0)==(0);
 if (!($91)) {
  $92 = ((($obj)) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)==(0);
  if ($94) {
   $95 = ((($obj)) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   _free($96);
   HEAP32[$95>>2] = 0;
  }
  $97 = ((($decoder)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 56|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($100,$$3)|0);
  $102 = ($101|0)==(0);
  if ($102) {
   $$01 = 0;
   return ($$01|0);
  }
 }
 $$01 = 1;
 return ($$01|0);
}
function _read_metadata_cuesheet_($decoder,$obj) {
 $decoder = $decoder|0;
 $obj = $obj|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$05 = 0, $j$04 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 _memset(($obj|0),0,160)|0;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[1052>>2]|0;
 $5 = $4 >>> 3;
 $6 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($3,$obj,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($obj)) + 136|0);
 $12 = HEAP32[1124>>2]|0;
 $13 = (_FLAC__bitreader_read_raw_uint64($10,$11,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[1108>>2]|0;
 $19 = (_FLAC__bitreader_read_raw_uint32($17,$x,$18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$x>>2]|0;
 $22 = ($21|0)!=(0);
 $23 = $22&1;
 $24 = ((($obj)) + 144|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$0>>2]|0;
 $26 = ((($25)) + 56|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[1056>>2]|0;
 $29 = (_FLAC__bitreader_skip_bits_no_crc($27,$28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = ((($31)) + 56|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[1084>>2]|0;
 $35 = (_FLAC__bitreader_read_raw_uint32($33,$x,$34)|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = HEAP32[$x>>2]|0;
 $38 = ((($obj)) + 148|0);
 HEAP32[$38>>2] = $37;
 $39 = ($37|0)==(0);
 if ($39) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (_safe_calloc_177($37,32)|0);
 $41 = ((($obj)) + 152|0);
 HEAP32[$41>>2] = $40;
 $42 = ($40|0)==(0|0);
 if ($42) {
  $56 = HEAP32[$decoder>>2]|0;
  HEAP32[$56>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = HEAP32[$38>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[1124>>2]|0;
 $46 = HEAP32[1084>>2]|0;
 $47 = HEAP32[1044>>2]|0;
 $48 = $47 >>> 3;
 $49 = HEAP32[1108>>2]|0;
 $50 = HEAP32[1108>>2]|0;
 $51 = HEAP32[1048>>2]|0;
 $52 = HEAP32[1084>>2]|0;
 $53 = HEAP32[1124>>2]|0;
 $54 = HEAP32[1084>>2]|0;
 $55 = HEAP32[1068>>2]|0;
 $i$05 = 0;
 L26: while(1) {
  $57 = HEAP32[$41>>2]|0;
  $58 = HEAP32[$0>>2]|0;
  $59 = ((($58)) + 56|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($57) + ($i$05<<5)|0);
  $62 = (_FLAC__bitreader_read_raw_uint64($60,$61,$45)|0);
  $63 = ($62|0)==(0);
  if ($63) {
   $$0 = 0;
   label = 27;
   break;
  }
  $64 = HEAP32[$0>>2]|0;
  $65 = ((($64)) + 56|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_FLAC__bitreader_read_raw_uint32($66,$x,$46)|0);
  $68 = ($67|0)==(0);
  if ($68) {
   $$0 = 0;
   label = 27;
   break;
  }
  $69 = HEAP32[$x>>2]|0;
  $70 = $69&255;
  $71 = (((($57) + ($i$05<<5)|0)) + 8|0);
  HEAP8[$71>>0] = $70;
  $72 = HEAP32[$0>>2]|0;
  $73 = ((($72)) + 56|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (((($57) + ($i$05<<5)|0)) + 9|0);
  $76 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($74,$75,$48)|0);
  $77 = ($76|0)==(0);
  if ($77) {
   $$0 = 0;
   label = 27;
   break;
  }
  $78 = HEAP32[$0>>2]|0;
  $79 = ((($78)) + 56|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (_FLAC__bitreader_read_raw_uint32($80,$x,$49)|0);
  $82 = ($81|0)==(0);
  if ($82) {
   $$0 = 0;
   label = 27;
   break;
  }
  $83 = HEAP32[$x>>2]|0;
  $84 = (((($57) + ($i$05<<5)|0)) + 22|0);
  $85 = $83&255;
  $86 = HEAP8[$84>>0]|0;
  $87 = $85 & 1;
  $88 = $86 & -2;
  $89 = $88 | $87;
  HEAP8[$84>>0] = $89;
  $90 = HEAP32[$0>>2]|0;
  $91 = ((($90)) + 56|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (_FLAC__bitreader_read_raw_uint32($92,$x,$50)|0);
  $94 = ($93|0)==(0);
  if ($94) {
   $$0 = 0;
   label = 27;
   break;
  }
  $95 = HEAP32[$x>>2]|0;
  $96 = $95&255;
  $97 = HEAP8[$84>>0]|0;
  $98 = ($96 << 1)&255;
  $99 = $98 & 2;
  $100 = $97 & -3;
  $101 = $99 | $100;
  HEAP8[$84>>0] = $101;
  $102 = HEAP32[$0>>2]|0;
  $103 = ((($102)) + 56|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (_FLAC__bitreader_skip_bits_no_crc($104,$51)|0);
  $106 = ($105|0)==(0);
  if ($106) {
   $$0 = 0;
   label = 27;
   break;
  }
  $107 = HEAP32[$0>>2]|0;
  $108 = ((($107)) + 56|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (_FLAC__bitreader_read_raw_uint32($109,$x,$52)|0);
  $111 = ($110|0)==(0);
  if ($111) {
   $$0 = 0;
   label = 27;
   break;
  }
  $112 = HEAP32[$x>>2]|0;
  $113 = $112&255;
  $114 = (((($57) + ($i$05<<5)|0)) + 23|0);
  HEAP8[$114>>0] = $113;
  $115 = $112 & 255;
  $116 = ($115|0)==(0);
  if (!($116)) {
   $117 = (_safe_calloc_177($115,16)|0);
   $118 = (((($57) + ($i$05<<5)|0)) + 24|0);
   HEAP32[$118>>2] = $117;
   $119 = ($117|0)==(0|0);
   if ($119) {
    label = 21;
    break;
   }
   $120 = HEAP8[$114>>0]|0;
   $121 = ($120<<24>>24)==(0);
   if (!($121)) {
    $j$04 = 0;
    while(1) {
     $127 = HEAP32[$118>>2]|0;
     $128 = HEAP32[$0>>2]|0;
     $129 = ((($128)) + 56|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($127) + ($j$04<<4)|0);
     $132 = (_FLAC__bitreader_read_raw_uint64($130,$131,$53)|0);
     $133 = ($132|0)==(0);
     if ($133) {
      $$0 = 0;
      label = 27;
      break L26;
     }
     $134 = HEAP32[$0>>2]|0;
     $135 = ((($134)) + 56|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (_FLAC__bitreader_read_raw_uint32($136,$x,$54)|0);
     $138 = ($137|0)==(0);
     if ($138) {
      $$0 = 0;
      label = 27;
      break L26;
     }
     $139 = HEAP32[$x>>2]|0;
     $140 = $139&255;
     $141 = (((($127) + ($j$04<<4)|0)) + 8|0);
     HEAP8[$141>>0] = $140;
     $142 = HEAP32[$0>>2]|0;
     $143 = ((($142)) + 56|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (_FLAC__bitreader_skip_bits_no_crc($144,$55)|0);
     $146 = ($145|0)==(0);
     $125 = (($j$04) + 1)|0;
     if ($146) {
      $$0 = 0;
      label = 27;
      break L26;
     }
     $123 = HEAP8[$114>>0]|0;
     $124 = $123&255;
     $126 = ($125>>>0)<($124>>>0);
     if ($126) {
      $j$04 = $125;
     } else {
      break;
     }
    }
   }
  }
  $147 = (($i$05) + 1)|0;
  $148 = HEAP32[$38>>2]|0;
  $149 = ($147>>>0)<($148>>>0);
  if ($149) {
   $i$05 = $147;
  } else {
   $$0 = 1;
   label = 27;
   break;
  }
 }
 if ((label|0) == 21) {
  $122 = HEAP32[$decoder>>2]|0;
  HEAP32[$122>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 27) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _read_metadata_picture_($decoder,$obj) {
 $decoder = $decoder|0;
 $obj = $obj|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[1060>>2]|0;
 $5 = (_FLAC__bitreader_read_raw_uint32($3,$x,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$x>>2]|0;
 HEAP32[$obj>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[1060>>2]|0;
 $12 = (_FLAC__bitreader_read_raw_uint32($10,$x,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$x>>2]|0;
 $15 = (_safe_malloc_add_2op_175($14)|0);
 $16 = ((($obj)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)==(0|0);
 if ($17) {
  $18 = HEAP32[$decoder>>2]|0;
  HEAP32[$18>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$x>>2]|0;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($23,$15,$19)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $26 = HEAP32[$x>>2]|0;
 $27 = HEAP32[$16>>2]|0;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($29)) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[1060>>2]|0;
 $33 = (_FLAC__bitreader_read_raw_uint32($31,$x,$32)|0);
 $34 = ($33|0)==(0);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = HEAP32[$x>>2]|0;
 $36 = (_safe_malloc_add_2op_175($35)|0);
 $37 = ((($obj)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = ($36|0)==(0|0);
 if ($38) {
  $39 = HEAP32[$decoder>>2]|0;
  HEAP32[$39>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$x>>2]|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = HEAP32[$0>>2]|0;
  $43 = ((($42)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($44,$36,$40)|0);
  $46 = ($45|0)==(0);
  if ($46) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $47 = HEAP32[$x>>2]|0;
 $48 = HEAP32[$37>>2]|0;
 $49 = (($48) + ($47)|0);
 HEAP8[$49>>0] = 0;
 $50 = HEAP32[$0>>2]|0;
 $51 = ((($50)) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($obj)) + 12|0);
 $54 = HEAP32[1060>>2]|0;
 $55 = (_FLAC__bitreader_read_raw_uint32($52,$53,$54)|0);
 $56 = ($55|0)==(0);
 if ($56) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = HEAP32[$0>>2]|0;
 $58 = ((($57)) + 56|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($obj)) + 16|0);
 $61 = HEAP32[1060>>2]|0;
 $62 = (_FLAC__bitreader_read_raw_uint32($59,$60,$61)|0);
 $63 = ($62|0)==(0);
 if ($63) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $64 = HEAP32[$0>>2]|0;
 $65 = ((($64)) + 56|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($obj)) + 20|0);
 $68 = HEAP32[1060>>2]|0;
 $69 = (_FLAC__bitreader_read_raw_uint32($66,$67,$68)|0);
 $70 = ($69|0)==(0);
 if ($70) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = HEAP32[$0>>2]|0;
 $72 = ((($71)) + 56|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($obj)) + 24|0);
 $75 = HEAP32[1060>>2]|0;
 $76 = (_FLAC__bitreader_read_raw_uint32($73,$74,$75)|0);
 $77 = ($76|0)==(0);
 if ($77) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $78 = HEAP32[$0>>2]|0;
 $79 = ((($78)) + 56|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($obj)) + 28|0);
 $82 = HEAP32[1060>>2]|0;
 $83 = (_FLAC__bitreader_read_raw_uint32($80,$81,$82)|0);
 $84 = ($83|0)==(0);
 if ($84) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $85 = HEAP32[$81>>2]|0;
 $86 = (_safe_malloc_176($85)|0);
 $87 = ((($obj)) + 32|0);
 HEAP32[$87>>2] = $86;
 $88 = ($86|0)==(0|0);
 if ($88) {
  $89 = HEAP32[$decoder>>2]|0;
  HEAP32[$89>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $90 = HEAP32[$81>>2]|0;
 $91 = ($90|0)==(0);
 if (!($91)) {
  $92 = HEAP32[$0>>2]|0;
  $93 = ((($92)) + 56|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($94,$86,$90)|0);
  $96 = ($95|0)==(0);
  if ($96) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _safe_malloc_add_2op_175($size1) {
 $size1 = $size1|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size1|0)==(-1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($size1) + 1)|0;
 $2 = (_safe_malloc_176($1)|0);
 $$0 = $2;
 return ($$0|0);
}
function _safe_malloc_176($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $1 = $0&1;
 $$size = (($1) + ($size))|0;
 $2 = (_malloc($$size)|0);
 return ($2|0);
}
function _safe_calloc_177($nmemb,$size) {
 $nmemb = $nmemb|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nmemb|0)!=(0);
 $1 = ($size|0)!=(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $3 = (_calloc($nmemb,$size)|0);
  $$0 = $3;
  return ($$0|0);
 } else {
  $2 = (_malloc(1)|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _skip_id3v2_tag_($decoder) {
 $decoder = $decoder|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FLAC__bitreader_read_raw_uint32($3,$x,24)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FLAC__bitreader_read_raw_uint32($8,$x,8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$x>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_FLAC__bitreader_read_raw_uint32($14,$x,8)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$x>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_FLAC__bitreader_read_raw_uint32($20,$x,8)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$x>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (_FLAC__bitreader_read_raw_uint32($26,$x,8)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = $23 & 127;
 $30 = $17 & 127;
 $31 = $11 << 7;
 $32 = $31 & 16256;
 $33 = $30 | $32;
 $34 = $33 << 7;
 $35 = $29 | $34;
 $36 = $35 << 7;
 $37 = HEAP32[$x>>2]|0;
 $38 = $37 & 127;
 $39 = $38 | $36;
 $40 = HEAP32[$0>>2]|0;
 $41 = ((($40)) + 56|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($42,$39)|0);
 $not$ = ($43|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _safe_realloc_178($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_realloc($ptr,$size)|0);
 $1 = ($size|0)!=(0);
 $2 = ($0|0)==(0|0);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  return ($0|0);
 }
 _free($ptr);
 return ($0|0);
}
function _read_callback_($buffer,$bytes,$client_data) {
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 $client_data = $client_data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($client_data)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($1)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iii[$3 & 15]($client_data,$6)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   HEAP32[$bytes>>2] = 0;
   $9 = HEAP32[$client_data>>2]|0;
   HEAP32[$9>>2] = 4;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $10 = HEAP32[$bytes>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $40 = HEAP32[$client_data>>2]|0;
  HEAP32[$40>>2] = 7;
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($12)) + 3656|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($12)) + 6176|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17>>>0)>(20);
  if ($18) {
   $19 = HEAP32[$client_data>>2]|0;
   HEAP32[$19>>2] = 7;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($20)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_iiiii[$22 & 15]($client_data,$buffer,$bytes,$24)|0);
 $26 = ($25|0)==(2);
 if ($26) {
  $27 = HEAP32[$client_data>>2]|0;
  HEAP32[$27>>2] = 7;
  $$0 = 0;
  return ($$0|0);
 }
 $28 = HEAP32[$bytes>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = 1;
  return ($$0|0);
 }
 $30 = ($25|0)==(1);
 if (!($30)) {
  $31 = HEAP32[$0>>2]|0;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0|0);
  if ($34) {
   $$0 = 1;
   return ($$0|0);
  }
  $35 = ((($31)) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_iii[$33 & 15]($client_data,$36)|0);
  $38 = ($37|0)==(0);
  if ($38) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $39 = HEAP32[$client_data>>2]|0;
 HEAP32[$39>>2] = 4;
 $$0 = 0;
 return ($$0|0);
}
function _FLAC__stream_encoder_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_calloc(1,632)|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_calloc(1,11880)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  _free($7);
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_FLAC__bitwriter_new()|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 6856|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$5>>2]|0;
 $12 = ((($11)) + 6856|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  _free($11);
  $15 = HEAP32[$0>>2]|0;
  _free($15);
  _free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $16 = ((($11)) + 7320|0);
  HEAP32[$16>>2] = 0;
  _set_defaults_180($0);
  $17 = HEAP32[$5>>2]|0;
  $18 = ((($17)) + 11872|0);
  HEAP32[$18>>2] = 0;
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 336|0);
  $21 = ((($19)) + 6176|0);
  HEAP32[$21>>2] = $20;
  $22 = HEAP32[$5>>2]|0;
  $23 = ((($22)) + 628|0);
  $24 = ((($22)) + 6180|0);
  HEAP32[$24>>2] = $23;
  $25 = HEAP32[$5>>2]|0;
  $26 = ((($25)) + 920|0);
  $27 = ((($25)) + 6184|0);
  HEAP32[$27>>2] = $26;
  $28 = HEAP32[$5>>2]|0;
  $29 = ((($28)) + 1212|0);
  $30 = ((($28)) + 6188|0);
  HEAP32[$30>>2] = $29;
  $31 = HEAP32[$5>>2]|0;
  $32 = ((($31)) + 1504|0);
  $33 = ((($31)) + 6192|0);
  HEAP32[$33>>2] = $32;
  $34 = HEAP32[$5>>2]|0;
  $35 = ((($34)) + 1796|0);
  $36 = ((($34)) + 6196|0);
  HEAP32[$36>>2] = $35;
  $37 = HEAP32[$5>>2]|0;
  $38 = ((($37)) + 2088|0);
  $39 = ((($37)) + 6200|0);
  HEAP32[$39>>2] = $38;
  $40 = HEAP32[$5>>2]|0;
  $41 = ((($40)) + 2380|0);
  $42 = ((($40)) + 6204|0);
  HEAP32[$42>>2] = $41;
  $43 = HEAP32[$5>>2]|0;
  $44 = ((($43)) + 2672|0);
  $45 = ((($43)) + 6208|0);
  HEAP32[$45>>2] = $44;
  $46 = HEAP32[$5>>2]|0;
  $47 = ((($46)) + 2964|0);
  $48 = ((($46)) + 6212|0);
  HEAP32[$48>>2] = $47;
  $49 = HEAP32[$5>>2]|0;
  $50 = ((($49)) + 3256|0);
  $51 = ((($49)) + 6216|0);
  HEAP32[$51>>2] = $50;
  $52 = HEAP32[$5>>2]|0;
  $53 = ((($52)) + 3548|0);
  $54 = ((($52)) + 6220|0);
  HEAP32[$54>>2] = $53;
  $55 = HEAP32[$5>>2]|0;
  $56 = ((($55)) + 3840|0);
  $57 = ((($55)) + 6224|0);
  HEAP32[$57>>2] = $56;
  $58 = HEAP32[$5>>2]|0;
  $59 = ((($58)) + 4132|0);
  $60 = ((($58)) + 6228|0);
  HEAP32[$60>>2] = $59;
  $61 = HEAP32[$5>>2]|0;
  $62 = ((($61)) + 4424|0);
  $63 = ((($61)) + 6232|0);
  HEAP32[$63>>2] = $62;
  $64 = HEAP32[$5>>2]|0;
  $65 = ((($64)) + 4716|0);
  $66 = ((($64)) + 6236|0);
  HEAP32[$66>>2] = $65;
  $67 = HEAP32[$5>>2]|0;
  $68 = ((($67)) + 5008|0);
  $69 = ((($67)) + 6240|0);
  HEAP32[$69>>2] = $68;
  $70 = HEAP32[$5>>2]|0;
  $71 = ((($70)) + 5300|0);
  $72 = ((($70)) + 6244|0);
  HEAP32[$72>>2] = $71;
  $73 = HEAP32[$5>>2]|0;
  $74 = ((($73)) + 5592|0);
  $75 = ((($73)) + 6248|0);
  HEAP32[$75>>2] = $74;
  $76 = HEAP32[$5>>2]|0;
  $77 = ((($76)) + 5884|0);
  $78 = ((($76)) + 6252|0);
  HEAP32[$78>>2] = $77;
  $79 = HEAP32[$5>>2]|0;
  $80 = ((($79)) + 6256|0);
  $81 = ((($79)) + 6640|0);
  HEAP32[$81>>2] = $80;
  $82 = HEAP32[$5>>2]|0;
  $83 = ((($82)) + 6268|0);
  $84 = ((($82)) + 6644|0);
  HEAP32[$84>>2] = $83;
  $85 = HEAP32[$5>>2]|0;
  $86 = ((($85)) + 6280|0);
  $87 = ((($85)) + 6648|0);
  HEAP32[$87>>2] = $86;
  $88 = HEAP32[$5>>2]|0;
  $89 = ((($88)) + 6292|0);
  $90 = ((($88)) + 6652|0);
  HEAP32[$90>>2] = $89;
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 6304|0);
  $93 = ((($91)) + 6656|0);
  HEAP32[$93>>2] = $92;
  $94 = HEAP32[$5>>2]|0;
  $95 = ((($94)) + 6316|0);
  $96 = ((($94)) + 6660|0);
  HEAP32[$96>>2] = $95;
  $97 = HEAP32[$5>>2]|0;
  $98 = ((($97)) + 6328|0);
  $99 = ((($97)) + 6664|0);
  HEAP32[$99>>2] = $98;
  $100 = HEAP32[$5>>2]|0;
  $101 = ((($100)) + 6340|0);
  $102 = ((($100)) + 6668|0);
  HEAP32[$102>>2] = $101;
  $103 = HEAP32[$5>>2]|0;
  $104 = ((($103)) + 6352|0);
  $105 = ((($103)) + 6672|0);
  HEAP32[$105>>2] = $104;
  $106 = HEAP32[$5>>2]|0;
  $107 = ((($106)) + 6364|0);
  $108 = ((($106)) + 6676|0);
  HEAP32[$108>>2] = $107;
  $109 = HEAP32[$5>>2]|0;
  $110 = ((($109)) + 6376|0);
  $111 = ((($109)) + 6680|0);
  HEAP32[$111>>2] = $110;
  $112 = HEAP32[$5>>2]|0;
  $113 = ((($112)) + 6388|0);
  $114 = ((($112)) + 6684|0);
  HEAP32[$114>>2] = $113;
  $115 = HEAP32[$5>>2]|0;
  $116 = ((($115)) + 6400|0);
  $117 = ((($115)) + 6688|0);
  HEAP32[$117>>2] = $116;
  $118 = HEAP32[$5>>2]|0;
  $119 = ((($118)) + 6412|0);
  $120 = ((($118)) + 6692|0);
  HEAP32[$120>>2] = $119;
  $121 = HEAP32[$5>>2]|0;
  $122 = ((($121)) + 6424|0);
  $123 = ((($121)) + 6696|0);
  HEAP32[$123>>2] = $122;
  $124 = HEAP32[$5>>2]|0;
  $125 = ((($124)) + 6436|0);
  $126 = ((($124)) + 6700|0);
  HEAP32[$126>>2] = $125;
  $127 = HEAP32[$5>>2]|0;
  $128 = ((($127)) + 6448|0);
  $129 = ((($127)) + 6704|0);
  HEAP32[$129>>2] = $128;
  $130 = HEAP32[$5>>2]|0;
  $131 = ((($130)) + 6460|0);
  $132 = ((($130)) + 6708|0);
  HEAP32[$132>>2] = $131;
  $133 = HEAP32[$5>>2]|0;
  $134 = ((($133)) + 6472|0);
  $135 = ((($133)) + 6712|0);
  HEAP32[$135>>2] = $134;
  $136 = HEAP32[$5>>2]|0;
  $137 = ((($136)) + 6484|0);
  $138 = ((($136)) + 6716|0);
  HEAP32[$138>>2] = $137;
  $139 = HEAP32[$5>>2]|0;
  $140 = ((($139)) + 6256|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($140);
  $141 = HEAP32[$5>>2]|0;
  $142 = ((($141)) + 6268|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($142);
  $143 = HEAP32[$5>>2]|0;
  $144 = ((($143)) + 6280|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($144);
  $145 = HEAP32[$5>>2]|0;
  $146 = ((($145)) + 6292|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($146);
  $147 = HEAP32[$5>>2]|0;
  $148 = ((($147)) + 6304|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($148);
  $149 = HEAP32[$5>>2]|0;
  $150 = ((($149)) + 6316|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($150);
  $151 = HEAP32[$5>>2]|0;
  $152 = ((($151)) + 6328|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($152);
  $153 = HEAP32[$5>>2]|0;
  $154 = ((($153)) + 6340|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($154);
  $155 = HEAP32[$5>>2]|0;
  $156 = ((($155)) + 6352|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($156);
  $157 = HEAP32[$5>>2]|0;
  $158 = ((($157)) + 6364|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($158);
  $159 = HEAP32[$5>>2]|0;
  $160 = ((($159)) + 6376|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($160);
  $161 = HEAP32[$5>>2]|0;
  $162 = ((($161)) + 6388|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($162);
  $163 = HEAP32[$5>>2]|0;
  $164 = ((($163)) + 6400|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($164);
  $165 = HEAP32[$5>>2]|0;
  $166 = ((($165)) + 6412|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($166);
  $167 = HEAP32[$5>>2]|0;
  $168 = ((($167)) + 6424|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($168);
  $169 = HEAP32[$5>>2]|0;
  $170 = ((($169)) + 6436|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($170);
  $171 = HEAP32[$5>>2]|0;
  $172 = ((($171)) + 6448|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($172);
  $173 = HEAP32[$5>>2]|0;
  $174 = ((($173)) + 6460|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($174);
  $175 = HEAP32[$5>>2]|0;
  $176 = ((($175)) + 6472|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($176);
  $177 = HEAP32[$5>>2]|0;
  $178 = ((($177)) + 6484|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($178);
  $179 = HEAP32[$5>>2]|0;
  $180 = ((($179)) + 11748|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($180);
  $181 = HEAP32[$5>>2]|0;
  $182 = ((($181)) + 11760|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($182);
  $183 = HEAP32[$0>>2]|0;
  HEAP32[$183>>2] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__stream_encoder_delete($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($encoder|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($encoder)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 11872|0);
 HEAP32[$3>>2] = 1;
 (_FLAC__stream_encoder_finish($encoder)|0);
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 11776|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _FLAC__stream_decoder_delete($6);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 6256|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($9);
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 6268|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($11);
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 6280|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($13);
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($14)) + 6292|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($15);
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($16)) + 6304|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($17);
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + 6316|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($19);
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 6328|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($21);
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($22)) + 6340|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($23);
 $24 = HEAP32[$1>>2]|0;
 $25 = ((($24)) + 6352|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($25);
 $26 = HEAP32[$1>>2]|0;
 $27 = ((($26)) + 6364|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($27);
 $28 = HEAP32[$1>>2]|0;
 $29 = ((($28)) + 6376|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($29);
 $30 = HEAP32[$1>>2]|0;
 $31 = ((($30)) + 6388|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($31);
 $32 = HEAP32[$1>>2]|0;
 $33 = ((($32)) + 6400|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($33);
 $34 = HEAP32[$1>>2]|0;
 $35 = ((($34)) + 6412|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($35);
 $36 = HEAP32[$1>>2]|0;
 $37 = ((($36)) + 6424|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($37);
 $38 = HEAP32[$1>>2]|0;
 $39 = ((($38)) + 6436|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($39);
 $40 = HEAP32[$1>>2]|0;
 $41 = ((($40)) + 6448|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($41);
 $42 = HEAP32[$1>>2]|0;
 $43 = ((($42)) + 6460|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($43);
 $44 = HEAP32[$1>>2]|0;
 $45 = ((($44)) + 6472|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($45);
 $46 = HEAP32[$1>>2]|0;
 $47 = ((($46)) + 6484|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($47);
 $48 = HEAP32[$1>>2]|0;
 $49 = ((($48)) + 11748|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($49);
 $50 = HEAP32[$1>>2]|0;
 $51 = ((($50)) + 11760|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($51);
 $52 = HEAP32[$1>>2]|0;
 $53 = ((($52)) + 6856|0);
 $54 = HEAP32[$53>>2]|0;
 _FLAC__bitwriter_delete($54);
 $55 = HEAP32[$1>>2]|0;
 _free($55);
 $56 = HEAP32[$encoder>>2]|0;
 _free($56);
 _free($encoder);
 return;
}
function _FLAC__stream_encoder_finish($encoder) {
 $encoder = $encoder|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $error$0$ = 0, $error$1 = 0, $error$2 = 0, $error$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  label = 2;
  break;
 }
 case 1:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $error$0 = 0;
 }
 }
 if ((label|0) == 2) {
  $2 = ((($encoder)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 11872|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = ((($3)) + 7052|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $error$0 = 0;
   } else {
    $10 = ((($0)) + 36|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=($8|0);
    $13 = $12&1;
    HEAP32[$10>>2] = $8;
    $14 = (_process_frame_($encoder,$13)|0);
    $15 = ($14|0)==(0);
    $$ = $15&1;
    $error$0 = $$;
   }
  } else {
   $error$0 = 0;
  }
 }
 $16 = HEAP32[$encoder>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = ((($encoder)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 6928|0);
  $23 = ((($21)) + 7060|0);
  _FLAC__MD5Final($22,$23);
 }
 $24 = ((($encoder)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 11872|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = HEAP32[$encoder>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if ($31) {
   $32 = ((($25)) + 7292|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $error$1 = $error$0;
   } else {
    _update_metadata_($encoder);
    $35 = HEAP32[$encoder>>2]|0;
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0);
    $error$0$ = $37 ? $error$0 : 1;
    $error$1 = $error$0$;
   }
   $38 = HEAP32[$24>>2]|0;
   $39 = ((($38)) + 7304|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0|0);
   if ($41) {
    $error$2 = $error$1;
   } else {
    $42 = ((($38)) + 6872|0);
    $43 = ((($38)) + 7312|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_viii[$40 & 15]($encoder,$42,$44);
    $error$2 = $error$1;
   }
  } else {
   $error$2 = $error$0;
  }
  $45 = HEAP32[$encoder>>2]|0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $error$3 = $error$2;
  } else {
   $49 = HEAP32[$24>>2]|0;
   $50 = ((($49)) + 11776|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    $error$3 = $error$2;
   } else {
    $53 = (_FLAC__stream_decoder_finish($51)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = ($error$2|0)==(0);
     if ($55) {
      $56 = HEAP32[$encoder>>2]|0;
      HEAP32[$56>>2] = 4;
      $error$3 = 1;
     } else {
      $error$3 = 1;
     }
    } else {
     $error$3 = $error$2;
    }
   }
  }
 } else {
  $error$3 = $error$0;
 }
 $57 = HEAP32[$24>>2]|0;
 $58 = ((($57)) + 7320|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0|0);
 if (!($60)) {
  $61 = HEAP32[1572>>2]|0;
  $62 = ($59|0)==($61|0);
  if (!($62)) {
   (_fclose($59)|0);
  }
  $63 = HEAP32[$24>>2]|0;
  $64 = ((($63)) + 7320|0);
  HEAP32[$64>>2] = 0;
 }
 _free_($encoder);
 _set_defaults_180($encoder);
 $65 = ($error$3|0)!=(0);
 if (!($65)) {
  $66 = HEAP32[$encoder>>2]|0;
  HEAP32[$66>>2] = 1;
 }
 $67 = $65&1;
 $68 = $67 ^ 1;
 $$0 = $68;
 return ($$0|0);
}
function _FLAC__stream_encoder_init_stream($encoder,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data) {
 $encoder = $encoder|0;
 $write_callback = $write_callback|0;
 $seek_callback = $seek_callback|0;
 $tell_callback = $tell_callback|0;
 $metadata_callback = $metadata_callback|0;
 $client_data = $client_data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_init_stream_internal_181($encoder,0,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data,0)|0);
 return ($0|0);
}
function _FLAC__stream_encoder_set_verify($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_channels($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_bits_per_sample($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 28|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_sample_rate($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_compression_level($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$01 = 0, $$value = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$01 = 0;
  return ($$01|0);
 }
 $3 = ($value>>>0)>(8);
 $$value = $3 ? 8 : $value;
 $4 = (1128 + (($$value*44)|0)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_FLAC__stream_encoder_set_do_mid_side_stereo($encoder,$5)|0);
 $7 = $6 & 1;
 $8 = (((1128 + (($$value*44)|0)|0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_FLAC__stream_encoder_set_loose_mid_side_stereo($encoder,$9)|0);
 $11 = $7 & $10;
 $12 = (((1128 + (($$value*44)|0)|0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FLAC__stream_encoder_set_apodization($encoder,$13)|0);
 $15 = $11 & $14;
 $16 = (((1128 + (($$value*44)|0)|0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_FLAC__stream_encoder_set_max_lpc_order($encoder,$17)|0);
 $19 = $15 & $18;
 $20 = (((1128 + (($$value*44)|0)|0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_FLAC__stream_encoder_set_qlp_coeff_precision($encoder,$21)|0);
 $23 = $19 & $22;
 $24 = (((1128 + (($$value*44)|0)|0)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_FLAC__stream_encoder_set_do_qlp_coeff_prec_search($encoder,$25)|0);
 $27 = $23 & $26;
 $28 = (_FLAC__stream_encoder_set_do_escape_coding($encoder,0)|0);
 $29 = $27 & $28;
 $30 = (((1128 + (($$value*44)|0)|0)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_FLAC__stream_encoder_set_do_exhaustive_model_search($encoder,$31)|0);
 $33 = $29 & $32;
 $34 = (((1128 + (($$value*44)|0)|0)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_FLAC__stream_encoder_set_min_residual_partition_order($encoder,$35)|0);
 $37 = $33 & $36;
 $38 = (((1128 + (($$value*44)|0)|0)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_FLAC__stream_encoder_set_max_residual_partition_order($encoder,$39)|0);
 $41 = $37 & $40;
 $42 = (_FLAC__stream_encoder_set_rice_parameter_search_dist($encoder,0)|0);
 $43 = $41 & $42;
 $$01 = $43;
 return ($$01|0);
}
function _FLAC__stream_encoder_set_do_mid_side_stereo($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_loose_mid_side_stereo($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_apodization($encoder,$specification) {
 $encoder = $encoder|0;
 $specification = $specification|0;
 var $$0 = 0, $$02 = 0, $$lcssa = 0, $$lcssa39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond20 = 0, $m$017 = 0, $m7$016 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 40|0);
 HEAP32[$3>>2] = 0;
 $$02 = $specification;
 while(1) {
  $4 = (_strchr($$02,59)|0);
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $4;
   $7 = $$02;
   $8 = (($6) - ($7))|0;
   $10 = $8;
  } else {
   $9 = (_strlen($$02)|0);
   $10 = $9;
  }
  $11 = ($10|0)==(8);
  L10: do {
   if ($11) {
    $12 = (_strncmp(3470,$$02,$10)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$encoder>>2]|0;
     $15 = ((($14)) + 40|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($16) + 1)|0;
     HEAP32[$15>>2] = $17;
     $18 = HEAP32[$encoder>>2]|0;
     $19 = (((($18)) + 44|0) + ($16<<4)|0);
     HEAP32[$19>>2] = 0;
     break;
    }
    $28 = (_strncmp(3493,$$02,$10)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$encoder>>2]|0;
     $31 = ((($30)) + 40|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 1)|0;
     HEAP32[$31>>2] = $33;
     $34 = HEAP32[$encoder>>2]|0;
     $35 = (((($34)) + 44|0) + ($32<<4)|0);
     HEAP32[$35>>2] = 2;
    } else {
     $287 = 0;
     label = 21;
    }
   } else {
    switch ($10|0) {
    case 13:  {
     $20 = (_strncmp(3479,$$02,$10)|0);
     $21 = ($20|0)==(0);
     if (!($21)) {
      $287 = 1;
      label = 21;
      break L10;
     }
     $22 = HEAP32[$encoder>>2]|0;
     $23 = ((($22)) + 40|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + 1)|0;
     HEAP32[$23>>2] = $25;
     $26 = HEAP32[$encoder>>2]|0;
     $27 = (((($26)) + 44|0) + ($24<<4)|0);
     HEAP32[$27>>2] = 1;
     break L10;
     break;
    }
    case 26:  {
     $36 = (_strncmp(3502,$$02,$10)|0);
     $37 = ($36|0)==(0);
     if (!($37)) {
      $287 = 0;
      label = 21;
      break L10;
     }
     $38 = HEAP32[$encoder>>2]|0;
     $39 = ((($38)) + 40|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + 1)|0;
     HEAP32[$39>>2] = $41;
     $42 = HEAP32[$encoder>>2]|0;
     $43 = (((($42)) + 44|0) + ($40<<4)|0);
     HEAP32[$43>>2] = 3;
     break L10;
     break;
    }
    case 6:  {
     $44 = (_strncmp(3529,$$02,$10)|0);
     $45 = ($44|0)==(0);
     if (!($45)) {
      break L10;
     }
     $46 = HEAP32[$encoder>>2]|0;
     $47 = ((($46)) + 40|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + 1)|0;
     HEAP32[$47>>2] = $49;
     $50 = HEAP32[$encoder>>2]|0;
     $51 = (((($50)) + 44|0) + ($48<<4)|0);
     HEAP32[$51>>2] = 4;
     break L10;
     break;
    }
    case 7:  {
     $52 = (_strncmp(3536,$$02,$10)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $54 = HEAP32[$encoder>>2]|0;
      $55 = ((($54)) + 40|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($56) + 1)|0;
      HEAP32[$55>>2] = $57;
      $58 = HEAP32[$encoder>>2]|0;
      $59 = (((($58)) + 44|0) + ($56<<4)|0);
      HEAP32[$59>>2] = 5;
      break L10;
     }
     $78 = (_strncmp(3551,$$02,$10)|0);
     $79 = ($78|0)==(0);
     if ($79) {
      $80 = HEAP32[$encoder>>2]|0;
      $81 = ((($80)) + 40|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 1)|0;
      HEAP32[$81>>2] = $83;
      $84 = HEAP32[$encoder>>2]|0;
      $85 = (((($84)) + 44|0) + ($82<<4)|0);
      HEAP32[$85>>2] = 7;
      break L10;
     }
     $102 = (_strncmp(3578,$$02,$10)|0);
     $103 = ($102|0)==(0);
     if (!($103)) {
      $288 = 0;
      label = 37;
      break L10;
     }
     $104 = HEAP32[$encoder>>2]|0;
     $105 = ((($104)) + 40|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (($106) + 1)|0;
     HEAP32[$105>>2] = $107;
     $108 = HEAP32[$encoder>>2]|0;
     $109 = (((($108)) + 44|0) + ($106<<4)|0);
     HEAP32[$109>>2] = 10;
     break L10;
     break;
    }
    default: {
     $60 = ($10>>>0)>(7);
     if ($60) {
      $287 = 0;
      label = 21;
      break L10;
     }
     switch ($10|0) {
     case 5:  {
      label = 69;
      break L10;
      break;
     }
     case 4:  {
      break;
     }
     default: {
      break L10;
     }
     }
     $86 = (_strncmp(3559,$$02,$10)|0);
     $87 = ($86|0)==(0);
     if (!($87)) {
      $288 = 0;
      label = 37;
      break L10;
     }
     $88 = HEAP32[$encoder>>2]|0;
     $89 = ((($88)) + 40|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (($90) + 1)|0;
     HEAP32[$89>>2] = $91;
     $92 = HEAP32[$encoder>>2]|0;
     $93 = (((($92)) + 44|0) + ($90<<4)|0);
     HEAP32[$93>>2] = 8;
     break L10;
    }
    }
   }
  } while(0);
  do {
   if ((label|0) == 21) {
    label = 0;
    $61 = (_strncmp(3544,$$02,6)|0);
    $62 = ($61|0)==(0);
    if ($62) {
     $63 = ((($$02)) + 6|0);
     $64 = (+_strtod($63,0));
     $65 = $64;
     $66 = !($65 > 0.0);
     $67 = !($65 <= 0.5);
     $or$cond3 = $66 | $67;
     if ($or$cond3) {
      break;
     }
     $68 = HEAP32[$encoder>>2]|0;
     $69 = ((($68)) + 40|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (((((($68)) + 44|0) + ($70<<4)|0)) + 4|0);
     HEAPF32[$71>>2] = $65;
     $72 = HEAP32[$encoder>>2]|0;
     $73 = ((($72)) + 40|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + 1)|0;
     HEAP32[$73>>2] = $75;
     $76 = HEAP32[$encoder>>2]|0;
     $77 = (((($76)) + 44|0) + ($74<<4)|0);
     HEAP32[$77>>2] = 6;
     break;
    }
    if ($287) {
     $94 = (_strncmp(3564,$$02,$10)|0);
     $95 = ($94|0)==(0);
     if ($95) {
      $96 = HEAP32[$encoder>>2]|0;
      $97 = ((($96)) + 40|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($98) + 1)|0;
      HEAP32[$97>>2] = $99;
      $100 = HEAP32[$encoder>>2]|0;
      $101 = (((($100)) + 44|0) + ($98<<4)|0);
      HEAP32[$101>>2] = 9;
      break;
     }
    }
    $110 = ($10|0)==(9);
    if ($110) {
     $111 = (_strncmp(3586,$$02,$10)|0);
     $112 = ($111|0)==(0);
     if ($112) {
      $113 = HEAP32[$encoder>>2]|0;
      $114 = ((($113)) + 40|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + 1)|0;
      HEAP32[$114>>2] = $116;
      $117 = HEAP32[$encoder>>2]|0;
      $118 = (((($117)) + 44|0) + ($115<<4)|0);
      HEAP32[$118>>2] = 11;
     } else {
      $288 = 1;
      label = 37;
     }
    } else {
     $288 = 1;
     label = 37;
    }
   }
  } while(0);
  L48: do {
   if ((label|0) == 37) {
    label = 0;
    if ($11) {
     $119 = (_strncmp(3596,$$02,$10)|0);
     $120 = ($119|0)==(0);
     if ($120) {
      $121 = HEAP32[$encoder>>2]|0;
      $122 = ((($121)) + 40|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (($123) + 1)|0;
      HEAP32[$122>>2] = $124;
      $125 = HEAP32[$encoder>>2]|0;
      $126 = (((($125)) + 44|0) + ($123<<4)|0);
      HEAP32[$126>>2] = 12;
      break;
     }
    }
    if ($288) {
     $127 = (_strncmp(3605,$$02,6)|0);
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = ((($$02)) + 6|0);
      $130 = (+_strtod($129,0));
      $131 = $130;
      $132 = !($131 >= 0.0);
      $133 = !($131 <= 1.0);
      $or$cond4 = $132 | $133;
      if ($or$cond4) {
       break;
      }
      $134 = HEAP32[$encoder>>2]|0;
      $135 = ((($134)) + 40|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = (((((($134)) + 44|0) + ($136<<4)|0)) + 4|0);
      HEAPF32[$137>>2] = $131;
      $138 = HEAP32[$encoder>>2]|0;
      $139 = ((($138)) + 40|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($140) + 1)|0;
      HEAP32[$139>>2] = $141;
      $142 = HEAP32[$encoder>>2]|0;
      $143 = (((($142)) + 44|0) + ($140<<4)|0);
      HEAP32[$143>>2] = 13;
      break;
     }
    }
    $144 = ($10>>>0)>(15);
    if (!($144)) {
     $268 = ($10|0)==(5);
     if ($268) {
      label = 69;
      break;
     } else {
      break;
     }
    }
    $145 = (_strncmp(3612,$$02,14)|0);
    $146 = ($145|0)==(0);
    if ($146) {
     $147 = ((($$02)) + 14|0);
     $148 = (+_strtod($147,0));
     $149 = (~~(($148)));
     $150 = (_strchr($$02,47)|0);
     $151 = ($150|0)!=(0|0);
     if ($151) {
      $152 = ((($150)) + 1|0);
      $153 = (+_strtod($152,0));
      $154 = $153;
      $155 = $154 < 0.99000000953674316;
      if ($155) {
       $156 = (+_strtod($152,0));
       $157 = $156;
       $159 = $157;
      } else {
       $159 = 0.99000000953674316;
      }
     } else {
      $159 = 0.10000000149011612;
     }
     $158 = 1.0 - $159;
     $160 = 1.0 / $158;
     $161 = $160 + -1.0;
     $162 = ((($150)) + 1|0);
     $163 = $151 ? $162 : $$02;
     $164 = (_strchr($163,47)|0);
     $165 = ($164|0)==(0|0);
     if ($165) {
      $174 = 0.20000000298023224;
     } else {
      $166 = ((($164)) + 1|0);
      $167 = (+_strtod($166,0));
      $168 = $167;
      $174 = $168;
     }
     $169 = ($149|0)<(2);
     $170 = HEAP32[$encoder>>2]|0;
     $171 = ((($170)) + 40|0);
     $172 = HEAP32[$171>>2]|0;
     if ($169) {
      $173 = (((((($170)) + 44|0) + ($172<<4)|0)) + 4|0);
      HEAPF32[$173>>2] = $174;
      $175 = HEAP32[$encoder>>2]|0;
      $176 = ((($175)) + 40|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($177) + 1)|0;
      HEAP32[$176>>2] = $178;
      $179 = HEAP32[$encoder>>2]|0;
      $180 = (((($179)) + 44|0) + ($177<<4)|0);
      HEAP32[$180>>2] = 13;
      break;
     }
     $181 = (($172) + ($149))|0;
     $182 = ($181>>>0)<(32);
     if (!($182)) {
      break;
     }
     $183 = HEAP32[$encoder>>2]|0;
     $184 = ((($183)) + 40|0);
     $185 = (+($149|0));
     $186 = $185 + $161;
     $187 = ((($183)) + 40|0);
     $188 = ((($183)) + 40|0);
     $189 = ((($183)) + 40|0);
     $190 = HEAP32[$encoder>>2]|0;
     $m$017 = 0;
     while(1) {
      $191 = HEAP32[$184>>2]|0;
      $192 = (((((($183)) + 44|0) + ($191<<4)|0)) + 4|0);
      HEAPF32[$192>>2] = $174;
      $193 = (+($m$017|0));
      $194 = $193 / $186;
      $195 = HEAP32[$187>>2]|0;
      $196 = (((((($183)) + 44|0) + ($195<<4)|0)) + 8|0);
      HEAPF32[$196>>2] = $194;
      $197 = (($m$017) + 1)|0;
      $198 = (+($197|0));
      $199 = $161 + $198;
      $200 = $199 / $186;
      $201 = HEAP32[$188>>2]|0;
      $202 = (((((($183)) + 44|0) + ($201<<4)|0)) + 12|0);
      HEAPF32[$202>>2] = $200;
      $203 = HEAP32[$189>>2]|0;
      $204 = (($203) + 1)|0;
      HEAP32[$189>>2] = $204;
      $205 = (((($190)) + 44|0) + ($203<<4)|0);
      HEAP32[$205>>2] = 14;
      $exitcond20 = ($197|0)==($149|0);
      if ($exitcond20) {
       break L48;
      } else {
       $m$017 = $197;
      }
     }
    }
    $206 = ($10>>>0)>(16);
    if ($206) {
     $207 = (_strncmp(3627,$$02,15)|0);
     $208 = ($207|0)==(0);
     if ($208) {
      $209 = ((($$02)) + 15|0);
      $210 = (+_strtod($209,0));
      $211 = (~~(($210)));
      $212 = (_strchr($$02,47)|0);
      $213 = ($212|0)!=(0|0);
      if ($213) {
       $214 = ((($212)) + 1|0);
       $215 = (+_strtod($214,0));
       $216 = $215;
       $217 = $216 < 0.99000000953674316;
       if ($217) {
        $218 = (+_strtod($214,0));
        $219 = $218;
        $221 = $219;
       } else {
        $221 = 0.99000000953674316;
       }
      } else {
       $221 = 0.20000000298023224;
      }
      $220 = 1.0 - $221;
      $222 = 1.0 / $220;
      $223 = $222 + -1.0;
      $224 = ((($212)) + 1|0);
      $225 = $213 ? $224 : $$02;
      $226 = (_strchr($225,47)|0);
      $227 = ($226|0)==(0|0);
      if ($227) {
       $236 = 0.20000000298023224;
      } else {
       $228 = ((($226)) + 1|0);
       $229 = (+_strtod($228,0));
       $230 = $229;
       $236 = $230;
      }
      $231 = ($211|0)<(2);
      $232 = HEAP32[$encoder>>2]|0;
      $233 = ((($232)) + 40|0);
      $234 = HEAP32[$233>>2]|0;
      if ($231) {
       $235 = (((((($232)) + 44|0) + ($234<<4)|0)) + 4|0);
       HEAPF32[$235>>2] = $236;
       $237 = HEAP32[$encoder>>2]|0;
       $238 = ((($237)) + 40|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = (($239) + 1)|0;
       HEAP32[$238>>2] = $240;
       $241 = HEAP32[$encoder>>2]|0;
       $242 = (((($241)) + 44|0) + ($239<<4)|0);
       HEAP32[$242>>2] = 13;
       break;
      }
      $243 = (($234) + ($211))|0;
      $244 = ($243>>>0)<(32);
      if ($244) {
       $245 = HEAP32[$encoder>>2]|0;
       $246 = ((($245)) + 40|0);
       $247 = (+($211|0));
       $248 = $247 + $223;
       $249 = ((($245)) + 40|0);
       $250 = ((($245)) + 40|0);
       $251 = ((($245)) + 40|0);
       $252 = HEAP32[$encoder>>2]|0;
       $m7$016 = 0;
       while(1) {
        $253 = HEAP32[$246>>2]|0;
        $254 = (((((($245)) + 44|0) + ($253<<4)|0)) + 4|0);
        HEAPF32[$254>>2] = $236;
        $255 = (+($m7$016|0));
        $256 = $255 / $248;
        $257 = HEAP32[$249>>2]|0;
        $258 = (((((($245)) + 44|0) + ($257<<4)|0)) + 8|0);
        HEAPF32[$258>>2] = $256;
        $259 = (($m7$016) + 1)|0;
        $260 = (+($259|0));
        $261 = $223 + $260;
        $262 = $261 / $248;
        $263 = HEAP32[$250>>2]|0;
        $264 = (((((($245)) + 44|0) + ($263<<4)|0)) + 12|0);
        HEAPF32[$264>>2] = $262;
        $265 = HEAP32[$251>>2]|0;
        $266 = (($265) + 1)|0;
        HEAP32[$251>>2] = $266;
        $267 = (((($252)) + 44|0) + ($265<<4)|0);
        HEAP32[$267>>2] = 15;
        $exitcond = ($259|0)==($211|0);
        if ($exitcond) {
         break;
        } else {
         $m7$016 = $259;
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 69) {
   label = 0;
   $269 = (_strncmp(3643,$$02,$10)|0);
   $270 = ($269|0)==(0);
   if ($270) {
    $271 = HEAP32[$encoder>>2]|0;
    $272 = ((($271)) + 40|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = (($273) + 1)|0;
    HEAP32[$272>>2] = $274;
    $275 = HEAP32[$encoder>>2]|0;
    $276 = (((($275)) + 44|0) + ($273<<4)|0);
    HEAP32[$276>>2] = 16;
   }
  }
  $277 = HEAP32[$encoder>>2]|0;
  $278 = ((($277)) + 40|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = ($279|0)!=(32);
  $or$cond = $5 & $280;
  $281 = ((($4)) + 1|0);
  if ($or$cond) {
   $$02 = $281;
  } else {
   $$lcssa = $278;$$lcssa39 = $279;
   break;
  }
 }
 $282 = ($$lcssa39|0)==(0);
 if (!($282)) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$$lcssa>>2] = 1;
 $283 = HEAP32[$encoder>>2]|0;
 $284 = ((($283)) + 44|0);
 HEAP32[$284>>2] = 13;
 $285 = HEAP32[$encoder>>2]|0;
 $286 = ((($285)) + 48|0);
 HEAPF32[$286>>2] = 0.5;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_max_lpc_order($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 556|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_qlp_coeff_precision($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 560|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_do_qlp_coeff_prec_search($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 564|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_do_escape_coding($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 $$ = $2&1;
 return ($$|0);
}
function _FLAC__stream_encoder_set_do_exhaustive_model_search($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 568|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_min_residual_partition_order($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 576|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_max_residual_partition_order($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 580|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_rice_parameter_search_dist($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 $$ = $2&1;
 return ($$|0);
}
function _FLAC__stream_encoder_set_blocksize($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $value;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_set_total_samples_estimate($encoder,$0,$1) {
 $encoder = $encoder|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$encoder>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[1040>>2]|0;
 $6 = (_bitshift64Shl(1,0,($5|0))|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),-1,-1)|0);
 $9 = tempRet0;
 $10 = ($9>>>0)>($1>>>0);
 $11 = ($8>>>0)>($0>>>0);
 $12 = ($9|0)==($1|0);
 $13 = $12 & $11;
 $14 = $10 | $13;
 $15 = $14 ? $0 : $8;
 $16 = $14 ? $1 : $9;
 $17 = ((($2)) + 592|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__stream_encoder_get_state($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FLAC__stream_encoder_get_bits_per_sample($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _FLAC__stream_encoder_get_blocksize($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _FLAC__stream_encoder_process_interleaved($encoder,$buffer,$samples) {
 $encoder = $encoder|0;
 $buffer = $buffer|0;
 $samples = $samples|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $$lcssa = 0, $$lcssa12 = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $channel$021 = 0, $channel$133 = 0, $exitcond = 0, $exitcond45 = 0, $i$0$lcssa = 0;
 var $i$017 = 0, $i$1$lcssa = 0, $i$128 = 0, $j$0 = 0, $j$1$lcssa = 0, $j$116 = 0, $j$2 = 0, $j$3$lcssa = 0, $j$327 = 0, $k$0 = 0, $k$1$lcssa = 0, $k$115 = 0, $k$2 = 0, $k$3$lcssa = 0, $k$326 = 0, $k$4$lcssa = 0, $k$422 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond314 = 0;
 var $or$cond5 = 0, $or$cond525 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = ($2|0)==(2);
 $or$cond = $8 & $7;
 $9 = ((($encoder)) + 4|0);
 if ($or$cond) {
  $14 = ((($encoder)) + 4|0);
  $15 = (($4) + 1)|0;
  $j$0 = 0;$k$0 = 0;
  while(1) {
   $16 = HEAP32[$encoder>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = HEAP32[$14>>2]|0;
    $21 = ((($20)) + 11788|0);
    $22 = ((($20)) + 7052|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($15) - ($23))|0;
    $25 = (($samples) - ($j$0))|0;
    $26 = ($24>>>0)<($25>>>0);
    $$ = $26 ? $24 : $25;
    _append_to_verify_fifo_interleaved_($21,$buffer,$j$0,$2,$$);
   }
   $27 = HEAP32[$9>>2]|0;
   $28 = ((($27)) + 7052|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)<=($4>>>0);
   $31 = ($j$0>>>0)<($samples>>>0);
   $or$cond314 = $31 & $30;
   if ($or$cond314) {
    $32 = HEAP32[$9>>2]|0;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($32)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($32)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$9>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $i$017 = $29;$j$116 = $j$0;$k$115 = $k$0;
    while(1) {
     $42 = (($k$115) + 1)|0;
     $43 = (($buffer) + ($k$115<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($34) + ($i$017<<2)|0);
     HEAP32[$45>>2] = $44;
     $46 = (($k$115) + 2)|0;
     $47 = (($buffer) + ($42<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($36) + ($i$017<<2)|0);
     HEAP32[$49>>2] = $48;
     $50 = (($48) + ($44))|0;
     $51 = (($44) - ($48))|0;
     $52 = $50 >> 1;
     $53 = (($38) + ($i$017<<2)|0);
     HEAP32[$53>>2] = $51;
     $54 = (($41) + ($i$017<<2)|0);
     HEAP32[$54>>2] = $52;
     $55 = (($i$017) + 1)|0;
     $56 = (($j$116) + 1)|0;
     $57 = ($55>>>0)<=($4>>>0);
     $58 = ($56>>>0)<($samples>>>0);
     $or$cond3 = $58 & $57;
     if ($or$cond3) {
      $i$017 = $55;$j$116 = $56;$k$115 = $46;
     } else {
      $$lcssa = $58;$i$0$lcssa = $55;$j$1$lcssa = $56;$k$1$lcssa = $46;
      break;
     }
    }
   } else {
    $$lcssa = $31;$i$0$lcssa = $29;$j$1$lcssa = $j$0;$k$1$lcssa = $k$0;
   }
   $59 = HEAP32[$9>>2]|0;
   $60 = ((($59)) + 7052|0);
   HEAP32[$60>>2] = $i$0$lcssa;
   $61 = ($i$0$lcssa>>>0)>($4>>>0);
   if ($61) {
    $62 = (_process_frame_($encoder,0)|0);
    $63 = ($62|0)==(0);
    if ($63) {
     $$0 = 0;
     label = 28;
     break;
    }
    $64 = HEAP32[$9>>2]|0;
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($4<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    HEAP32[$66>>2] = $68;
    $69 = HEAP32[$9>>2]|0;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($4<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    HEAP32[$71>>2] = $73;
    $74 = HEAP32[$9>>2]|0;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($4<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    HEAP32[$76>>2] = $78;
    $79 = HEAP32[$9>>2]|0;
    $80 = ((($79)) + 40|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($4<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP32[$81>>2] = $83;
    $84 = HEAP32[$9>>2]|0;
    $85 = ((($84)) + 7052|0);
    HEAP32[$85>>2] = 1;
   }
   if ($$lcssa) {
    $j$0 = $j$1$lcssa;$k$0 = $k$1$lcssa;
   } else {
    $$0 = 1;
    label = 28;
    break;
   }
  }
  if ((label|0) == 28) {
   return ($$0|0);
  }
 }
 $10 = ($2|0)==(0);
 $11 = ($2|0)==(0);
 $12 = ((($encoder)) + 4|0);
 $13 = (($4) + 1)|0;
 $j$2 = 0;$k$2 = 0;
 while(1) {
  $86 = HEAP32[$encoder>>2]|0;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)==(0);
  if (!($89)) {
   $90 = HEAP32[$12>>2]|0;
   $91 = ((($90)) + 11788|0);
   $92 = ((($90)) + 7052|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($13) - ($93))|0;
   $95 = (($samples) - ($j$2))|0;
   $96 = ($94>>>0)<($95>>>0);
   $$4 = $96 ? $94 : $95;
   _append_to_verify_fifo_interleaved_($91,$buffer,$j$2,$2,$$4);
  }
  $97 = HEAP32[$9>>2]|0;
  $98 = ((($97)) + 7052|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99>>>0)<=($4>>>0);
  $101 = ($j$2>>>0)<($samples>>>0);
  $or$cond525 = $101 & $100;
  if ($or$cond525) {
   $i$128 = $99;$j$327 = $j$2;$k$326 = $k$2;
   while(1) {
    if ($11) {
     $k$4$lcssa = $k$326;
    } else {
     $102 = HEAP32[$9>>2]|0;
     $channel$021 = 0;$k$422 = $k$326;
     while(1) {
      $103 = (($k$422) + 1)|0;
      $104 = (($buffer) + ($k$422<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (((($102)) + 4|0) + ($channel$021<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($107) + ($i$128<<2)|0);
      HEAP32[$108>>2] = $105;
      $109 = (($channel$021) + 1)|0;
      $exitcond = ($109|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $channel$021 = $109;$k$422 = $103;
      }
     }
     $110 = (($2) + ($k$326))|0;
     $k$4$lcssa = $110;
    }
    $111 = (($i$128) + 1)|0;
    $112 = (($j$327) + 1)|0;
    $113 = ($111>>>0)<=($4>>>0);
    $114 = ($112>>>0)<($samples>>>0);
    $or$cond5 = $114 & $113;
    if ($or$cond5) {
     $i$128 = $111;$j$327 = $112;$k$326 = $k$4$lcssa;
    } else {
     $$lcssa12 = $114;$i$1$lcssa = $111;$j$3$lcssa = $112;$k$3$lcssa = $k$4$lcssa;
     break;
    }
   }
  } else {
   $$lcssa12 = $101;$i$1$lcssa = $99;$j$3$lcssa = $j$2;$k$3$lcssa = $k$2;
  }
  $115 = HEAP32[$9>>2]|0;
  $116 = ((($115)) + 7052|0);
  HEAP32[$116>>2] = $i$1$lcssa;
  $117 = ($i$1$lcssa>>>0)>($4>>>0);
  if ($117) {
   $118 = (_process_frame_($encoder,0)|0);
   $119 = ($118|0)==(0);
   if ($119) {
    $$0 = 0;
    label = 28;
    break;
   }
   $120 = HEAP32[$9>>2]|0;
   if ($10) {
    $$lcssa13 = $120;
   } else {
    $121 = HEAP32[$9>>2]|0;
    $123 = $120;$channel$133 = 0;
    while(1) {
     $122 = (((($123)) + 4|0) + ($channel$133<<2)|0);
     $124 = HEAP32[$122>>2]|0;
     $125 = (($124) + ($4<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     HEAP32[$124>>2] = $126;
     $127 = (($channel$133) + 1)|0;
     $exitcond45 = ($127|0)==($2|0);
     if ($exitcond45) {
      $$lcssa13 = $121;
      break;
     } else {
      $123 = $121;$channel$133 = $127;
     }
    }
   }
   $128 = ((($$lcssa13)) + 7052|0);
   HEAP32[$128>>2] = 1;
  }
  if ($$lcssa12) {
   $j$2 = $j$3$lcssa;$k$2 = $k$3$lcssa;
  } else {
   $$0 = 1;
   label = 28;
   break;
  }
 }
 if ((label|0) == 28) {
  return ($$0|0);
 }
 return (0)|0;
}
function _set_defaults_180($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$encoder>>2]|0;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[$encoder>>2]|0;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[$encoder>>2]|0;
 $7 = ((($6)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$encoder>>2]|0;
 $9 = ((($8)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$encoder>>2]|0;
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = 2;
 $12 = HEAP32[$encoder>>2]|0;
 $13 = ((($12)) + 28|0);
 HEAP32[$13>>2] = 16;
 $14 = HEAP32[$encoder>>2]|0;
 $15 = ((($14)) + 32|0);
 HEAP32[$15>>2] = 44100;
 $16 = HEAP32[$encoder>>2]|0;
 $17 = ((($16)) + 36|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$encoder>>2]|0;
 $19 = ((($18)) + 40|0);
 HEAP32[$19>>2] = 1;
 $20 = HEAP32[$encoder>>2]|0;
 $21 = ((($20)) + 44|0);
 HEAP32[$21>>2] = 13;
 $22 = HEAP32[$encoder>>2]|0;
 $23 = ((($22)) + 48|0);
 HEAPF32[$23>>2] = 0.5;
 $24 = HEAP32[$encoder>>2]|0;
 $25 = ((($24)) + 556|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$encoder>>2]|0;
 $27 = ((($26)) + 560|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$encoder>>2]|0;
 $29 = ((($28)) + 564|0);
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$encoder>>2]|0;
 $31 = ((($30)) + 568|0);
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$encoder>>2]|0;
 $33 = ((($32)) + 572|0);
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$encoder>>2]|0;
 $35 = ((($34)) + 576|0);
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$encoder>>2]|0;
 $37 = ((($36)) + 580|0);
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$encoder>>2]|0;
 $39 = ((($38)) + 584|0);
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$encoder>>2]|0;
 $41 = ((($40)) + 592|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$encoder>>2]|0;
 $47 = ((($46)) + 600|0);
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$encoder>>2]|0;
 $49 = ((($48)) + 604|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($encoder)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 7048|0);
 HEAP32[$52>>2] = 0;
 $53 = HEAP32[$50>>2]|0;
 $54 = ((($53)) + 7272|0);
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$50>>2]|0;
 $56 = ((($55)) + 7276|0);
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$50>>2]|0;
 $58 = ((($57)) + 7280|0);
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$50>>2]|0;
 $60 = ((($59)) + 7284|0);
 HEAP32[$60>>2] = 0;
 $61 = HEAP32[$50>>2]|0;
 $62 = ((($61)) + 7288|0);
 HEAP32[$62>>2] = 0;
 $63 = HEAP32[$50>>2]|0;
 $64 = ((($63)) + 7300|0);
 HEAP32[$64>>2] = 0;
 $65 = HEAP32[$50>>2]|0;
 $66 = ((($65)) + 7292|0);
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[$50>>2]|0;
 $68 = ((($67)) + 7296|0);
 HEAP32[$68>>2] = 0;
 $69 = HEAP32[$50>>2]|0;
 $70 = ((($69)) + 7304|0);
 HEAP32[$70>>2] = 0;
 $71 = HEAP32[$50>>2]|0;
 $72 = ((($71)) + 7308|0);
 HEAP32[$72>>2] = 0;
 $73 = HEAP32[$50>>2]|0;
 $74 = ((($73)) + 7312|0);
 HEAP32[$74>>2] = 0;
 (_FLAC__stream_encoder_set_compression_level($encoder,5)|0);
 return;
}
function _process_frame_($encoder,$is_fractional_block) {
 $encoder = $encoder|0;
 $is_fractional_block = $is_fractional_block|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $crc = sp;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($encoder)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 7060|0);
  $7 = ((($5)) + 4|0);
  $8 = ((($0)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 7)|0;
  $15 = $14 >>> 3;
  $16 = (_FLAC__MD5Accumulate($6,$7,$9,$11,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = HEAP32[$encoder>>2]|0;
   HEAP32[$18>>2] = 8;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $19 = (_process_subframes_($encoder,$is_fractional_block)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($encoder)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 6856|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_FLAC__bitwriter_zero_pad_to_byte_boundary($24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = HEAP32[$encoder>>2]|0;
  HEAP32[$27>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$21>>2]|0;
 $29 = ((($28)) + 6856|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_FLAC__bitwriter_get_write_crc16($30,$crc)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = HEAP32[$21>>2]|0;
  $34 = ((($33)) + 6856|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP16[$crc>>1]|0;
  $37 = $36&65535;
  $38 = HEAP32[1120>>2]|0;
  $39 = (_FLAC__bitwriter_write_raw_uint32($35,$37,$38)|0);
  $40 = ($39|0)==(0);
  if (!($40)) {
   $42 = HEAP32[$encoder>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_write_bitbuffer_($encoder,$44)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $47 = HEAP32[$21>>2]|0;
   $48 = ((($47)) + 7052|0);
   HEAP32[$48>>2] = 0;
   $49 = HEAP32[$21>>2]|0;
   $50 = ((($49)) + 7056|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $53 = HEAP32[$encoder>>2]|0;
   $54 = ((($53)) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$21>>2]|0;
   $57 = ((($56)) + 6920|0);
   $58 = $57;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (_i64Add(($60|0),($63|0),($55|0),0)|0);
   $65 = tempRet0;
   $66 = $57;
   $67 = $66;
   HEAP32[$67>>2] = $64;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $65;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $41 = HEAP32[$encoder>>2]|0;
 HEAP32[$41>>2] = 8;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _update_metadata_($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $b = sp;
 $0 = ((($encoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6920|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 6896|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 6900|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 6912|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[1120>>2]|0;
 $16 = HEAP32[1120>>2]|0;
 $17 = (($16) + ($15))|0;
 $18 = HEAP32[1068>>2]|0;
 $19 = (($17) + ($18))|0;
 $20 = HEAP32[1068>>2]|0;
 $21 = (($19) + ($20))|0;
 $22 = HEAP32[1036>>2]|0;
 $23 = (($21) + ($22))|0;
 $24 = HEAP32[1080>>2]|0;
 $25 = (($23) + ($24))|0;
 $26 = HEAP32[1100>>2]|0;
 $27 = (($25) + ($26))|0;
 $28 = HEAP32[1040>>2]|0;
 $29 = (($27) + ($28))|0;
 $30 = $29 >>> 3;
 $31 = (($30) + 4)|0;
 $32 = ((($1)) + 7292|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$encoder>>2]|0;
 $35 = ((($34)) + 608|0);
 $36 = $35;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (_i64Add(($31|0),0,($38|0),($41|0))|0);
 $43 = tempRet0;
 $44 = ((($1)) + 7312|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (FUNCTION_TABLE_iiiii[$33 & 15]($encoder,$42,$43,$45)|0);
 switch ($46|0) {
 case 0:  {
  $48 = HEAP32[$0>>2]|0;
  $49 = ((($48)) + 7300|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($1)) + 6928|0);
  $52 = ((($48)) + 7312|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_iiiiiii[$50 & 15]($encoder,$51,16,0,0,$53)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   $56 = HEAP32[$encoder>>2]|0;
   HEAP32[$56>>2] = 5;
   STACKTOP = sp;return;
  }
  $57 = HEAP32[1120>>2]|0;
  $58 = HEAP32[1120>>2]|0;
  $59 = HEAP32[1068>>2]|0;
  $60 = HEAP32[1068>>2]|0;
  $61 = HEAP32[1036>>2]|0;
  $62 = HEAP32[1080>>2]|0;
  $63 = HEAP32[1100>>2]|0;
  $64 = (($57) + -4)|0;
  $65 = (($64) + ($58))|0;
  $66 = (($65) + ($59))|0;
  $67 = (($66) + ($60))|0;
  $68 = (($67) + ($61))|0;
  $69 = (($68) + ($62))|0;
  $70 = (($69) + ($63))|0;
  $71 = $70 >>> 3;
  $72 = (($71) + 4)|0;
  $73 = $14 << 4;
  $74 = (($73) + 240)|0;
  $75 = $8 & 15;
  $76 = $74 | $75;
  $77 = $76&255;
  HEAP8[$b>>0] = $77;
  $78 = (_bitshift64Lshr(($5|0),($8|0),24)|0);
  $79 = tempRet0;
  $80 = $78&255;
  $81 = ((($b)) + 1|0);
  HEAP8[$81>>0] = $80;
  $82 = (_bitshift64Lshr(($5|0),($8|0),16)|0);
  $83 = tempRet0;
  $84 = $82&255;
  $85 = ((($b)) + 2|0);
  HEAP8[$85>>0] = $84;
  $86 = (_bitshift64Lshr(($5|0),($8|0),8)|0);
  $87 = tempRet0;
  $88 = $86&255;
  $89 = ((($b)) + 3|0);
  HEAP8[$89>>0] = $88;
  $90 = $5&255;
  $91 = ((($b)) + 4|0);
  HEAP8[$91>>0] = $90;
  $92 = HEAP32[$0>>2]|0;
  $93 = ((($92)) + 7292|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$encoder>>2]|0;
  $96 = ((($95)) + 608|0);
  $97 = $96;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = (_i64Add(($72|0),0,($99|0),($102|0))|0);
  $104 = tempRet0;
  $105 = ((($92)) + 7312|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_iiiii[$94 & 15]($encoder,$103,$104,$106)|0);
  switch ($107|0) {
  case 0:  {
   $109 = HEAP32[$0>>2]|0;
   $110 = ((($109)) + 7300|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ((($109)) + 7312|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (FUNCTION_TABLE_iiiiiii[$111 & 15]($encoder,$b,5,0,0,$113)|0);
   $115 = ($114|0)==(0);
   if (!($115)) {
    $116 = HEAP32[$encoder>>2]|0;
    HEAP32[$116>>2] = 5;
    STACKTOP = sp;return;
   }
   $117 = HEAP32[1120>>2]|0;
   $118 = HEAP32[1120>>2]|0;
   $119 = (($118) + ($117))|0;
   $120 = $119 >>> 3;
   $121 = (($120) + 4)|0;
   $122 = $10 >>> 16;
   $123 = $122&255;
   HEAP8[$b>>0] = $123;
   $124 = $10 >>> 8;
   $125 = $124&255;
   HEAP8[$81>>0] = $125;
   $126 = $10&255;
   HEAP8[$85>>0] = $126;
   $127 = $12 >>> 16;
   $128 = $127&255;
   HEAP8[$89>>0] = $128;
   $129 = $12 >>> 8;
   $130 = $129&255;
   HEAP8[$91>>0] = $130;
   $131 = $12&255;
   $132 = ((($b)) + 5|0);
   HEAP8[$132>>0] = $131;
   $133 = HEAP32[$0>>2]|0;
   $134 = ((($133)) + 7292|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = HEAP32[$encoder>>2]|0;
   $137 = ((($136)) + 608|0);
   $138 = $137;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (_i64Add(($140|0),($143|0),($121|0),0)|0);
   $145 = tempRet0;
   $146 = ((($133)) + 7312|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (FUNCTION_TABLE_iiiii[$135 & 15]($encoder,$144,$145,$147)|0);
   switch ($148|0) {
   case 0:  {
    $150 = HEAP32[$0>>2]|0;
    $151 = ((($150)) + 7300|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ((($150)) + 7312|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (FUNCTION_TABLE_iiiiiii[$152 & 15]($encoder,$b,6,0,0,$154)|0);
    $156 = ($155|0)==(0);
    if (!($156)) {
     $157 = HEAP32[$encoder>>2]|0;
     HEAP32[$157>>2] = 5;
     STACKTOP = sp;return;
    }
    $158 = HEAP32[$0>>2]|0;
    $159 = ((($158)) + 7048|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ($160|0)==(0|0);
    if ($161) {
     STACKTOP = sp;return;
    }
    $162 = HEAP32[$160>>2]|0;
    $163 = ($162|0)==(0);
    if ($163) {
     STACKTOP = sp;return;
    }
    $164 = HEAP32[$encoder>>2]|0;
    $165 = ((($164)) + 616|0);
    $166 = $165;
    $167 = $166;
    $168 = HEAP32[$167>>2]|0;
    $169 = (($166) + 4)|0;
    $170 = $169;
    $171 = HEAP32[$170>>2]|0;
    $172 = ($168|0)==(0);
    $173 = ($171|0)==(0);
    $174 = $172 & $173;
    if ($174) {
     STACKTOP = sp;return;
    }
    (_FLAC__format_seektable_sort($160)|0);
    $175 = HEAP32[$0>>2]|0;
    $176 = ((($175)) + 7292|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = HEAP32[$encoder>>2]|0;
    $179 = ((($178)) + 616|0);
    $180 = $179;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (($180) + 4)|0;
    $184 = $183;
    $185 = HEAP32[$184>>2]|0;
    $186 = (_i64Add(($182|0),($185|0),4,0)|0);
    $187 = tempRet0;
    $188 = ((($175)) + 7312|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (FUNCTION_TABLE_iiiii[$177 & 15]($encoder,$186,$187,$189)|0);
    switch ($190|0) {
    case 0:  {
     $191 = HEAP32[$0>>2]|0;
     $192 = ((($191)) + 7048|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = HEAP32[$193>>2]|0;
     $195 = ($194|0)==(0);
     if ($195) {
      STACKTOP = sp;return;
     }
     $196 = ((($b)) + 7|0);
     $197 = ((($b)) + 6|0);
     $198 = ((($b)) + 15|0);
     $199 = ((($b)) + 14|0);
     $200 = ((($b)) + 13|0);
     $201 = ((($b)) + 12|0);
     $202 = ((($b)) + 11|0);
     $203 = ((($b)) + 10|0);
     $204 = ((($b)) + 9|0);
     $205 = ((($b)) + 8|0);
     $206 = ((($b)) + 17|0);
     $207 = ((($b)) + 16|0);
     $216 = $193;$i$01 = 0;
     while(1) {
      $215 = ((($216)) + 4|0);
      $217 = HEAP32[$215>>2]|0;
      $218 = (($217) + (($i$01*24)|0)|0);
      $219 = $218;
      $220 = $219;
      $221 = HEAP32[$220>>2]|0;
      $222 = (($219) + 4)|0;
      $223 = $222;
      $224 = HEAP32[$223>>2]|0;
      $225 = $221&255;
      HEAP8[$196>>0] = $225;
      $226 = (_bitshift64Lshr(($221|0),($224|0),8)|0);
      $227 = tempRet0;
      $228 = $226&255;
      HEAP8[$197>>0] = $228;
      $229 = (_bitshift64Lshr(($221|0),($224|0),16)|0);
      $230 = tempRet0;
      $231 = $229&255;
      HEAP8[$132>>0] = $231;
      $232 = (_bitshift64Lshr(($221|0),($224|0),24)|0);
      $233 = tempRet0;
      $234 = $232&255;
      HEAP8[$91>>0] = $234;
      $235 = $224&255;
      HEAP8[$89>>0] = $235;
      $236 = (_bitshift64Lshr(($221|0),($224|0),40)|0);
      $237 = tempRet0;
      $238 = $236&255;
      HEAP8[$85>>0] = $238;
      $239 = (_bitshift64Lshr(($221|0),($224|0),48)|0);
      $240 = tempRet0;
      $241 = $239&255;
      HEAP8[$81>>0] = $241;
      $242 = (_bitshift64Lshr(($221|0),($224|0),56)|0);
      $243 = tempRet0;
      $244 = $242&255;
      HEAP8[$b>>0] = $244;
      $245 = HEAP32[$0>>2]|0;
      $246 = ((($245)) + 7048|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = ((($247)) + 4|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (((($249) + (($i$01*24)|0)|0)) + 8|0);
      $251 = $250;
      $252 = $251;
      $253 = HEAP32[$252>>2]|0;
      $254 = (($251) + 4)|0;
      $255 = $254;
      $256 = HEAP32[$255>>2]|0;
      $257 = $253&255;
      HEAP8[$198>>0] = $257;
      $258 = (_bitshift64Lshr(($253|0),($256|0),8)|0);
      $259 = tempRet0;
      $260 = $258&255;
      HEAP8[$199>>0] = $260;
      $261 = (_bitshift64Lshr(($253|0),($256|0),16)|0);
      $262 = tempRet0;
      $263 = $261&255;
      HEAP8[$200>>0] = $263;
      $264 = (_bitshift64Lshr(($253|0),($256|0),24)|0);
      $265 = tempRet0;
      $266 = $264&255;
      HEAP8[$201>>0] = $266;
      $267 = $256&255;
      HEAP8[$202>>0] = $267;
      $268 = (_bitshift64Lshr(($253|0),($256|0),40)|0);
      $269 = tempRet0;
      $270 = $268&255;
      HEAP8[$203>>0] = $270;
      $271 = (_bitshift64Lshr(($253|0),($256|0),48)|0);
      $272 = tempRet0;
      $273 = $271&255;
      HEAP8[$204>>0] = $273;
      $274 = (_bitshift64Lshr(($253|0),($256|0),56)|0);
      $275 = tempRet0;
      $276 = $274&255;
      HEAP8[$205>>0] = $276;
      $277 = HEAP32[$0>>2]|0;
      $278 = ((($277)) + 7048|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ((($279)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (((($281) + (($i$01*24)|0)|0)) + 16|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = $283&255;
      HEAP8[$206>>0] = $284;
      $285 = $283 >>> 8;
      $286 = $285&255;
      HEAP8[$207>>0] = $286;
      $287 = HEAP32[$0>>2]|0;
      $288 = ((($287)) + 7300|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = ((($287)) + 7312|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (FUNCTION_TABLE_iiiiiii[$289 & 15]($encoder,$b,18,0,0,$291)|0);
      $293 = ($292|0)==(0);
      $213 = (($i$01) + 1)|0;
      if (!($293)) {
       break;
      }
      $209 = HEAP32[$0>>2]|0;
      $210 = ((($209)) + 7048|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = HEAP32[$211>>2]|0;
      $214 = ($213>>>0)<($212>>>0);
      if ($214) {
       $216 = $211;$i$01 = $213;
      } else {
       label = 23;
       break;
      }
     }
     if ((label|0) == 23) {
      STACKTOP = sp;return;
     }
     $294 = HEAP32[$encoder>>2]|0;
     HEAP32[$294>>2] = 5;
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $208 = HEAP32[$encoder>>2]|0;
     HEAP32[$208>>2] = 5;
     STACKTOP = sp;return;
     break;
    }
    default: {
     STACKTOP = sp;return;
    }
    }
    break;
   }
   case 1:  {
    $149 = HEAP32[$encoder>>2]|0;
    HEAP32[$149>>2] = 5;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 1:  {
   $108 = HEAP32[$encoder>>2]|0;
   HEAP32[$108>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 1:  {
  $47 = HEAP32[$encoder>>2]|0;
  HEAP32[$47>>2] = 5;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _free_($encoder) {
 $encoder = $encoder|0;
 var $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $channel$013 = 0, $i$018 = 0;
 var $i$214 = 0, $i$59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 600|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
  $4 = HEAP32[$encoder>>2]|0;
  $5 = ((($4)) + 600|0);
  HEAP32[$5>>2] = 0;
  $6 = HEAP32[$encoder>>2]|0;
  $7 = ((($6)) + 604|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = HEAP32[$encoder>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = ((($encoder)) + 4|0);
  $i$018 = 0;
  while(1) {
   $13 = HEAP32[$12>>2]|0;
   $14 = (((($13)) + 7352|0) + ($i$018<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    _free($15);
    $17 = HEAP32[$12>>2]|0;
    $18 = (((($17)) + 7352|0) + ($i$018<<2)|0);
    HEAP32[$18>>2] = 0;
   }
   $19 = HEAP32[$12>>2]|0;
   $20 = (((($19)) + 7392|0) + ($i$018<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    _free($21);
    $23 = HEAP32[$12>>2]|0;
    $24 = (((($23)) + 7392|0) + ($i$018<<2)|0);
    HEAP32[$24>>2] = 0;
   }
   $25 = (($i$018) + 1)|0;
   $26 = HEAP32[$encoder>>2]|0;
   $27 = ((($26)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($25>>>0)<($28>>>0);
   if ($29) {
    $i$018 = $25;
   } else {
    break;
   }
  }
 }
 $30 = ((($encoder)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 7384|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  _free($33);
  $35 = HEAP32[$30>>2]|0;
  $36 = ((($35)) + 7384|0);
  HEAP32[$36>>2] = 0;
 }
 $37 = HEAP32[$30>>2]|0;
 $38 = ((($37)) + 7424|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  _free($39);
  $41 = HEAP32[$30>>2]|0;
  $42 = ((($41)) + 7424|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = HEAP32[$30>>2]|0;
 $44 = ((($43)) + 7388|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  _free($45);
  $144 = HEAP32[$30>>2]|0;
  $145 = ((($144)) + 7388|0);
  HEAP32[$145>>2] = 0;
 }
 $146 = HEAP32[$30>>2]|0;
 $147 = ((($146)) + 7428|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(0|0);
 if (!($149)) {
  _free($148);
  $150 = HEAP32[$30>>2]|0;
  $151 = ((($150)) + 7428|0);
  HEAP32[$151>>2] = 0;
 }
 $152 = HEAP32[$encoder>>2]|0;
 $153 = ((($152)) + 40|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)==(0);
 $52 = ((($encoder)) + 4|0);
 $156 = HEAP32[$52>>2]|0;
 if ($155) {
  $$lcssa8 = $156;
 } else {
  $48 = $156;$i$214 = 0;
  while(1) {
   $47 = (((($48)) + 7432|0) + ($i$214<<2)|0);
   $49 = HEAP32[$47>>2]|0;
   $50 = ($49|0)==(0|0);
   if (!($50)) {
    _free($49);
    $51 = HEAP32[$52>>2]|0;
    $53 = (((($51)) + 7432|0) + ($i$214<<2)|0);
    HEAP32[$53>>2] = 0;
   }
   $54 = (($i$214) + 1)|0;
   $55 = HEAP32[$encoder>>2]|0;
   $56 = ((($55)) + 40|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($54>>>0)<($57>>>0);
   $59 = HEAP32[$52>>2]|0;
   if ($58) {
    $48 = $59;$i$214 = $54;
   } else {
    $$lcssa8 = $59;
    break;
   }
  }
 }
 $60 = ((($$lcssa8)) + 7560|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  _free($61);
  $63 = HEAP32[$52>>2]|0;
  $64 = ((($63)) + 7560|0);
  HEAP32[$64>>2] = 0;
 }
 $65 = HEAP32[$encoder>>2]|0;
 $66 = ((($65)) + 24|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $channel$013 = 0;
  while(1) {
   $69 = HEAP32[$52>>2]|0;
   $70 = (((($69)) + 7564|0) + ($channel$013<<3)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    _free($71);
    $73 = HEAP32[$52>>2]|0;
    $74 = (((($73)) + 7564|0) + ($channel$013<<3)|0);
    HEAP32[$74>>2] = 0;
   }
   $75 = HEAP32[$52>>2]|0;
   $76 = (((((($75)) + 7564|0) + ($channel$013<<3)|0)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0|0);
   if (!($78)) {
    _free($77);
    $137 = HEAP32[$52>>2]|0;
    $138 = (((((($137)) + 7564|0) + ($channel$013<<3)|0)) + 4|0);
    HEAP32[$138>>2] = 0;
   }
   $139 = (($channel$013) + 1)|0;
   $140 = HEAP32[$encoder>>2]|0;
   $141 = ((($140)) + 24|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($139>>>0)<($142>>>0);
   if ($143) {
    $channel$013 = $139;
   } else {
    break;
   }
  }
 }
 $79 = HEAP32[$52>>2]|0;
 $80 = ((($79)) + 7628|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 if (!($82)) {
  _free($81);
  $83 = HEAP32[$52>>2]|0;
  $84 = ((($83)) + 7628|0);
  HEAP32[$84>>2] = 0;
 }
 $85 = HEAP32[$52>>2]|0;
 $86 = ((($85)) + 7632|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  _free($87);
  $120 = HEAP32[$52>>2]|0;
  $121 = ((($120)) + 7632|0);
  HEAP32[$121>>2] = 0;
 }
 $122 = HEAP32[$52>>2]|0;
 $123 = ((($122)) + 7636|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)==(0|0);
 if (!($125)) {
  _free($124);
  $126 = HEAP32[$52>>2]|0;
  $127 = ((($126)) + 7636|0);
  HEAP32[$127>>2] = 0;
 }
 $128 = HEAP32[$52>>2]|0;
 $129 = ((($128)) + 7640|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)==(0|0);
 if (!($131)) {
  _free($130);
  $132 = HEAP32[$52>>2]|0;
  $133 = ((($132)) + 7640|0);
  HEAP32[$133>>2] = 0;
 }
 $134 = HEAP32[$52>>2]|0;
 $135 = ((($134)) + 7644|0);
 $89 = HEAP32[$135>>2]|0;
 $136 = ($89|0)==(0|0);
 if (!($136)) {
  _free($89);
  $90 = HEAP32[$52>>2]|0;
  $91 = ((($90)) + 7644|0);
  HEAP32[$91>>2] = 0;
 }
 $92 = HEAP32[$52>>2]|0;
 $93 = ((($92)) + 7648|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if (!($95)) {
  _free($94);
  $96 = HEAP32[$52>>2]|0;
  $97 = ((($96)) + 7648|0);
  HEAP32[$97>>2] = 0;
 }
 $98 = HEAP32[$encoder>>2]|0;
 $99 = ((($98)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)==(0);
 if ($101) {
  $117 = HEAP32[$52>>2]|0;
  $118 = ((($117)) + 6856|0);
  $119 = HEAP32[$118>>2]|0;
  _FLAC__bitwriter_free($119);
  return;
 }
 $102 = HEAP32[$encoder>>2]|0;
 $103 = ((($102)) + 24|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  $117 = HEAP32[$52>>2]|0;
  $118 = ((($117)) + 6856|0);
  $119 = HEAP32[$118>>2]|0;
  _FLAC__bitwriter_free($119);
  return;
 } else {
  $i$59 = 0;
 }
 while(1) {
  $106 = HEAP32[$52>>2]|0;
  $107 = (((($106)) + 11788|0) + ($i$59<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(0|0);
  if (!($109)) {
   _free($108);
   $110 = HEAP32[$52>>2]|0;
   $111 = (((($110)) + 11788|0) + ($i$59<<2)|0);
   HEAP32[$111>>2] = 0;
  }
  $112 = (($i$59) + 1)|0;
  $113 = HEAP32[$encoder>>2]|0;
  $114 = ((($113)) + 24|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112>>>0)<($115>>>0);
  if ($116) {
   $i$59 = $112;
  } else {
   break;
  }
 }
 $117 = HEAP32[$52>>2]|0;
 $118 = ((($117)) + 6856|0);
 $119 = HEAP32[$118>>2]|0;
 _FLAC__bitwriter_free($119);
 return;
}
function _init_stream_internal_181($encoder,$read_callback,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data,$is_ogg) {
 $encoder = $encoder|0;
 $read_callback = $read_callback|0;
 $write_callback = $write_callback|0;
 $seek_callback = $seek_callback|0;
 $tell_callback = $tell_callback|0;
 $metadata_callback = $metadata_callback|0;
 $client_data = $client_data|0;
 $is_ogg = $is_ogg|0;
 var $$ = 0, $$1 = 0, $$lcssa = 0, $$lcssa19 = 0, $$lcssa22 = 0, $$lcssa83 = 0, $$lcssa87 = 0, $$off = 0, $$off8 = 0, $$off9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$043 = 0, $i$140 = 0, $i$335 = 0, $i$432 = 0, $i$626 = 0, $i$725 = 0, $i2$051 = 0, $metadata_has_seektable$044 = 0, $metadata_has_seektable$1 = 0, $metadata_has_vorbis_comment$0$lcssa = 0;
 var $metadata_has_vorbis_comment$045 = 0, $metadata_has_vorbis_comment$1 = 0, $metadata_picture_has_type1$046 = 0, $metadata_picture_has_type1$1 = 0, $metadata_picture_has_type2$047 = 0, $metadata_picture_has_type2$1 = 0, $not$ = 0, $or$cond = 0, $vorbis_comment = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vorbis_comment = sp;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $$1 = 13;
  STACKTOP = sp;return ($$1|0);
 }
 $3 = ($is_ogg|0)==(0);
 if (!($3)) {
  $$1 = 2;
  STACKTOP = sp;return ($$1|0);
 }
 $4 = ($write_callback|0)==(0|0);
 if ($4) {
  $$1 = 3;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = ($seek_callback|0)!=(0|0);
 $6 = ($tell_callback|0)==(0|0);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $$1 = 3;
  STACKTOP = sp;return ($$1|0);
 }
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = ($9>>>0)>(7);
 if ($10) {
  $$1 = 4;
  STACKTOP = sp;return ($$1|0);
 }
 $11 = ($8|0)==(2);
 $12 = ((($0)) + 16|0);
 if ($11) {
  $15 = HEAP32[$12>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = ((($0)) + 20|0);
   HEAP32[$17>>2] = 0;
  }
 } else {
  HEAP32[$12>>2] = 0;
  $13 = HEAP32[$encoder>>2]|0;
  $14 = ((($13)) + 20|0);
  HEAP32[$14>>2] = 0;
 }
 $18 = HEAP32[$encoder>>2]|0;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)>(31);
 if ($21) {
  $22 = ((($18)) + 16|0);
  HEAP32[$22>>2] = 0;
 }
 $23 = HEAP32[$encoder>>2]|0;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $$off = (($25) + -4)|0;
 $26 = ($$off>>>0)>(20);
 if ($26) {
  $$1 = 5;
  STACKTOP = sp;return ($$1|0);
 }
 $27 = ((($23)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_FLAC__format_sample_rate_is_valid($28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$1 = 6;
  STACKTOP = sp;return ($$1|0);
 }
 $31 = HEAP32[$encoder>>2]|0;
 $32 = ((($31)) + 36|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 do {
  if ($34) {
   $35 = ((($31)) + 556|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   if ($37) {
    HEAP32[$32>>2] = 1152;
    break;
   } else {
    HEAP32[$32>>2] = 4096;
    break;
   }
  }
 } while(0);
 $38 = HEAP32[$encoder>>2]|0;
 $39 = ((($38)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $$off8 = (($40) + -16)|0;
 $41 = ($$off8>>>0)>(65519);
 if ($41) {
  $$1 = 7;
  STACKTOP = sp;return ($$1|0);
 }
 $42 = ((($38)) + 556|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43>>>0)>(32);
 if ($44) {
  $$1 = 8;
  STACKTOP = sp;return ($$1|0);
 }
 $45 = ($40>>>0)<($43>>>0);
 if ($45) {
  $$1 = 10;
  STACKTOP = sp;return ($$1|0);
 }
 $46 = ((($38)) + 560|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0);
 do {
  if ($48) {
   $49 = ((($38)) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50>>>0)<(16);
   if ($51) {
    $52 = $50 >>> 1;
    $53 = (($52) + 2)|0;
    $54 = ($53>>>0)<(5);
    $$ = $54 ? 5 : $53;
    HEAP32[$46>>2] = $$;
    break;
   }
   $55 = ($50|0)==(16);
   if (!($55)) {
    $62 = ($40>>>0)<(385);
    if ($62) {
     HEAP32[$46>>2] = 13;
     break;
    }
    $63 = ($40>>>0)<(1153);
    if ($63) {
     HEAP32[$46>>2] = 14;
     break;
    } else {
     HEAP32[$46>>2] = 15;
     break;
    }
   }
   $56 = ($40>>>0)<(193);
   if ($56) {
    HEAP32[$46>>2] = 7;
    break;
   }
   $57 = ($40>>>0)<(385);
   if ($57) {
    HEAP32[$46>>2] = 8;
    break;
   }
   $58 = ($40>>>0)<(577);
   if ($58) {
    HEAP32[$46>>2] = 9;
    break;
   }
   $59 = ($40>>>0)<(1153);
   if ($59) {
    HEAP32[$46>>2] = 10;
    break;
   }
   $60 = ($40>>>0)<(2305);
   if ($60) {
    HEAP32[$46>>2] = 11;
    break;
   }
   $61 = ($40>>>0)<(4609);
   if ($61) {
    HEAP32[$46>>2] = 12;
    break;
   } else {
    HEAP32[$46>>2] = 13;
    break;
   }
  } else {
   $$off9 = (($47) + -5)|0;
   $64 = ($$off9>>>0)>(10);
   if ($64) {
    $$1 = 9;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $65 = HEAP32[$encoder>>2]|0;
 $66 = ((($65)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0);
 do {
  if (!($68)) {
   $69 = ((($65)) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($65)) + 32|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (_FLAC__format_blocksize_is_subset($70,$72)|0);
   $74 = ($73|0)==(0);
   if ($74) {
    $$1 = 11;
    STACKTOP = sp;return ($$1|0);
   }
   $75 = HEAP32[$encoder>>2]|0;
   $76 = ((($75)) + 32|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_FLAC__format_sample_rate_is_subset($77)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $$1 = 11;
    STACKTOP = sp;return ($$1|0);
   }
   $80 = HEAP32[$encoder>>2]|0;
   $81 = ((($80)) + 28|0);
   $82 = HEAP32[$81>>2]|0;
   switch ($82|0) {
   case 24: case 20: case 16: case 12: case 8:  {
    break;
   }
   default: {
    $$1 = 11;
    STACKTOP = sp;return ($$1|0);
   }
   }
   $83 = HEAP32[$encoder>>2]|0;
   $84 = ((($83)) + 580|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85>>>0)>(8);
   if ($86) {
    $$1 = 11;
    STACKTOP = sp;return ($$1|0);
   }
   $87 = ((($83)) + 32|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88>>>0)<(48001);
   if ($89) {
    $90 = ((($83)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91>>>0)>(4608);
    if ($92) {
     $$1 = 11;
     STACKTOP = sp;return ($$1|0);
    }
    $93 = ((($83)) + 556|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94>>>0)>(12);
    if ($95) {
     $$1 = 11;
    } else {
     break;
    }
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $96 = HEAP32[$encoder>>2]|0;
 $97 = ((($96)) + 580|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP32[1096>>2]|0;
 $100 = 1 << $99;
 $101 = ($98>>>0)<($100>>>0);
 if (!($101)) {
  $102 = (($100) + -1)|0;
  HEAP32[$97>>2] = $102;
 }
 $103 = HEAP32[$encoder>>2]|0;
 $104 = ((($103)) + 576|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ((($103)) + 580|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($105>>>0)<($107>>>0);
 if (!($108)) {
  HEAP32[$104>>2] = $107;
 }
 $109 = HEAP32[$encoder>>2]|0;
 $110 = ((($109)) + 600|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(0|0);
 L106: do {
  if (!($112)) {
   $113 = ((($109)) + 604|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)==(0);
   if (!($115)) {
    $116 = HEAP32[$encoder>>2]|0;
    $117 = ((($116)) + 604|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==(0);
    if ($119) {
     break;
    } else {
     $121 = $116;$i2$051 = 0;
    }
    while(1) {
     $120 = ((($121)) + 600|0);
     $122 = HEAP32[$120>>2]|0;
     $123 = (($122) + ($i2$051<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)==(0|0);
     if (!($125)) {
      $126 = HEAP32[$124>>2]|0;
      $127 = ($126|0)==(3);
      if ($127) {
       $$lcssa87 = $124;
       break;
      }
     }
     $132 = (($i2$051) + 1)|0;
     $133 = HEAP32[$encoder>>2]|0;
     $134 = ((($133)) + 604|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($132>>>0)<($135>>>0);
     if ($136) {
      $121 = $133;$i2$051 = $132;
     } else {
      break L106;
     }
    }
    $128 = ((($$lcssa87)) + 16|0);
    $129 = ((($encoder)) + 4|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ((($130)) + 7048|0);
    HEAP32[$131>>2] = $128;
   }
  }
 } while(0);
 $137 = HEAP32[$encoder>>2]|0;
 $138 = ((($137)) + 600|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)==(0|0);
 do {
  if ($140) {
   $141 = ((($137)) + 604|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   if ($143) {
    break;
   } else {
    $$1 = 12;
   }
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $144 = HEAP32[$encoder>>2]|0;
 $145 = ((($144)) + 604|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)==(0);
 L120: do {
  if ($147) {
   $metadata_has_vorbis_comment$0$lcssa = 0;
  } else {
   $149 = $144;$i$043 = 0;$metadata_has_seektable$044 = 0;$metadata_has_vorbis_comment$045 = 0;$metadata_picture_has_type1$046 = 0;$metadata_picture_has_type2$047 = 0;
   L121: while(1) {
    $148 = ((($149)) + 600|0);
    $150 = HEAP32[$148>>2]|0;
    $151 = (($150) + ($i$043<<2)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = HEAP32[$152>>2]|0;
    L123: do {
     switch ($153|0) {
     case 0:  {
      $$1 = 12;
      label = 127;
      break L121;
      break;
     }
     case 3:  {
      $154 = ($metadata_has_seektable$044|0)==(0);
      if (!($154)) {
       $$1 = 12;
       label = 127;
       break L121;
      }
      $155 = ((($152)) + 16|0);
      $156 = (_FLAC__format_seektable_is_legal($155)|0);
      $157 = ($156|0)==(0);
      if ($157) {
       $$1 = 12;
       label = 127;
       break L121;
      } else {
       $metadata_has_seektable$1 = 1;$metadata_has_vorbis_comment$1 = $metadata_has_vorbis_comment$045;$metadata_picture_has_type1$1 = $metadata_picture_has_type1$046;$metadata_picture_has_type2$1 = $metadata_picture_has_type2$047;
      }
      break;
     }
     case 4:  {
      $158 = ($metadata_has_vorbis_comment$045|0)==(0);
      if ($158) {
       $metadata_has_seektable$1 = $metadata_has_seektable$044;$metadata_has_vorbis_comment$1 = 1;$metadata_picture_has_type1$1 = $metadata_picture_has_type1$046;$metadata_picture_has_type2$1 = $metadata_picture_has_type2$047;
      } else {
       $$1 = 12;
       label = 127;
       break L121;
      }
      break;
     }
     case 5:  {
      $159 = ((($152)) + 16|0);
      $160 = ((($152)) + 160|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = (_FLAC__format_cuesheet_is_legal($159,$161,0)|0);
      $163 = ($162|0)==(0);
      if ($163) {
       $$1 = 12;
       label = 127;
       break L121;
      } else {
       $metadata_has_seektable$1 = $metadata_has_seektable$044;$metadata_has_vorbis_comment$1 = $metadata_has_vorbis_comment$045;$metadata_picture_has_type1$1 = $metadata_picture_has_type1$046;$metadata_picture_has_type2$1 = $metadata_picture_has_type2$047;
      }
      break;
     }
     case 6:  {
      $164 = ((($152)) + 16|0);
      $165 = (_FLAC__format_picture_is_legal($164,0)|0);
      $166 = ($165|0)==(0);
      if ($166) {
       $$1 = 12;
       label = 127;
       break L121;
      }
      $167 = HEAP32[$164>>2]|0;
      switch ($167|0) {
      case 1:  {
       break;
      }
      case 2:  {
       $181 = ($metadata_picture_has_type2$047|0)==(0);
       if ($181) {
        $metadata_has_seektable$1 = $metadata_has_seektable$044;$metadata_has_vorbis_comment$1 = $metadata_has_vorbis_comment$045;$metadata_picture_has_type1$1 = $metadata_picture_has_type1$046;$metadata_picture_has_type2$1 = 1;
        break L123;
       } else {
        $$1 = 12;
        label = 127;
        break L121;
       }
       break;
      }
      default: {
       $metadata_has_seektable$1 = $metadata_has_seektable$044;$metadata_has_vorbis_comment$1 = $metadata_has_vorbis_comment$045;$metadata_picture_has_type1$1 = $metadata_picture_has_type1$046;$metadata_picture_has_type2$1 = $metadata_picture_has_type2$047;
       break L123;
      }
      }
      $168 = ($metadata_picture_has_type1$046|0)==(0);
      if (!($168)) {
       $$1 = 12;
       label = 127;
       break L121;
      }
      $169 = ((($152)) + 20|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = (_strcmp($170,3737)|0);
      $172 = ($171|0)==(0);
      if (!($172)) {
       $173 = (_strcmp($170,3747)|0);
       $174 = ($173|0)==(0);
       if (!($174)) {
        $$1 = 12;
        label = 127;
        break L121;
       }
      }
      $175 = ((($152)) + 28|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(32);
      if (!($177)) {
       $$1 = 12;
       label = 127;
       break L121;
      }
      $178 = ((($152)) + 32|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(32);
      if ($180) {
       $metadata_has_seektable$1 = $metadata_has_seektable$044;$metadata_has_vorbis_comment$1 = $metadata_has_vorbis_comment$045;$metadata_picture_has_type1$1 = 1;$metadata_picture_has_type2$1 = $metadata_picture_has_type2$047;
      } else {
       $$1 = 12;
       label = 127;
       break L121;
      }
      break;
     }
     default: {
      $metadata_has_seektable$1 = $metadata_has_seektable$044;$metadata_has_vorbis_comment$1 = $metadata_has_vorbis_comment$045;$metadata_picture_has_type1$1 = $metadata_picture_has_type1$046;$metadata_picture_has_type2$1 = $metadata_picture_has_type2$047;
     }
     }
    } while(0);
    $182 = (($i$043) + 1)|0;
    $183 = HEAP32[$encoder>>2]|0;
    $184 = ((($183)) + 604|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($182>>>0)<($185>>>0);
    if ($186) {
     $149 = $183;$i$043 = $182;$metadata_has_seektable$044 = $metadata_has_seektable$1;$metadata_has_vorbis_comment$045 = $metadata_has_vorbis_comment$1;$metadata_picture_has_type1$046 = $metadata_picture_has_type1$1;$metadata_picture_has_type2$047 = $metadata_picture_has_type2$1;
    } else {
     $metadata_has_vorbis_comment$0$lcssa = $metadata_has_vorbis_comment$1;
     break L120;
    }
   }
   if ((label|0) == 127) {
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $187 = ((($encoder)) + 4|0);
 $188 = HEAP32[$187>>2]|0;
 HEAP32[$188>>2] = 0;
 $189 = HEAP32[$encoder>>2]|0;
 $190 = ((($189)) + 24|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = ($191|0)==(0);
 if (!($192)) {
  $i$140 = 0;
  while(1) {
   $193 = HEAP32[$187>>2]|0;
   $194 = (((($193)) + 4|0) + ($i$140<<2)|0);
   HEAP32[$194>>2] = 0;
   $195 = HEAP32[$187>>2]|0;
   $196 = (((($195)) + 7352|0) + ($i$140<<2)|0);
   HEAP32[$196>>2] = 0;
   $197 = HEAP32[$187>>2]|0;
   $198 = (((($197)) + 44|0) + ($i$140<<2)|0);
   HEAP32[$198>>2] = 0;
   $199 = HEAP32[$187>>2]|0;
   $200 = (((($199)) + 7392|0) + ($i$140<<2)|0);
   HEAP32[$200>>2] = 0;
   $201 = (($i$140) + 1)|0;
   $202 = HEAP32[$encoder>>2]|0;
   $203 = ((($202)) + 24|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ($201>>>0)<($204>>>0);
   if ($205) {
    $i$140 = $201;
   } else {
    break;
   }
  }
 }
 $206 = HEAP32[$187>>2]|0;
 $207 = ((($206)) + 36|0);
 HEAP32[$207>>2] = 0;
 $208 = HEAP32[$187>>2]|0;
 $209 = ((($208)) + 7384|0);
 HEAP32[$209>>2] = 0;
 $210 = HEAP32[$187>>2]|0;
 $211 = ((($210)) + 76|0);
 HEAP32[$211>>2] = 0;
 $212 = HEAP32[$187>>2]|0;
 $213 = ((($212)) + 7424|0);
 HEAP32[$213>>2] = 0;
 $214 = HEAP32[$187>>2]|0;
 $215 = ((($214)) + 40|0);
 HEAP32[$215>>2] = 0;
 $216 = HEAP32[$187>>2]|0;
 $217 = ((($216)) + 7388|0);
 HEAP32[$217>>2] = 0;
 $218 = HEAP32[$187>>2]|0;
 $219 = ((($218)) + 80|0);
 HEAP32[$219>>2] = 0;
 $220 = HEAP32[$187>>2]|0;
 $221 = ((($220)) + 7428|0);
 HEAP32[$221>>2] = 0;
 $222 = HEAP32[$encoder>>2]|0;
 $223 = ((($222)) + 40|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ($224|0)==(0);
 $226 = HEAP32[$187>>2]|0;
 if ($225) {
  $$lcssa22 = $226;
 } else {
  $228 = $226;$i$335 = 0;
  while(1) {
   $227 = (((($228)) + 84|0) + ($i$335<<2)|0);
   HEAP32[$227>>2] = 0;
   $229 = HEAP32[$187>>2]|0;
   $230 = (((($229)) + 7432|0) + ($i$335<<2)|0);
   HEAP32[$230>>2] = 0;
   $231 = (($i$335) + 1)|0;
   $232 = HEAP32[$encoder>>2]|0;
   $233 = ((($232)) + 40|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($231>>>0)<($234>>>0);
   $236 = HEAP32[$187>>2]|0;
   if ($235) {
    $228 = $236;$i$335 = $231;
   } else {
    $$lcssa22 = $236;
    break;
   }
  }
 }
 $237 = ((($$lcssa22)) + 212|0);
 HEAP32[$237>>2] = 0;
 $238 = HEAP32[$187>>2]|0;
 $239 = ((($238)) + 7560|0);
 HEAP32[$239>>2] = 0;
 $240 = HEAP32[$encoder>>2]|0;
 $241 = ((($240)) + 24|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = ($242|0)==(0);
 if (!($243)) {
  $i$432 = 0;
  while(1) {
   $244 = HEAP32[$187>>2]|0;
   $245 = (((($244)) + 256|0) + ($i$432<<3)|0);
   HEAP32[$245>>2] = 0;
   $246 = HEAP32[$187>>2]|0;
   $247 = (((($246)) + 7564|0) + ($i$432<<3)|0);
   HEAP32[$247>>2] = 0;
   $248 = HEAP32[$187>>2]|0;
   $249 = (((((($248)) + 256|0) + ($i$432<<3)|0)) + 4|0);
   HEAP32[$249>>2] = 0;
   $250 = HEAP32[$187>>2]|0;
   $251 = (((((($250)) + 7564|0) + ($i$432<<3)|0)) + 4|0);
   HEAP32[$251>>2] = 0;
   $252 = HEAP32[$187>>2]|0;
   $253 = (((($252)) + 6768|0) + ($i$432<<2)|0);
   HEAP32[$253>>2] = 0;
   $254 = (($i$432) + 1)|0;
   $255 = HEAP32[$encoder>>2]|0;
   $256 = ((($255)) + 24|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = ($254>>>0)<($257>>>0);
   if ($258) {
    $i$432 = $254;
   } else {
    break;
   }
  }
 }
 $259 = HEAP32[$187>>2]|0;
 $260 = ((($259)) + 320|0);
 HEAP32[$260>>2] = 0;
 $261 = HEAP32[$187>>2]|0;
 $262 = ((($261)) + 7628|0);
 HEAP32[$262>>2] = 0;
 $263 = HEAP32[$187>>2]|0;
 $264 = ((($263)) + 324|0);
 HEAP32[$264>>2] = 0;
 $265 = HEAP32[$187>>2]|0;
 $266 = ((($265)) + 7632|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[$187>>2]|0;
 $268 = ((($267)) + 6800|0);
 HEAP32[$268>>2] = 0;
 $269 = HEAP32[$187>>2]|0;
 $270 = ((($269)) + 328|0);
 HEAP32[$270>>2] = 0;
 $271 = HEAP32[$187>>2]|0;
 $272 = ((($271)) + 7636|0);
 HEAP32[$272>>2] = 0;
 $273 = HEAP32[$187>>2]|0;
 $274 = ((($273)) + 332|0);
 HEAP32[$274>>2] = 0;
 $275 = HEAP32[$187>>2]|0;
 $276 = ((($275)) + 7640|0);
 HEAP32[$276>>2] = 0;
 $277 = HEAP32[$187>>2]|0;
 $278 = ((($277)) + 6804|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[$187>>2]|0;
 $280 = ((($279)) + 6848|0);
 HEAP32[$280>>2] = 0;
 $281 = HEAP32[$187>>2]|0;
 $282 = ((($281)) + 7644|0);
 HEAP32[$282>>2] = 0;
 $283 = HEAP32[$187>>2]|0;
 $284 = ((($283)) + 6852|0);
 HEAP32[$284>>2] = 0;
 $285 = HEAP32[$187>>2]|0;
 $286 = ((($285)) + 7648|0);
 HEAP32[$286>>2] = 0;
 $287 = HEAP32[$encoder>>2]|0;
 $288 = ((($287)) + 32|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (+($289>>>0));
 $291 = $290 * 0.40000000000000002;
 $292 = ((($287)) + 36|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = (+($293>>>0));
 $295 = $291 / $294;
 $296 = $295 + 0.5;
 $297 = (~~(($296))>>>0);
 $298 = HEAP32[$187>>2]|0;
 $299 = ((($298)) + 6860|0);
 HEAP32[$299>>2] = $297;
 $300 = HEAP32[$187>>2]|0;
 $301 = ((($300)) + 6860|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = ($302|0)==(0);
 if ($303) {
  HEAP32[$301>>2] = 1;
 }
 $304 = HEAP32[$187>>2]|0;
 $305 = ((($304)) + 6864|0);
 HEAP32[$305>>2] = 0;
 $306 = HEAP32[$187>>2]|0;
 $307 = ((($306)) + 7052|0);
 HEAP32[$307>>2] = 0;
 $308 = HEAP32[$187>>2]|0;
 $309 = ((($308)) + 7056|0);
 HEAP32[$309>>2] = 0;
 $310 = HEAP32[$187>>2]|0;
 $311 = ((($310)) + 7156|0);
 _FLAC__cpu_info($311);
 $312 = HEAP32[$187>>2]|0;
 $313 = ((($312)) + 7256|0);
 HEAP32[$313>>2] = 12;
 $314 = HEAP32[$187>>2]|0;
 $315 = ((($314)) + 7244|0);
 HEAP32[$315>>2] = 12;
 $316 = HEAP32[$187>>2]|0;
 $317 = ((($316)) + 7248|0);
 HEAP32[$317>>2] = 16;
 $318 = HEAP32[$187>>2]|0;
 $319 = ((($318)) + 7252|0);
 HEAP32[$319>>2] = 17;
 $320 = HEAP32[$187>>2]|0;
 $321 = ((($320)) + 7260|0);
 HEAP32[$321>>2] = 14;
 $322 = HEAP32[$187>>2]|0;
 $323 = ((($322)) + 7264|0);
 HEAP32[$323>>2] = 15;
 $324 = HEAP32[$187>>2]|0;
 $325 = ((($324)) + 7268|0);
 HEAP32[$325>>2] = 14;
 $326 = HEAP32[$encoder>>2]|0;
 HEAP32[$326>>2] = 0;
 $327 = HEAP32[$187>>2]|0;
 $328 = ((($327)) + 7288|0);
 HEAP32[$328>>2] = $read_callback;
 $329 = HEAP32[$187>>2]|0;
 $330 = ((($329)) + 7300|0);
 HEAP32[$330>>2] = $write_callback;
 $331 = HEAP32[$187>>2]|0;
 $332 = ((($331)) + 7292|0);
 HEAP32[$332>>2] = $seek_callback;
 $333 = HEAP32[$187>>2]|0;
 $334 = ((($333)) + 7296|0);
 HEAP32[$334>>2] = $tell_callback;
 $335 = HEAP32[$187>>2]|0;
 $336 = ((($335)) + 7304|0);
 HEAP32[$336>>2] = $metadata_callback;
 $337 = HEAP32[$187>>2]|0;
 $338 = ((($337)) + 7312|0);
 HEAP32[$338>>2] = $client_data;
 $339 = HEAP32[$encoder>>2]|0;
 $340 = ((($339)) + 36|0);
 $341 = HEAP32[$340>>2]|0;
 $342 = (_resize_buffers_($encoder,$341)|0);
 $343 = ($342|0)==(0);
 if ($343) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $344 = HEAP32[$187>>2]|0;
 $345 = ((($344)) + 6856|0);
 $346 = HEAP32[$345>>2]|0;
 $347 = (_FLAC__bitwriter_init($346)|0);
 $348 = ($347|0)==(0);
 $349 = HEAP32[$encoder>>2]|0;
 if ($348) {
  HEAP32[$349>>2] = 8;
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $350 = ((($349)) + 4|0);
 $351 = HEAP32[$350>>2]|0;
 $352 = ($351|0)==(0);
 do {
  if (!($352)) {
   $353 = ((($349)) + 36|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($354) + 1)|0;
   $356 = HEAP32[$187>>2]|0;
   $357 = ((($356)) + 11820|0);
   HEAP32[$357>>2] = $355;
   $358 = HEAP32[$encoder>>2]|0;
   $359 = ((($358)) + 24|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = ($360|0)==(0);
   $362 = HEAP32[$187>>2]|0;
   L176: do {
    if ($361) {
     $$lcssa19 = $362;
    } else {
     $370 = $362;$i$626 = 0;
     while(1) {
      $369 = ((($370)) + 11820|0);
      $371 = HEAP32[$369>>2]|0;
      $372 = (_safe_malloc_mul_2op_p(4,$371)|0);
      $373 = HEAP32[$187>>2]|0;
      $374 = (((($373)) + 11788|0) + ($i$626<<2)|0);
      HEAP32[$374>>2] = $372;
      $375 = ($372|0)==(0|0);
      $366 = (($i$626) + 1)|0;
      $364 = HEAP32[$encoder>>2]|0;
      if ($375) {
       $$lcssa83 = $364;
       break;
      }
      $363 = ((($364)) + 24|0);
      $365 = HEAP32[$363>>2]|0;
      $367 = ($366>>>0)<($365>>>0);
      $368 = HEAP32[$187>>2]|0;
      if ($367) {
       $370 = $368;$i$626 = $366;
      } else {
       $$lcssa19 = $368;
       break L176;
      }
     }
     HEAP32[$$lcssa83>>2] = 8;
     $$1 = 1;
     STACKTOP = sp;return ($$1|0);
    }
   } while(0);
   $376 = ((($$lcssa19)) + 11824|0);
   HEAP32[$376>>2] = 0;
   $377 = HEAP32[$187>>2]|0;
   $378 = ((($377)) + 11776|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = ($379|0)==(0|0);
   do {
    if ($380) {
     $381 = (_FLAC__stream_decoder_new()|0);
     $382 = HEAP32[$187>>2]|0;
     $383 = ((($382)) + 11776|0);
     HEAP32[$383>>2] = $381;
     $384 = HEAP32[$187>>2]|0;
     $385 = ((($384)) + 11776|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = ($386|0)==(0|0);
     if (!($387)) {
      break;
     }
     $388 = HEAP32[$encoder>>2]|0;
     HEAP32[$388>>2] = 3;
     $$1 = 1;
     STACKTOP = sp;return ($$1|0);
    }
   } while(0);
   $389 = HEAP32[$187>>2]|0;
   $390 = ((($389)) + 11776|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = (_FLAC__stream_decoder_init_stream($391,12,0,0,0,0,13,12,13,$encoder)|0);
   $393 = ($392|0)==(0);
   if ($393) {
    break;
   }
   $394 = HEAP32[$encoder>>2]|0;
   HEAP32[$394>>2] = 3;
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $395 = HEAP32[$187>>2]|0;
 $396 = ((($395)) + 11840|0);
 $397 = $396;
 $398 = $397;
 HEAP32[$398>>2] = 0;
 $399 = (($397) + 4)|0;
 $400 = $399;
 HEAP32[$400>>2] = 0;
 $401 = HEAP32[$187>>2]|0;
 $402 = ((($401)) + 11848|0);
 HEAP32[$402>>2] = 0;
 $403 = HEAP32[$187>>2]|0;
 $404 = ((($403)) + 11852|0);
 HEAP32[$404>>2] = 0;
 $405 = HEAP32[$187>>2]|0;
 $406 = ((($405)) + 11856|0);
 HEAP32[$406>>2] = 0;
 $407 = HEAP32[$187>>2]|0;
 $408 = ((($407)) + 11860|0);
 HEAP32[$408>>2] = 0;
 $409 = HEAP32[$187>>2]|0;
 $410 = ((($409)) + 11864|0);
 HEAP32[$410>>2] = 0;
 $411 = HEAP32[$187>>2]|0;
 $412 = ((($411)) + 7316|0);
 HEAP32[$412>>2] = 0;
 $413 = HEAP32[$187>>2]|0;
 $414 = ((($413)) + 7336|0);
 $415 = $414;
 $416 = $415;
 HEAP32[$416>>2] = 0;
 $417 = (($415) + 4)|0;
 $418 = $417;
 HEAP32[$418>>2] = 0;
 $419 = HEAP32[$encoder>>2]|0;
 $420 = ((($419)) + 608|0);
 $421 = $420;
 $422 = $421;
 HEAP32[$422>>2] = 0;
 $423 = (($421) + 4)|0;
 $424 = $423;
 HEAP32[$424>>2] = 0;
 $425 = HEAP32[$encoder>>2]|0;
 $426 = ((($425)) + 616|0);
 $427 = $426;
 $428 = $427;
 HEAP32[$428>>2] = 0;
 $429 = (($427) + 4)|0;
 $430 = $429;
 HEAP32[$430>>2] = 0;
 $431 = HEAP32[$encoder>>2]|0;
 $432 = ((($431)) + 624|0);
 $433 = $432;
 $434 = $433;
 HEAP32[$434>>2] = 0;
 $435 = (($433) + 4)|0;
 $436 = $435;
 HEAP32[$436>>2] = 0;
 $437 = HEAP32[$encoder>>2]|0;
 $438 = ((($437)) + 4|0);
 $439 = HEAP32[$438>>2]|0;
 $440 = ($439|0)==(0);
 if (!($440)) {
  $441 = HEAP32[$187>>2]|0;
  $442 = ((($441)) + 11780|0);
  HEAP32[$442>>2] = 0;
 }
 $443 = HEAP32[$187>>2]|0;
 $444 = ((($443)) + 6856|0);
 $445 = HEAP32[$444>>2]|0;
 $446 = HEAP32[1032>>2]|0;
 $447 = HEAP32[1060>>2]|0;
 $448 = (_FLAC__bitwriter_write_raw_uint32($445,$446,$447)|0);
 $449 = ($448|0)==(0);
 if ($449) {
  $450 = HEAP32[$encoder>>2]|0;
  HEAP32[$450>>2] = 7;
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $451 = (_write_bitbuffer_($encoder,0)|0);
 $452 = ($451|0)==(0);
 if ($452) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $453 = HEAP32[$encoder>>2]|0;
 $454 = ((($453)) + 4|0);
 $455 = HEAP32[$454>>2]|0;
 $456 = ($455|0)==(0);
 if (!($456)) {
  $457 = HEAP32[$187>>2]|0;
  $458 = ((($457)) + 11780|0);
  HEAP32[$458>>2] = 1;
 }
 $459 = HEAP32[$187>>2]|0;
 $460 = ((($459)) + 6872|0);
 HEAP32[$460>>2] = 0;
 $461 = HEAP32[$187>>2]|0;
 $462 = ((($461)) + 6876|0);
 HEAP32[$462>>2] = 0;
 $463 = HEAP32[$187>>2]|0;
 $464 = ((($463)) + 6880|0);
 HEAP32[$464>>2] = 34;
 $465 = HEAP32[$encoder>>2]|0;
 $466 = ((($465)) + 36|0);
 $467 = HEAP32[$466>>2]|0;
 $468 = HEAP32[$187>>2]|0;
 $469 = ((($468)) + 6888|0);
 HEAP32[$469>>2] = $467;
 $470 = HEAP32[$encoder>>2]|0;
 $471 = ((($470)) + 36|0);
 $472 = HEAP32[$471>>2]|0;
 $473 = HEAP32[$187>>2]|0;
 $474 = ((($473)) + 6892|0);
 HEAP32[$474>>2] = $472;
 $475 = HEAP32[$187>>2]|0;
 $476 = ((($475)) + 6896|0);
 HEAP32[$476>>2] = 0;
 $477 = HEAP32[$187>>2]|0;
 $478 = ((($477)) + 6900|0);
 HEAP32[$478>>2] = 0;
 $479 = HEAP32[$encoder>>2]|0;
 $480 = ((($479)) + 32|0);
 $481 = HEAP32[$480>>2]|0;
 $482 = HEAP32[$187>>2]|0;
 $483 = ((($482)) + 6904|0);
 HEAP32[$483>>2] = $481;
 $484 = HEAP32[$encoder>>2]|0;
 $485 = ((($484)) + 24|0);
 $486 = HEAP32[$485>>2]|0;
 $487 = HEAP32[$187>>2]|0;
 $488 = ((($487)) + 6908|0);
 HEAP32[$488>>2] = $486;
 $489 = HEAP32[$encoder>>2]|0;
 $490 = ((($489)) + 28|0);
 $491 = HEAP32[$490>>2]|0;
 $492 = HEAP32[$187>>2]|0;
 $493 = ((($492)) + 6912|0);
 HEAP32[$493>>2] = $491;
 $494 = HEAP32[$encoder>>2]|0;
 $495 = ((($494)) + 592|0);
 $496 = $495;
 $497 = $496;
 $498 = HEAP32[$497>>2]|0;
 $499 = (($496) + 4)|0;
 $500 = $499;
 $501 = HEAP32[$500>>2]|0;
 $502 = HEAP32[$187>>2]|0;
 $503 = ((($502)) + 6920|0);
 $504 = $503;
 $505 = $504;
 HEAP32[$505>>2] = $498;
 $506 = (($504) + 4)|0;
 $507 = $506;
 HEAP32[$507>>2] = $501;
 $508 = HEAP32[$187>>2]|0;
 $509 = ((($508)) + 6928|0);
 dest=$509; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $510 = HEAP32[$encoder>>2]|0;
 $511 = ((($510)) + 12|0);
 $512 = HEAP32[$511>>2]|0;
 $513 = ($512|0)==(0);
 if (!($513)) {
  $514 = HEAP32[$187>>2]|0;
  $515 = ((($514)) + 7060|0);
  _FLAC__MD5Init($515);
 }
 $516 = HEAP32[$187>>2]|0;
 $517 = ((($516)) + 6872|0);
 $518 = ((($516)) + 6856|0);
 $519 = HEAP32[$518>>2]|0;
 $520 = (_FLAC__add_metadata_block($517,$519)|0);
 $521 = ($520|0)==(0);
 if ($521) {
  $522 = HEAP32[$encoder>>2]|0;
  HEAP32[$522>>2] = 7;
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $523 = (_write_bitbuffer_($encoder,0)|0);
 $524 = ($523|0)==(0);
 if ($524) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $525 = HEAP32[1068>>2]|0;
 $526 = 1 << $525;
 $527 = (($526) + -1)|0;
 $528 = HEAP32[$187>>2]|0;
 $529 = ((($528)) + 6896|0);
 HEAP32[$529>>2] = $527;
 $530 = HEAP32[$187>>2]|0;
 $531 = ((($530)) + 6920|0);
 $532 = $531;
 $533 = $532;
 HEAP32[$533>>2] = 0;
 $534 = (($532) + 4)|0;
 $535 = $534;
 HEAP32[$535>>2] = 0;
 $536 = ($metadata_has_vorbis_comment$0$lcssa|0)==(0);
 do {
  if ($536) {
   HEAP32[$vorbis_comment>>2] = 4;
   $537 = HEAP32[$encoder>>2]|0;
   $538 = ((($537)) + 604|0);
   $539 = HEAP32[$538>>2]|0;
   $540 = ($539|0)==(0);
   $541 = $540&1;
   $542 = ((($vorbis_comment)) + 4|0);
   HEAP32[$542>>2] = $541;
   $543 = ((($vorbis_comment)) + 8|0);
   HEAP32[$543>>2] = 8;
   $544 = ((($vorbis_comment)) + 16|0);
   ;HEAP32[$544>>2]=0|0;HEAP32[$544+4>>2]=0|0;HEAP32[$544+8>>2]=0|0;HEAP32[$544+12>>2]=0|0;
   $545 = HEAP32[$187>>2]|0;
   $546 = ((($545)) + 6856|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = (_FLAC__add_metadata_block($vorbis_comment,$547)|0);
   $549 = ($548|0)==(0);
   if ($549) {
    $550 = HEAP32[$encoder>>2]|0;
    HEAP32[$550>>2] = 7;
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   } else {
    $551 = (_write_bitbuffer_($encoder,0)|0);
    $not$ = ($551|0)==(0);
    if ($not$) {
     $$1 = 1;
    } else {
     break;
    }
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $552 = HEAP32[$encoder>>2]|0;
 $553 = ((($552)) + 604|0);
 $554 = HEAP32[$553>>2]|0;
 $555 = ($554|0)==(0);
 L222: do {
  if ($555) {
   $$lcssa = $552;
  } else {
   $562 = $554;$566 = $552;$i$725 = 0;
   while(1) {
    $561 = (($562) + -1)|0;
    $563 = ($i$725|0)==($561|0);
    $564 = $563&1;
    $565 = ((($566)) + 600|0);
    $567 = HEAP32[$565>>2]|0;
    $568 = (($567) + ($i$725<<2)|0);
    $569 = HEAP32[$568>>2]|0;
    $570 = ((($569)) + 4|0);
    HEAP32[$570>>2] = $564;
    $571 = HEAP32[$encoder>>2]|0;
    $572 = ((($571)) + 600|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = (($573) + ($i$725<<2)|0);
    $575 = HEAP32[$574>>2]|0;
    $576 = HEAP32[$187>>2]|0;
    $577 = ((($576)) + 6856|0);
    $578 = HEAP32[$577>>2]|0;
    $579 = (_FLAC__add_metadata_block($575,$578)|0);
    $580 = ($579|0)==(0);
    if ($580) {
     break;
    }
    $582 = (_write_bitbuffer_($encoder,0)|0);
    $583 = ($582|0)==(0);
    $559 = (($i$725) + 1)|0;
    if ($583) {
     $$1 = 1;
     label = 127;
     break;
    }
    $556 = HEAP32[$encoder>>2]|0;
    $557 = ((($556)) + 604|0);
    $558 = HEAP32[$557>>2]|0;
    $560 = ($559>>>0)<($558>>>0);
    if ($560) {
     $562 = $558;$566 = $556;$i$725 = $559;
    } else {
     $$lcssa = $556;
     break L222;
    }
   }
   if ((label|0) == 127) {
    STACKTOP = sp;return ($$1|0);
   }
   $581 = HEAP32[$encoder>>2]|0;
   HEAP32[$581>>2] = 7;
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $584 = HEAP32[$187>>2]|0;
 $585 = ((($584)) + 7296|0);
 $586 = HEAP32[$585>>2]|0;
 $587 = ($586|0)==(0|0);
 do {
  if (!($587)) {
   $588 = ((($$lcssa)) + 624|0);
   $589 = ((($584)) + 7312|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = (FUNCTION_TABLE_iiii[$586 & 31]($encoder,$588,$590)|0);
   $592 = ($591|0)==(1);
   if (!($592)) {
    break;
   }
   $593 = HEAP32[$encoder>>2]|0;
   HEAP32[$593>>2] = 5;
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $594 = HEAP32[$encoder>>2]|0;
 $595 = ((($594)) + 4|0);
 $596 = HEAP32[$595>>2]|0;
 $597 = ($596|0)==(0);
 if ($597) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $598 = HEAP32[$187>>2]|0;
 $599 = ((($598)) + 11780|0);
 HEAP32[$599>>2] = 2;
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _append_to_verify_fifo_interleaved_($fifo,$input,$input_offset,$channels,$wide_samples) {
 $fifo = $fifo|0;
 $input = $input|0;
 $input_offset = $input_offset|0;
 $channels = $channels|0;
 $wide_samples = $wide_samples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $channel$01 = 0, $exitcond = 0, $exitcond9 = 0, $sample$03 = 0;
 var $sample$1$lcssa = 0, $sample$12 = 0, $tail$0$lcssa = 0, $tail$05 = 0, $wide_sample$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fifo)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($wide_samples|0)==(0);
 if ($2) {
  $tail$0$lcssa = $1;
  HEAP32[$0>>2] = $tail$0$lcssa;
  return;
 }
 $3 = Math_imul($channels, $input_offset)|0;
 $4 = ($channels|0)==(0);
 $sample$03 = $3;$tail$05 = $1;$wide_sample$04 = 0;
 while(1) {
  if ($4) {
   $sample$1$lcssa = $sample$03;
  } else {
   $channel$01 = 0;$sample$12 = $sample$03;
   while(1) {
    $5 = (($sample$12) + 1)|0;
    $6 = (($input) + ($sample$12<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($fifo) + ($channel$01<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + ($tail$05<<2)|0);
    HEAP32[$10>>2] = $7;
    $11 = (($channel$01) + 1)|0;
    $exitcond = ($11|0)==($channels|0);
    if ($exitcond) {
     break;
    } else {
     $channel$01 = $11;$sample$12 = $5;
    }
   }
   $12 = (($sample$03) + ($channels))|0;
   $sample$1$lcssa = $12;
  }
  $13 = (($tail$05) + 1)|0;
  $14 = (($wide_sample$04) + 1)|0;
  $exitcond9 = ($14|0)==($wide_samples|0);
  if ($exitcond9) {
   break;
  } else {
   $sample$03 = $sample$1$lcssa;$tail$05 = $13;$wide_sample$04 = $14;
  }
 }
 $15 = (($1) + ($wide_samples))|0;
 $tail$0$lcssa = $15;
 HEAP32[$0>>2] = $tail$0$lcssa;
 return;
}
function _precompute_partition_info_sums_($residual,$abs_residual_partition_sums,$residual_samples,$predictor_order,$min_partition_order,$max_partition_order,$bps) {
 $residual = $residual|0;
 $abs_residual_partition_sums = $abs_residual_partition_sums|0;
 $residual_samples = $residual_samples|0;
 $predictor_order = $predictor_order|0;
 $min_partition_order = $min_partition_order|0;
 $max_partition_order = $max_partition_order|0;
 $bps = $bps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $abs_residual_partition_sum$0$lcssa = 0, $abs_residual_partition_sum$017 = 0, $end$025 = 0;
 var $end$135 = 0, $exitcond = 0, $exitcond41 = 0, $exitcond44 = 0, $from_partition$012 = 0, $from_partition$1$lcssa = 0, $from_partition$16 = 0, $i$08 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next43 = 0, $indvars$iv42 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $partition$023 = 0, $partition$133 = 0, $partition_order$014 = 0, $partition_order$014$in = 0;
 var $partitions$011 = 0, $residual_sample$024 = 0, $residual_sample$1$lcssa = 0, $residual_sample$116 = 0, $residual_sample$234 = 0, $residual_sample$3$lcssa = 0, $residual_sample$326 = 0, $to_partition$013 = 0, $to_partition$1$lcssa = 0, $to_partition$17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($predictor_order) + ($residual_samples))|0;
 $1 = $0 >>> $max_partition_order;
 $2 = 1 << $max_partition_order;
 $3 = (_FLAC__bitmath_ilog2244($1)|0);
 $4 = (32 - ($3))|0;
 $5 = (0 - ($predictor_order))|0;
 $6 = (($bps) + 4)|0;
 $7 = ($6>>>0)<($4>>>0);
 $8 = (($1) - ($predictor_order))|0;
 if ($7) {
  $end$025 = $5;$indvars$iv = $8;$partition$023 = 0;$residual_sample$024 = 0;
  while(1) {
   $10 = (($end$025) + ($1))|0;
   $11 = ($residual_sample$024>>>0)<($10>>>0);
   if ($11) {
    $abs_residual_partition_sum$017 = 0;$residual_sample$116 = $residual_sample$024;
    while(1) {
     $12 = (($residual) + ($residual_sample$116<<2)|0);
     $13 = HEAP32[$12>>2]|0;
     $ispos1 = ($13|0)>(-1);
     $neg2 = (0 - ($13))|0;
     $14 = $ispos1 ? $13 : $neg2;
     $15 = (($14) + ($abs_residual_partition_sum$017))|0;
     $16 = (($residual_sample$116) + 1)|0;
     $exitcond41 = ($16|0)==($indvars$iv|0);
     if ($exitcond41) {
      $abs_residual_partition_sum$0$lcssa = $15;$residual_sample$1$lcssa = $indvars$iv;
      break;
     } else {
      $abs_residual_partition_sum$017 = $15;$residual_sample$116 = $16;
     }
    }
   } else {
    $abs_residual_partition_sum$0$lcssa = 0;$residual_sample$1$lcssa = $residual_sample$024;
   }
   $17 = (($abs_residual_partition_sums) + ($partition$023<<3)|0);
   $18 = $17;
   $19 = $18;
   HEAP32[$19>>2] = $abs_residual_partition_sum$0$lcssa;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = 0;
   $22 = (($partition$023) + 1)|0;
   $23 = ($22>>>0)<($2>>>0);
   $indvars$iv$next = (($indvars$iv) + ($1))|0;
   if ($23) {
    $end$025 = $10;$indvars$iv = $indvars$iv$next;$partition$023 = $22;$residual_sample$024 = $residual_sample$1$lcssa;
   } else {
    break;
   }
  }
 } else {
  $end$135 = $5;$indvars$iv42 = $8;$partition$133 = 0;$residual_sample$234 = 0;
  while(1) {
   $24 = (($end$135) + ($1))|0;
   $25 = ($residual_sample$234>>>0)<($24>>>0);
   if ($25) {
    $31 = 0;$32 = 0;$residual_sample$326 = $residual_sample$234;
    while(1) {
     $26 = (($residual) + ($residual_sample$326<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $ispos = ($27|0)>(-1);
     $neg = (0 - ($27))|0;
     $28 = $ispos ? $27 : $neg;
     $29 = ($28|0)<(0);
     $30 = $29 << 31 >> 31;
     $33 = (_i64Add(($28|0),($30|0),($31|0),($32|0))|0);
     $34 = tempRet0;
     $35 = (($residual_sample$326) + 1)|0;
     $exitcond44 = ($35|0)==($indvars$iv42|0);
     if ($exitcond44) {
      $39 = $33;$42 = $34;$residual_sample$3$lcssa = $indvars$iv42;
      break;
     } else {
      $31 = $33;$32 = $34;$residual_sample$326 = $35;
     }
    }
   } else {
    $39 = 0;$42 = 0;$residual_sample$3$lcssa = $residual_sample$234;
   }
   $36 = (($abs_residual_partition_sums) + ($partition$133<<3)|0);
   $37 = $36;
   $38 = $37;
   HEAP32[$38>>2] = $39;
   $40 = (($37) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = $42;
   $43 = (($partition$133) + 1)|0;
   $44 = ($43>>>0)<($2>>>0);
   $indvars$iv$next43 = (($indvars$iv42) + ($1))|0;
   if ($44) {
    $end$135 = $24;$indvars$iv42 = $indvars$iv$next43;$partition$133 = $43;$residual_sample$234 = $residual_sample$3$lcssa;
   } else {
    break;
   }
  }
 }
 $9 = ($max_partition_order|0)>($min_partition_order|0);
 if ($9) {
  $from_partition$012 = 0;$partition_order$014$in = $max_partition_order;$partitions$011 = $2;$to_partition$013 = $2;
 } else {
  return;
 }
 while(1) {
  $partition_order$014 = (($partition_order$014$in) + -1)|0;
  $48 = $partitions$011 >>> 1;
  $49 = ($48|0)==(0);
  if ($49) {
   $from_partition$1$lcssa = $from_partition$012;$to_partition$1$lcssa = $to_partition$013;
  } else {
   $46 = $partitions$011 >>> 1;
   $50 = $46 << 1;
   $51 = (($from_partition$012) + ($50))|0;
   $from_partition$16 = $from_partition$012;$i$08 = 0;$to_partition$17 = $to_partition$013;
   while(1) {
    $52 = (($abs_residual_partition_sums) + ($from_partition$16<<3)|0);
    $53 = $52;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = (($from_partition$16) + 1)|0;
    $60 = (($abs_residual_partition_sums) + ($59<<3)|0);
    $61 = $60;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    $64 = (($61) + 4)|0;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (_i64Add(($63|0),($66|0),($55|0),($58|0))|0);
    $68 = tempRet0;
    $69 = (($to_partition$17) + 1)|0;
    $70 = (($abs_residual_partition_sums) + ($to_partition$17<<3)|0);
    $71 = $70;
    $72 = $71;
    HEAP32[$72>>2] = $67;
    $73 = (($71) + 4)|0;
    $74 = $73;
    HEAP32[$74>>2] = $68;
    $75 = (($from_partition$16) + 2)|0;
    $76 = (($i$08) + 1)|0;
    $exitcond = ($76|0)==($46|0);
    if ($exitcond) {
     break;
    } else {
     $from_partition$16 = $75;$i$08 = $76;$to_partition$17 = $69;
    }
   }
   $45 = (($to_partition$013) + ($46))|0;
   $from_partition$1$lcssa = $51;$to_partition$1$lcssa = $45;
  }
  $47 = ($partition_order$014|0)>($min_partition_order|0);
  if ($47) {
   $from_partition$012 = $from_partition$1$lcssa;$partition_order$014$in = $partition_order$014;$partitions$011 = $48;$to_partition$013 = $to_partition$1$lcssa;
  } else {
   break;
  }
 }
 return;
}
function _resize_buffers_($encoder,$new_blocksize) {
 $encoder = $encoder|0;
 $new_blocksize = $new_blocksize|0;
 var $$0 = 0, $$lcssa75 = 0, $$lcssa77 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $channel$026 = 0, $channel$118 = 0, $i$039 = 0, $i$134 = 0, $i$232 = 0, $i$321 = 0, $i$415 = 0, $i$514 = 0, $ok$038 = 0, $ok$038$lcssa = 0;
 var $ok$4$ph = 0, $ok$425 = 0, $ok$617 = 0, $ok$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($encoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<($new_blocksize>>>0);
 if (!($3)) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (($new_blocksize) + 5)|0;
 $i$039 = 0;$ok$038 = 1;
 while(1) {
  $7 = HEAP32[$encoder>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($i$039>>>0)<($9>>>0);
  if (!($10)) {
   $ok$038$lcssa = $ok$038;
   label = 3;
   break;
  }
  $11 = HEAP32[$0>>2]|0;
  $12 = (((($11)) + 7352|0) + ($i$039<<2)|0);
  $13 = (((($11)) + 4|0) + ($i$039<<2)|0);
  $14 = (_FLAC__memory_alloc_aligned_int32_array($4,$12,$13)|0);
  $15 = ($14|0)!=(0);
  $16 = $15&1;
  $17 = HEAP32[$0>>2]|0;
  $18 = (((($17)) + 4|0) + ($i$039<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (((($20)) + 4|0) + ($i$039<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 16|0);
  HEAP32[$21>>2] = $23;
  $24 = (($i$039) + 1)|0;
  if ($15) {
   $i$039 = $24;$ok$038 = $16;
  } else {
   $99 = 0;
   break;
  }
 }
 L7: do {
  if ((label|0) == 3) {
   $5 = ($ok$038$lcssa|0)==(0);
   if ($5) {
    $99 = 0;
   } else {
    $6 = (($new_blocksize) + 5)|0;
    $204 = 1;$i$134 = 0;
    while(1) {
     if ($204) {
      $25 = HEAP32[$0>>2]|0;
      $26 = (((($25)) + 7384|0) + ($i$134<<2)|0);
      $27 = (((($25)) + 36|0) + ($i$134<<2)|0);
      $28 = (_FLAC__memory_alloc_aligned_int32_array($6,$26,$27)|0);
      $29 = ($28|0)!=(0);
      $40 = $29;
     } else {
      $40 = 0;
     }
     $30 = HEAP32[$0>>2]|0;
     $31 = (((($30)) + 36|0) + ($i$134<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
     $33 = HEAP32[$0>>2]|0;
     $34 = (((($33)) + 36|0) + ($i$134<<2)|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($35)) + 16|0);
     HEAP32[$34>>2] = $36;
     $37 = (($i$134) + 1)|0;
     $38 = ($37>>>0)<(2);
     $39 = $40 & $38;
     if ($39) {
      $204 = $40;$i$134 = $37;
     } else {
      $$lcssa77 = $40;
      break;
     }
    }
    if ($$lcssa77) {
     $41 = $$lcssa77&1;
     $42 = HEAP32[$encoder>>2]|0;
     $43 = ((($42)) + 556|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      $ok$4$ph = $41;
     } else {
      L19: do {
       if ($$lcssa77) {
        $i$232 = 0;
        while(1) {
         $46 = HEAP32[$encoder>>2]|0;
         $47 = ((($46)) + 40|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = ($i$232>>>0)<($48>>>0);
         $50 = HEAP32[$0>>2]|0;
         if (!($49)) {
          $$lcssa75 = $50;
          break;
         }
         $51 = (((($50)) + 7432|0) + ($i$232<<2)|0);
         $52 = (((($50)) + 84|0) + ($i$232<<2)|0);
         $53 = (_FLAC__memory_alloc_aligned_real_array($new_blocksize,$51,$52)|0);
         $54 = ($53|0)==(0);
         $55 = (($i$232) + 1)|0;
         if ($54) {
          $61 = 0;
          break L19;
         } else {
          $i$232 = $55;
         }
        }
        $56 = ((($$lcssa75)) + 7560|0);
        $57 = ((($$lcssa75)) + 212|0);
        $58 = (_FLAC__memory_alloc_aligned_real_array($new_blocksize,$56,$57)|0);
        $59 = ($58|0)!=(0);
        $61 = $59;
       } else {
        $61 = 0;
       }
      } while(0);
      $60 = $61&1;
      $ok$4$ph = $60;
     }
     $62 = ($ok$4$ph|0)==(0);
     if ($62) {
      $99 = 0;
     } else {
      $channel$026 = 0;$ok$425 = $ok$4$ph;
      while(1) {
       $63 = HEAP32[$encoder>>2]|0;
       $64 = ((($63)) + 24|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($channel$026>>>0)<($65>>>0);
       if ($66) {
        $205 = 1;$i$321 = 0;
       } else {
        $channel$118 = 0;$ok$617 = $ok$425;
        break;
       }
       while(1) {
        if (!($205)) {
         $76 = 0;
         break;
        }
        $67 = HEAP32[$0>>2]|0;
        $68 = ((((($67)) + 7564|0) + ($channel$026<<3)|0) + ($i$321<<2)|0);
        $69 = ((((($67)) + 256|0) + ($channel$026<<3)|0) + ($i$321<<2)|0);
        $70 = (_FLAC__memory_alloc_aligned_int32_array($new_blocksize,$68,$69)|0);
        $71 = ($70|0)!=(0);
        $72 = (($i$321) + 1)|0;
        $73 = ($72>>>0)<(2);
        $74 = $71 & $73;
        if ($74) {
         $205 = $71;$i$321 = $72;
        } else {
         $76 = $71;
         break;
        }
       }
       $75 = $76&1;
       $77 = (($channel$026) + 1)|0;
       if ($76) {
        $channel$026 = $77;$ok$425 = $75;
       } else {
        $99 = 0;
        break L7;
       }
      }
      while(1) {
       $78 = ($ok$617|0)==(0);
       if ($78) {
        $99 = 0;
        break L7;
       } else {
        $206 = 1;$i$415 = 0;
       }
       while(1) {
        if (!($206)) {
         $88 = 0;
         break;
        }
        $79 = HEAP32[$0>>2]|0;
        $80 = ((((($79)) + 7628|0) + ($channel$118<<3)|0) + ($i$415<<2)|0);
        $81 = ((((($79)) + 320|0) + ($channel$118<<3)|0) + ($i$415<<2)|0);
        $82 = (_FLAC__memory_alloc_aligned_int32_array($new_blocksize,$80,$81)|0);
        $83 = ($82|0)!=(0);
        $84 = (($i$415) + 1)|0;
        $85 = ($84>>>0)<(2);
        $86 = $83 & $85;
        if ($86) {
         $206 = $83;$i$415 = $84;
        } else {
         $88 = $83;
         break;
        }
       }
       $87 = $88&1;
       $89 = (($channel$118) + 1)|0;
       $90 = ($89>>>0)<(2);
       $91 = $88 & $90;
       if ($91) {
        $channel$118 = $89;$ok$617 = $87;
       } else {
        break;
       }
      }
      if ($88) {
       $92 = $new_blocksize << 1;
       $93 = HEAP32[$0>>2]|0;
       $94 = ((($93)) + 7644|0);
       $95 = ((($93)) + 6848|0);
       $96 = (_FLAC__memory_alloc_aligned_uint64_array($92,$94,$95)|0);
       $97 = ($96|0)!=(0);
       $99 = $97;
      } else {
       $99 = 0;
      }
     }
    } else {
     $99 = 0;
    }
   }
  }
 } while(0);
 $98 = $99&1;
 $100 = HEAP32[$encoder>>2]|0;
 $101 = ((($100)) + 572|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0);
 if ($103) {
  $ok$8 = $98;
 } else {
  if ($99) {
   $104 = $new_blocksize << 1;
   $105 = HEAP32[$0>>2]|0;
   $106 = ((($105)) + 7648|0);
   $107 = ((($105)) + 6852|0);
   $108 = (_FLAC__memory_alloc_aligned_unsigned_array($104,$106,$107)|0);
   $109 = ($108|0)!=(0);
   $111 = $109;
  } else {
   $111 = 0;
  }
  $110 = $111&1;
  $ok$8 = $110;
 }
 $112 = ($ok$8|0)==(0);
 if ($112) {
  $203 = HEAP32[$encoder>>2]|0;
  HEAP32[$203>>2] = 8;
  $$0 = 0;
  return ($$0|0);
 }
 $113 = HEAP32[$0>>2]|0;
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)==($new_blocksize|0);
 L51: do {
  if (!($115)) {
   $116 = HEAP32[$encoder>>2]|0;
   $117 = ((($116)) + 556|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(0);
   if (!($119)) {
    $120 = HEAP32[$encoder>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0);
    if (!($123)) {
     $125 = $120;$i$514 = 0;
     while(1) {
      $124 = (((($125)) + 44|0) + ($i$514<<4)|0);
      $126 = HEAP32[$124>>2]|0;
      do {
       switch ($126|0) {
       case 0:  {
        $127 = HEAP32[$0>>2]|0;
        $128 = (((($127)) + 84|0) + ($i$514<<2)|0);
        $129 = HEAP32[$128>>2]|0;
        _FLAC__window_bartlett($129,$new_blocksize);
        break;
       }
       case 1:  {
        $130 = HEAP32[$0>>2]|0;
        $131 = (((($130)) + 84|0) + ($i$514<<2)|0);
        $132 = HEAP32[$131>>2]|0;
        _FLAC__window_bartlett_hann($132,$new_blocksize);
        break;
       }
       case 2:  {
        $133 = HEAP32[$0>>2]|0;
        $134 = (((($133)) + 84|0) + ($i$514<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        _FLAC__window_blackman($135,$new_blocksize);
        break;
       }
       case 3:  {
        $136 = HEAP32[$0>>2]|0;
        $137 = (((($136)) + 84|0) + ($i$514<<2)|0);
        $138 = HEAP32[$137>>2]|0;
        _FLAC__window_blackman_harris_4term_92db_sidelobe($138,$new_blocksize);
        break;
       }
       case 4:  {
        $139 = HEAP32[$0>>2]|0;
        $140 = (((($139)) + 84|0) + ($i$514<<2)|0);
        $141 = HEAP32[$140>>2]|0;
        _FLAC__window_connes($141,$new_blocksize);
        break;
       }
       case 5:  {
        $142 = HEAP32[$0>>2]|0;
        $143 = (((($142)) + 84|0) + ($i$514<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        _FLAC__window_flattop($144,$new_blocksize);
        break;
       }
       case 6:  {
        $145 = HEAP32[$0>>2]|0;
        $146 = (((($145)) + 84|0) + ($i$514<<2)|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 4|0);
        $149 = +HEAPF32[$148>>2];
        _FLAC__window_gauss($147,$new_blocksize,$149);
        break;
       }
       case 7:  {
        $150 = HEAP32[$0>>2]|0;
        $151 = (((($150)) + 84|0) + ($i$514<<2)|0);
        $152 = HEAP32[$151>>2]|0;
        _FLAC__window_hamming($152,$new_blocksize);
        break;
       }
       case 8:  {
        $153 = HEAP32[$0>>2]|0;
        $154 = (((($153)) + 84|0) + ($i$514<<2)|0);
        $155 = HEAP32[$154>>2]|0;
        _FLAC__window_hann($155,$new_blocksize);
        break;
       }
       case 9:  {
        $156 = HEAP32[$0>>2]|0;
        $157 = (((($156)) + 84|0) + ($i$514<<2)|0);
        $158 = HEAP32[$157>>2]|0;
        _FLAC__window_kaiser_bessel($158,$new_blocksize);
        break;
       }
       case 10:  {
        $159 = HEAP32[$0>>2]|0;
        $160 = (((($159)) + 84|0) + ($i$514<<2)|0);
        $161 = HEAP32[$160>>2]|0;
        _FLAC__window_nuttall($161,$new_blocksize);
        break;
       }
       case 11:  {
        $162 = HEAP32[$0>>2]|0;
        $163 = (((($162)) + 84|0) + ($i$514<<2)|0);
        $164 = HEAP32[$163>>2]|0;
        _FLAC__window_rectangle($164,$new_blocksize);
        break;
       }
       case 12:  {
        $165 = HEAP32[$0>>2]|0;
        $166 = (((($165)) + 84|0) + ($i$514<<2)|0);
        $167 = HEAP32[$166>>2]|0;
        _FLAC__window_triangle($167,$new_blocksize);
        break;
       }
       case 13:  {
        $168 = HEAP32[$0>>2]|0;
        $169 = (((($168)) + 84|0) + ($i$514<<2)|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 4|0);
        $172 = +HEAPF32[$171>>2];
        _FLAC__window_tukey($170,$new_blocksize,$172);
        break;
       }
       case 14:  {
        $173 = HEAP32[$0>>2]|0;
        $174 = (((($173)) + 84|0) + ($i$514<<2)|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 4|0);
        $177 = +HEAPF32[$176>>2];
        $178 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 8|0);
        $179 = +HEAPF32[$178>>2];
        $180 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 12|0);
        $181 = +HEAPF32[$180>>2];
        _FLAC__window_partial_tukey($175,$new_blocksize,$177,$179,$181);
        break;
       }
       case 15:  {
        $182 = HEAP32[$0>>2]|0;
        $183 = (((($182)) + 84|0) + ($i$514<<2)|0);
        $184 = HEAP32[$183>>2]|0;
        $185 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 4|0);
        $186 = +HEAPF32[$185>>2];
        $187 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 8|0);
        $188 = +HEAPF32[$187>>2];
        $189 = (((((($125)) + 44|0) + ($i$514<<4)|0)) + 12|0);
        $190 = +HEAPF32[$189>>2];
        _FLAC__window_punchout_tukey($184,$new_blocksize,$186,$188,$190);
        break;
       }
       case 16:  {
        $191 = HEAP32[$0>>2]|0;
        $192 = (((($191)) + 84|0) + ($i$514<<2)|0);
        $193 = HEAP32[$192>>2]|0;
        _FLAC__window_welch($193,$new_blocksize);
        break;
       }
       default: {
        $194 = HEAP32[$0>>2]|0;
        $195 = (((($194)) + 84|0) + ($i$514<<2)|0);
        $196 = HEAP32[$195>>2]|0;
        _FLAC__window_hann($196,$new_blocksize);
       }
       }
      } while(0);
      $197 = (($i$514) + 1)|0;
      $198 = HEAP32[$encoder>>2]|0;
      $199 = ((($198)) + 40|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($197>>>0)<($200>>>0);
      if ($201) {
       $125 = $198;$i$514 = $197;
      } else {
       break L51;
      }
     }
    }
   }
  }
 } while(0);
 $202 = HEAP32[$0>>2]|0;
 HEAP32[$202>>2] = $new_blocksize;
 $$0 = $ok$8;
 return ($$0|0);
}
function _verify_read_callback_($decoder,$buffer,$bytes,$client_data) {
 $decoder = $decoder|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 $client_data = $client_data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($client_data)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 11836|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 11784|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  HEAP32[$bytes>>2] = 4;
  $7 = HEAPU8[2592>>0]|(HEAPU8[2592+1>>0]<<8)|(HEAPU8[2592+2>>0]<<16)|(HEAPU8[2592+3>>0]<<24);
  HEAP8[$buffer>>0]=$7&255;HEAP8[$buffer+1>>0]=($7>>8)&255;HEAP8[$buffer+2>>0]=($7>>16)&255;HEAP8[$buffer+3>>0]=$7>>24;
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + 11784|0);
  HEAP32[$9>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ($3|0)==(0);
 if ($10) {
  $$0 = 2;
  return ($$0|0);
 }
 $11 = HEAP32[$bytes>>2]|0;
 $12 = ($3>>>0)<($11>>>0);
 if ($12) {
  HEAP32[$bytes>>2] = $3;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 11828|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$bytes>>2]|0;
 _memcpy(($buffer|0),($15|0),($16|0))|0;
 $17 = HEAP32[$bytes>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 11828|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($17)|0);
 HEAP32[$19>>2] = $21;
 $22 = HEAP32[$bytes>>2]|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($23)) + 11836|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($22))|0;
 HEAP32[$24>>2] = $26;
 $$0 = 0;
 return ($$0|0);
}
function _verify_write_callback_($decoder,$frame,$buffer,$client_data) {
 $decoder = $decoder|0;
 $frame = $frame|0;
 $buffer = $buffer|0;
 $client_data = $client_data|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $channel$013 = 0, $channel$013$lcssa = 0, $channel$110 = 0;
 var $exitcond = 0, $expect$0 = 0, $got$0 = 0, $i$03 = 0, $sample$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$frame>>2]|0;
 $3 = $2 << 2;
 $4 = ($1|0)==(0);
 L1: do {
  if (!($4)) {
   $5 = ((($client_data)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $channel$013 = 0;
   while(1) {
    $7 = (($buffer) + ($channel$013<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (((($6)) + 11788|0) + ($channel$013<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_memcmp($8,$10,$3)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     $$lcssa = $7;$channel$013$lcssa = $channel$013;
     break;
    }
    $59 = (($channel$013) + 1)|0;
    $60 = ($59>>>0)<($1>>>0);
    if ($60) {
     $channel$013 = $59;
    } else {
     break L1;
    }
   }
   $13 = ($2|0)==(0);
   L7: do {
    if ($13) {
     $expect$0 = 0;$got$0 = 0;$sample$0 = 0;
    } else {
     $14 = HEAP32[$$lcssa>>2]|0;
     $15 = HEAP32[$5>>2]|0;
     $16 = (((($15)) + 11788|0) + ($channel$013$lcssa<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $i$03 = 0;
     while(1) {
      $18 = (($14) + ($i$03<<2)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($17) + ($i$03<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($19|0)==($21|0);
      if (!($22)) {
       $expect$0 = $21;$got$0 = $19;$sample$0 = $i$03;
       break L7;
      }
      $23 = (($i$03) + 1)|0;
      $24 = ($23>>>0)<($2>>>0);
      if ($24) {
       $i$03 = $23;
      } else {
       $expect$0 = 0;$got$0 = 0;$sample$0 = 0;
       break;
      }
     }
    }
   } while(0);
   $25 = ((($frame)) + 24|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (_i64Add(($28|0),($31|0),($sample$0|0),0)|0);
   $33 = tempRet0;
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 11840|0);
   $36 = $35;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $33;
   $40 = $25;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (___udivdi3(($42|0),($45|0),($2|0),0)|0);
   $47 = tempRet0;
   $48 = HEAP32[$5>>2]|0;
   $49 = ((($48)) + 11848|0);
   HEAP32[$49>>2] = $46;
   $50 = HEAP32[$5>>2]|0;
   $51 = ((($50)) + 11852|0);
   HEAP32[$51>>2] = $channel$013$lcssa;
   $52 = HEAP32[$5>>2]|0;
   $53 = ((($52)) + 11856|0);
   HEAP32[$53>>2] = $sample$0;
   $54 = HEAP32[$5>>2]|0;
   $55 = ((($54)) + 11860|0);
   HEAP32[$55>>2] = $expect$0;
   $56 = HEAP32[$5>>2]|0;
   $57 = ((($56)) + 11864|0);
   HEAP32[$57>>2] = $got$0;
   $58 = HEAP32[$client_data>>2]|0;
   HEAP32[$58>>2] = 4;
   $$0 = 1;
   return ($$0|0);
  }
 } while(0);
 $61 = ((($client_data)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 11824|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) - ($2))|0;
 HEAP32[$63>>2] = $65;
 $66 = ($1|0)==(0);
 if ($66) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $channel$110 = 0;
 }
 while(1) {
  $67 = HEAP32[$61>>2]|0;
  $68 = (((($67)) + 11788|0) + ($channel$110<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($2<<2)|0);
  $71 = ((($67)) + 11824|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 << 2;
  _memmove(($69|0),($70|0),($73|0))|0;
  $74 = (($channel$110) + 1)|0;
  $exitcond = ($74|0)==($1|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $channel$110 = $74;
  }
 }
 return ($$0|0);
}
function _verify_metadata_callback_($decoder,$metadata,$client_data) {
 $decoder = $decoder|0;
 $metadata = $metadata|0;
 $client_data = $client_data|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _verify_error_callback_($decoder,$status,$client_data) {
 $decoder = $decoder|0;
 $status = $status|0;
 $client_data = $client_data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$client_data>>2]|0;
 HEAP32[$0>>2] = 3;
 return;
}
function _write_bitbuffer_($encoder,$samples) {
 $encoder = $encoder|0;
 $samples = $samples|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buffer = sp + 4|0;
 $bytes = sp;
 $0 = ((($encoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6856|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FLAC__bitwriter_get_buffer($3,$buffer,$bytes)|0);
 $5 = ($4|0)==(0);
 $6 = HEAP32[$encoder>>2]|0;
 if ($5) {
  HEAP32[$6>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if (!($9)) {
   $10 = HEAP32[$buffer>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 11828|0);
   HEAP32[$12>>2] = $10;
   $13 = HEAP32[$bytes>>2]|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 11836|0);
   HEAP32[$15>>2] = $13;
   $16 = HEAP32[$0>>2]|0;
   $17 = ((($16)) + 11780|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = ((($16)) + 11784|0);
    HEAP32[$20>>2] = 1;
    break;
   }
   $21 = ((($16)) + 11776|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_FLAC__stream_decoder_process_single($22)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + 6856|0);
    $27 = HEAP32[$26>>2]|0;
    _FLAC__bitwriter_clear($27);
    $28 = HEAP32[$encoder>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(4);
    if ($30) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$28>>2] = 3;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $31 = HEAP32[$buffer>>2]|0;
 $32 = HEAP32[$bytes>>2]|0;
 $33 = (_write_frame_($encoder,$31,$32,$samples)|0);
 $34 = ($33|0)==(0);
 $35 = HEAP32[$0>>2]|0;
 $36 = ((($35)) + 6856|0);
 $37 = HEAP32[$36>>2]|0;
 _FLAC__bitwriter_clear($37);
 if (!($34)) {
  $38 = HEAP32[$encoder>>2]|0;
  HEAP32[$38>>2] = 5;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = ($samples|0)==(0);
 if ($39) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$bytes>>2]|0;
 $41 = HEAP32[$0>>2]|0;
 $42 = ((($41)) + 6896|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($40>>>0)<($43>>>0);
 $$ = $44 ? $40 : $43;
 HEAP32[$42>>2] = $$;
 $45 = HEAP32[$bytes>>2]|0;
 $46 = HEAP32[$0>>2]|0;
 $47 = ((($46)) + 6900|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($45>>>0)>($48>>>0);
 $50 = $49 ? $45 : $48;
 HEAP32[$47>>2] = $50;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _write_frame_($encoder,$buffer,$bytes,$samples) {
 $encoder = $encoder|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 $samples = $samples|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$01 = 0, $output_position = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $output_position = sp;
 $0 = $output_position;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = ((($encoder)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 7296|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($5)) + 7312|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_iiii[$7 & 31]($encoder,$output_position,$10)|0);
  $12 = ($11|0)==(1);
  if ($12) {
   $13 = HEAP32[$encoder>>2]|0;
   HEAP32[$13>>2] = 5;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $14 = ($samples|0)==(0);
 L6: do {
  if ($14) {
   $15 = HEAP8[$buffer>>0]|0;
   $16 = $15&255;
   $17 = $16 & 127;
   switch ($17|0) {
   case 0:  {
    $18 = $output_position;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($18) + 4)|0;
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$encoder>>2]|0;
    $25 = ((($24)) + 608|0);
    $26 = $25;
    $27 = $26;
    HEAP32[$27>>2] = $20;
    $28 = (($26) + 4)|0;
    $29 = $28;
    HEAP32[$29>>2] = $23;
    break L6;
    break;
   }
   case 3:  {
    break;
   }
   default: {
    break L6;
   }
   }
   $30 = HEAP32[$encoder>>2]|0;
   $31 = ((($30)) + 616|0);
   $32 = $31;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = ($34|0)==(0);
   $39 = ($37|0)==(0);
   $40 = $38 & $39;
   if ($40) {
    $41 = $output_position;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = $31;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
   }
  }
 } while(0);
 $51 = HEAP32[$4>>2]|0;
 $52 = ((($51)) + 7048|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0|0);
 L13: do {
  if (!($54)) {
   $55 = HEAP32[$encoder>>2]|0;
   $56 = ((($55)) + 624|0);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = ($59|0)==(0);
   $64 = ($62|0)==(0);
   $65 = $63 & $64;
   if (!($65)) {
    $66 = HEAP32[$53>>2]|0;
    $67 = ($66|0)==(0);
    if (!($67)) {
     $68 = (_FLAC__stream_encoder_get_blocksize($encoder)|0);
     $69 = ((($51)) + 7336|0);
     $70 = $69;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $73 = (($70) + 4)|0;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (_i64Add(($68|0),0,-1,-1)|0);
     $77 = tempRet0;
     $78 = (_i64Add(($76|0),($77|0),($72|0),($75|0))|0);
     $79 = tempRet0;
     $80 = ((($51)) + 7316|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = HEAP32[$4>>2]|0;
     $83 = ((($82)) + 7048|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = HEAP32[$84>>2]|0;
     $86 = ($81>>>0)<($85>>>0);
     if ($86) {
      $148 = $82;$88 = $84;$i$01 = $81;
      while(1) {
       $87 = ((($88)) + 4|0);
       $89 = HEAP32[$87>>2]|0;
       $90 = (($89) + (($i$01*24)|0)|0);
       $91 = $90;
       $92 = $91;
       $93 = HEAP32[$92>>2]|0;
       $94 = (($91) + 4)|0;
       $95 = $94;
       $96 = HEAP32[$95>>2]|0;
       $97 = ($96>>>0)>($79>>>0);
       $98 = ($93>>>0)>($78>>>0);
       $99 = ($96|0)==($79|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        break L13;
       }
       $102 = ($96>>>0)<($75>>>0);
       $103 = ($93>>>0)<($72>>>0);
       $104 = ($96|0)==($75|0);
       $105 = $104 & $103;
       $106 = $102 | $105;
       if ($106) {
        $147 = ((($148)) + 7316|0);
        $149 = HEAP32[$147>>2]|0;
        $150 = (($149) + 1)|0;
        HEAP32[$147>>2] = $150;
       } else {
        $107 = $90;
        $108 = $107;
        HEAP32[$108>>2] = $72;
        $109 = (($107) + 4)|0;
        $110 = $109;
        HEAP32[$110>>2] = $75;
        $111 = $output_position;
        $112 = $111;
        $113 = HEAP32[$112>>2]|0;
        $114 = (($111) + 4)|0;
        $115 = $114;
        $116 = HEAP32[$115>>2]|0;
        $117 = HEAP32[$encoder>>2]|0;
        $118 = ((($117)) + 624|0);
        $119 = $118;
        $120 = $119;
        $121 = HEAP32[$120>>2]|0;
        $122 = (($119) + 4)|0;
        $123 = $122;
        $124 = HEAP32[$123>>2]|0;
        $125 = (_i64Subtract(($113|0),($116|0),($121|0),($124|0))|0);
        $126 = tempRet0;
        $127 = HEAP32[$4>>2]|0;
        $128 = ((($127)) + 7048|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ((($129)) + 4|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (((($131) + (($i$01*24)|0)|0)) + 8|0);
        $133 = $132;
        $134 = $133;
        HEAP32[$134>>2] = $125;
        $135 = (($133) + 4)|0;
        $136 = $135;
        HEAP32[$136>>2] = $126;
        $137 = HEAP32[$4>>2]|0;
        $138 = ((($137)) + 7048|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = ((($139)) + 4|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = (((($141) + (($i$01*24)|0)|0)) + 16|0);
        HEAP32[$142>>2] = $68;
        $143 = HEAP32[$4>>2]|0;
        $144 = ((($143)) + 7316|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = (($145) + 1)|0;
        HEAP32[$144>>2] = $146;
       }
       $151 = (($i$01) + 1)|0;
       $152 = HEAP32[$4>>2]|0;
       $153 = ((($152)) + 7048|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = HEAP32[$154>>2]|0;
       $156 = ($151>>>0)<($155>>>0);
       if ($156) {
        $148 = $152;$88 = $154;$i$01 = $151;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 $157 = HEAP32[$4>>2]|0;
 $158 = ((($157)) + 7300|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($157)) + 7056|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($157)) + 7312|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (FUNCTION_TABLE_iiiiiii[$159 & 15]($encoder,$buffer,$bytes,$samples,$161,$163)|0);
 $165 = ($164|0)==(0);
 if ($165) {
  $166 = HEAP32[$4>>2]|0;
  $167 = ((($166)) + 7328|0);
  $168 = $167;
  $169 = $168;
  $170 = HEAP32[$169>>2]|0;
  $171 = (($168) + 4)|0;
  $172 = $171;
  $173 = HEAP32[$172>>2]|0;
  $174 = (_i64Add(($170|0),($173|0),($bytes|0),0)|0);
  $175 = tempRet0;
  $176 = $167;
  $177 = $176;
  HEAP32[$177>>2] = $174;
  $178 = (($176) + 4)|0;
  $179 = $178;
  HEAP32[$179>>2] = $175;
  $180 = HEAP32[$4>>2]|0;
  $181 = ((($180)) + 7336|0);
  $182 = $181;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = (($182) + 4)|0;
  $186 = $185;
  $187 = HEAP32[$186>>2]|0;
  $188 = (_i64Add(($184|0),($187|0),($samples|0),0)|0);
  $189 = tempRet0;
  $190 = $181;
  $191 = $190;
  HEAP32[$191>>2] = $188;
  $192 = (($190) + 4)|0;
  $193 = $192;
  HEAP32[$193>>2] = $189;
  $194 = HEAP32[$4>>2]|0;
  $195 = ((($194)) + 7344|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ((($194)) + 7056|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (($198) + 1)|0;
  $200 = ($196>>>0)>($199>>>0);
  $$ = $200 ? $196 : $199;
  HEAP32[$195>>2] = $$;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $201 = HEAP32[$encoder>>2]|0;
  HEAP32[$201>>2] = 5;
  $$0 = $164;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__bitmath_ilog2244($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FLAC__clz_uint32245($v)|0);
 $1 = $0 ^ 31;
 return ($1|0);
}
function _FLAC__clz_uint32245($v) {
 $v = $v|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Math_clz32(($v|0))|0);
 return ($0|0);
}
function _process_subframes_($encoder,$is_fractional_block) {
 $encoder = $encoder|0;
 $is_fractional_block = $is_fractional_block|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$2$1 = 0, $$min_bits$0 = 0, $$min_bits$0$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $ca$0$channel_assignment$0 = 0, $ca$0$channel_assignment$0$1 = 0, $ca$0$channel_assignment$0$2 = 0, $channel$035 = 0, $channel$232 = 0, $channel$430 = 0, $channel_assignment$2 = 0, $do_mid_side$03 = 0, $do_mid_side$04$ph = 0, $frame_header = 0, $left_bps$0 = 0;
 var $left_subframe$07 = 0, $max_partition_order$0 = 0, $right_bps$0 = 0, $right_subframe$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $frame_header = sp;
 $bits = sp + 40|0;
 $0 = HEAP32[$encoder>>2]|0;
 $1 = ((($0)) + 576|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($is_fractional_block|0)==(0);
 if ($3) {
  $4 = ((($0)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_FLAC__format_get_max_rice_partition_order_from_blocksize($5)|0);
  $7 = HEAP32[$encoder>>2]|0;
  $8 = ((($7)) + 580|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  $$ = $10 ? $6 : $9;
  $max_partition_order$0 = $$;
 } else {
  $max_partition_order$0 = 0;
 }
 $11 = ($2>>>0)<($max_partition_order$0>>>0);
 $12 = $11 ? $2 : $max_partition_order$0;
 $13 = HEAP32[$encoder>>2]|0;
 $14 = ((($13)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$frame_header>>2] = $15;
 $16 = HEAP32[$encoder>>2]|0;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($frame_header)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$encoder>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($frame_header)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($frame_header)) + 12|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$encoder>>2]|0;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($frame_header)) + 16|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($frame_header)) + 20|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($encoder)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 7056|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($frame_header)) + 24|0);
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$encoder>>2]|0;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $do_mid_side$04$ph = 0;
  label = 7;
 } else {
  $39 = ((($35)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0);
  if ($41) {
   $do_mid_side$04$ph = 1;
   label = 7;
  } else {
   $42 = HEAP32[$30>>2]|0;
   $43 = ((($42)) + 6864|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0);
   if ($45) {
    $do_mid_side$04$ph = 1;
    label = 7;
   } else {
    $46 = ((($42)) + 6868|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0);
    $49 = $48&1;
    $50 = $49 ^ 1;
    if ($48) {
     $do_mid_side$04$ph = $50;
     label = 7;
    } else {
     $320 = 0;$do_mid_side$03 = $50;
    }
   }
  }
 }
 if ((label|0) == 7) {
  $51 = HEAP32[$encoder>>2]|0;
  $52 = ((($51)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0);
  if ($54) {
   $320 = 1;$do_mid_side$03 = $do_mid_side$04$ph;
  } else {
   $59 = $51;$channel$035 = 0;
   while(1) {
    $55 = HEAP32[$30>>2]|0;
    $56 = (((($55)) + 4|0) + ($channel$035<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($59)) + 36|0);
    $60 = HEAP32[$58>>2]|0;
    $61 = (_get_wasted_bits_($57,$60)|0);
    $62 = HEAP32[$encoder>>2]|0;
    $63 = ((($62)) + 28|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($61>>>0)>($64>>>0);
    $$1 = $65 ? $64 : $61;
    $66 = HEAP32[$30>>2]|0;
    $67 = (((((($66)) + 336|0) + (($channel$035*584)|0)|0)) + 580|0);
    HEAP32[$67>>2] = $$1;
    $68 = HEAP32[$30>>2]|0;
    $69 = (((((($68)) + 336|0) + (($channel$035*584)|0)|0)) + 288|0);
    HEAP32[$69>>2] = $$1;
    $70 = HEAP32[$encoder>>2]|0;
    $71 = ((($70)) + 28|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) - ($$1))|0;
    $74 = HEAP32[$30>>2]|0;
    $75 = (((($74)) + 216|0) + ($channel$035<<2)|0);
    HEAP32[$75>>2] = $73;
    $76 = (($channel$035) + 1)|0;
    $77 = HEAP32[$encoder>>2]|0;
    $78 = ((($77)) + 24|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($76>>>0)<($79>>>0);
    if ($80) {
     $59 = $77;$channel$035 = $76;
    } else {
     $320 = 1;$do_mid_side$03 = $do_mid_side$04$ph;
     break;
    }
   }
  }
 }
 $81 = ($do_mid_side$03|0)!=(0);
 if ($81) {
  $82 = HEAP32[$30>>2]|0;
  $83 = ((($82)) + 36|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = HEAP32[$encoder>>2]|0;
  $86 = ((($85)) + 36|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (_get_wasted_bits_($84,$87)|0);
  $89 = HEAP32[$encoder>>2]|0;
  $90 = ((($89)) + 28|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($88>>>0)>($91>>>0);
  $$2 = $92 ? $91 : $88;
  $93 = HEAP32[$30>>2]|0;
  $94 = ((($93)) + 5588|0);
  HEAP32[$94>>2] = $$2;
  $95 = HEAP32[$30>>2]|0;
  $96 = ((($95)) + 5296|0);
  HEAP32[$96>>2] = $$2;
  $97 = HEAP32[$encoder>>2]|0;
  $98 = ((($97)) + 28|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) - ($$2))|0;
  $101 = HEAP32[$30>>2]|0;
  $102 = ((($101)) + 248|0);
  HEAP32[$102>>2] = $100;
  $103 = HEAP32[$30>>2]|0;
  $104 = ((($103)) + 40|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$encoder>>2]|0;
  $107 = ((($106)) + 36|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (_get_wasted_bits_($105,$108)|0);
  $110 = HEAP32[$encoder>>2]|0;
  $111 = ((($110)) + 28|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($109>>>0)>($112>>>0);
  $$2$1 = $113 ? $112 : $109;
  $114 = HEAP32[$30>>2]|0;
  $115 = ((($114)) + 6172|0);
  HEAP32[$115>>2] = $$2$1;
  $116 = HEAP32[$30>>2]|0;
  $117 = ((($116)) + 5880|0);
  HEAP32[$117>>2] = $$2$1;
  $118 = HEAP32[$encoder>>2]|0;
  $119 = ((($118)) + 28|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (1 - ($$2$1))|0;
  $122 = (($121) + ($120))|0;
  $123 = HEAP32[$30>>2]|0;
  $124 = ((($123)) + 252|0);
  HEAP32[$124>>2] = $122;
 }
 if ($320) {
  $125 = HEAP32[$encoder>>2]|0;
  $126 = ((($125)) + 24|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)==(0);
  if (!($128)) {
   $channel$232 = 0;
   while(1) {
    $129 = HEAP32[$30>>2]|0;
    $130 = (((($129)) + 216|0) + ($channel$232<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (((($129)) + 4|0) + ($channel$232<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (((($129)) + 6176|0) + ($channel$232<<3)|0);
    $135 = (((($129)) + 6640|0) + ($channel$232<<3)|0);
    $136 = (((($129)) + 256|0) + ($channel$232<<3)|0);
    $137 = (((($129)) + 6768|0) + ($channel$232<<2)|0);
    $138 = (((($129)) + 6808|0) + ($channel$232<<2)|0);
    _process_subframe_($encoder,$12,$max_partition_order$0,$frame_header,$131,$133,$134,$135,$136,$137,$138);
    $139 = (($channel$232) + 1)|0;
    $140 = HEAP32[$encoder>>2]|0;
    $141 = ((($140)) + 24|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($139>>>0)<($142>>>0);
    if ($143) {
     $channel$232 = $139;
    } else {
     break;
    }
   }
  }
 }
 $144 = HEAP32[$30>>2]|0;
 L21: do {
  if ($81) {
   $145 = ((($144)) + 248|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ((($144)) + 36|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ((($144)) + 6240|0);
   $150 = ((($144)) + 6704|0);
   $151 = ((($144)) + 320|0);
   $152 = ((($144)) + 6800|0);
   $153 = ((($144)) + 6840|0);
   _process_subframe_($encoder,$12,$max_partition_order$0,$frame_header,$146,$148,$149,$150,$151,$152,$153);
   $154 = HEAP32[$30>>2]|0;
   $155 = ((($154)) + 252|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ((($154)) + 40|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ((($154)) + 6248|0);
   $160 = ((($154)) + 6712|0);
   $161 = ((($154)) + 328|0);
   $162 = ((($154)) + 6804|0);
   $163 = ((($154)) + 6844|0);
   _process_subframe_($encoder,$12,$max_partition_order$0,$frame_header,$156,$158,$159,$160,$161,$162,$163);
   $164 = HEAP32[$encoder>>2]|0;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ($166|0)==(0);
   if ($167) {
    label = 18;
   } else {
    $168 = HEAP32[$30>>2]|0;
    $169 = ((($168)) + 6864|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)==(0);
    if ($171) {
     label = 18;
    } else {
     $172 = ((($168)) + 6868|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0);
     $175 = $174 ? 0 : 3;
     $channel_assignment$2 = $175;
    }
   }
   if ((label|0) == 18) {
    $176 = HEAP32[$30>>2]|0;
    $177 = ((($176)) + 6808|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($176)) + 6812|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + ($178))|0;
    HEAP32[$bits>>2] = $181;
    $182 = HEAP32[$30>>2]|0;
    $183 = ((($182)) + 6808|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ((($182)) + 6844|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + ($184))|0;
    $188 = ((($bits)) + 4|0);
    HEAP32[$188>>2] = $187;
    $189 = HEAP32[$30>>2]|0;
    $190 = ((($189)) + 6812|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ((($189)) + 6844|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + ($191))|0;
    $195 = ((($bits)) + 8|0);
    HEAP32[$195>>2] = $194;
    $196 = HEAP32[$30>>2]|0;
    $197 = ((($196)) + 6840|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ((($196)) + 6844|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) + ($198))|0;
    $202 = ((($bits)) + 12|0);
    HEAP32[$202>>2] = $201;
    $203 = HEAP32[$bits>>2]|0;
    $204 = ((($bits)) + 4|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205>>>0)<($203>>>0);
    $ca$0$channel_assignment$0 = $206&1;
    $$min_bits$0 = $206 ? $205 : $203;
    $207 = ((($bits)) + 8|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208>>>0)<($$min_bits$0>>>0);
    $ca$0$channel_assignment$0$1 = $209 ? 2 : $ca$0$channel_assignment$0;
    $$min_bits$0$1 = $209 ? $208 : $$min_bits$0;
    $210 = ((($bits)) + 12|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ($211>>>0)<($$min_bits$0$1>>>0);
    $ca$0$channel_assignment$0$2 = $212 ? 3 : $ca$0$channel_assignment$0$1;
    $channel_assignment$2 = $ca$0$channel_assignment$0$2;
   }
   HEAP32[$24>>2] = $channel_assignment$2;
   $213 = HEAP32[$30>>2]|0;
   $214 = ((($213)) + 6856|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (_FLAC__frame_add_header($frame_header,$215)|0);
   $217 = ($216|0)==(0);
   if ($217) {
    $218 = HEAP32[$encoder>>2]|0;
    HEAP32[$218>>2] = 7;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   switch ($channel_assignment$2|0) {
   case 0:  {
    $219 = HEAP32[$30>>2]|0;
    $220 = ((($219)) + 6768|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = (((($219)) + 336|0) + (($221*292)|0)|0);
    $223 = ((($219)) + 6772|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = (((($219)) + 920|0) + (($224*292)|0)|0);
    $226 = HEAP32[$30>>2]|0;
    $227 = ((($226)) + 216|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ((($226)) + 220|0);
    $230 = HEAP32[$229>>2]|0;
    $left_bps$0 = $228;$left_subframe$07 = $222;$right_bps$0 = $230;$right_subframe$09 = $225;
    break;
   }
   case 1:  {
    $231 = HEAP32[$30>>2]|0;
    $232 = ((($231)) + 6768|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (((($231)) + 336|0) + (($233*292)|0)|0);
    $235 = ((($231)) + 6804|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (((($231)) + 5592|0) + (($236*292)|0)|0);
    $238 = HEAP32[$30>>2]|0;
    $239 = ((($238)) + 216|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ((($238)) + 252|0);
    $242 = HEAP32[$241>>2]|0;
    $left_bps$0 = $240;$left_subframe$07 = $234;$right_bps$0 = $242;$right_subframe$09 = $237;
    break;
   }
   case 2:  {
    $243 = HEAP32[$30>>2]|0;
    $244 = ((($243)) + 6804|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (((($243)) + 5592|0) + (($245*292)|0)|0);
    $247 = ((($243)) + 6772|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (((($243)) + 920|0) + (($248*292)|0)|0);
    $250 = HEAP32[$30>>2]|0;
    $251 = ((($250)) + 252|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ((($250)) + 220|0);
    $254 = HEAP32[$253>>2]|0;
    $left_bps$0 = $252;$left_subframe$07 = $246;$right_bps$0 = $254;$right_subframe$09 = $249;
    break;
   }
   case 3:  {
    $255 = HEAP32[$30>>2]|0;
    $256 = ((($255)) + 6800|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = (((($255)) + 5008|0) + (($257*292)|0)|0);
    $259 = ((($255)) + 6804|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = (((($255)) + 5592|0) + (($260*292)|0)|0);
    $262 = HEAP32[$30>>2]|0;
    $263 = ((($262)) + 248|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = ((($262)) + 252|0);
    $266 = HEAP32[$265>>2]|0;
    $left_bps$0 = $264;$left_subframe$07 = $258;$right_bps$0 = $266;$right_subframe$09 = $261;
    break;
   }
   default: {
    $left_bps$0 = 0;$left_subframe$07 = 0;$right_bps$0 = 0;$right_subframe$09 = 0;
   }
   }
   $267 = HEAP32[$frame_header>>2]|0;
   $268 = HEAP32[$30>>2]|0;
   $269 = ((($268)) + 6856|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = (_add_subframe_($encoder,$267,$left_bps$0,$left_subframe$07,$270)|0);
   $272 = ($271|0)==(0);
   if ($272) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $273 = HEAP32[$frame_header>>2]|0;
   $274 = HEAP32[$30>>2]|0;
   $275 = ((($274)) + 6856|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = (_add_subframe_($encoder,$273,$right_bps$0,$right_subframe$09,$276)|0);
   $278 = ($277|0)==(0);
   if ($278) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $279 = ((($144)) + 6856|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = (_FLAC__frame_add_header($frame_header,$280)|0);
   $282 = ($281|0)==(0);
   $283 = HEAP32[$encoder>>2]|0;
   if ($282) {
    HEAP32[$283>>2] = 7;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $284 = ((($283)) + 24|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($285|0)==(0);
   if (!($286)) {
    $channel$430 = 0;
    while(1) {
     $292 = HEAP32[$frame_header>>2]|0;
     $293 = HEAP32[$30>>2]|0;
     $294 = (((($293)) + 216|0) + ($channel$430<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = (((($293)) + 6768|0) + ($channel$430<<2)|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ((((($293)) + 336|0) + (($channel$430*584)|0)|0) + (($297*292)|0)|0);
     $299 = ((($293)) + 6856|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = (_add_subframe_($encoder,$292,$295,$298,$300)|0);
     $302 = ($301|0)==(0);
     $290 = (($channel$430) + 1)|0;
     if ($302) {
      $$0 = 0;
      break;
     }
     $287 = HEAP32[$encoder>>2]|0;
     $288 = ((($287)) + 24|0);
     $289 = HEAP32[$288>>2]|0;
     $291 = ($290>>>0)<($289>>>0);
     if ($291) {
      $channel$430 = $290;
     } else {
      break L21;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $303 = HEAP32[$encoder>>2]|0;
 $304 = ((($303)) + 20|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = ($305|0)==(0);
 if (!($306)) {
  $307 = HEAP32[$30>>2]|0;
  $308 = ((($307)) + 6864|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + 1)|0;
  HEAP32[$308>>2] = $310;
  $311 = HEAP32[$30>>2]|0;
  $312 = ((($311)) + 6864|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = ((($311)) + 6860|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = ($313>>>0)<($315>>>0);
  if (!($316)) {
   HEAP32[$312>>2] = 0;
  }
 }
 $317 = HEAP32[$24>>2]|0;
 $318 = HEAP32[$30>>2]|0;
 $319 = ((($318)) + 6868|0);
 HEAP32[$319>>2] = $317;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _get_wasted_bits_($signal,$samples) {
 $signal = $signal|0;
 $samples = $samples|0;
 var $$lcssa = 0, $$lcssa20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$08 = 0, $i$14 = 0, $or$cond = 0, $or$cond17 = 0, $shift$05 = 0, $shift$12 = 0, $x$09 = 0, $x$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($samples|0)==(0);
 if ($0) {
  $shift$12 = 0;
  return ($shift$12|0);
 } else {
  $i$08 = 0;$x$09 = 0;
 }
 while(1) {
  $1 = (($signal) + ($i$08<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 | $x$09;
  $4 = (($i$08) + 1)|0;
  $5 = ($4>>>0)<($samples>>>0);
  $6 = $3 & 1;
  $7 = ($6|0)==(0);
  $or$cond = $5 & $7;
  if ($or$cond) {
   $i$08 = $4;$x$09 = $3;
  } else {
   $$lcssa20 = $3;
   break;
  }
 }
 $8 = ($$lcssa20|0)!=(0);
 $9 = $$lcssa20 & 1;
 $10 = ($9|0)==(0);
 $or$cond17 = $8 & $10;
 if ($or$cond17) {
  $shift$05 = 0;$x$16 = $$lcssa20;
 } else {
  $shift$12 = 0;
  return ($shift$12|0);
 }
 while(1) {
  $11 = $x$16 >> 1;
  $12 = (($shift$05) + 1)|0;
  $13 = $11 & 1;
  $14 = ($13|0)==(0);
  if ($14) {
   $shift$05 = $12;$x$16 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 $15 = ($$lcssa|0)==(0);
 if ($15) {
  $shift$12 = 0;
  return ($shift$12|0);
 }
 $16 = ($samples|0)==(0);
 if ($16) {
  $shift$12 = $$lcssa;
  return ($shift$12|0);
 } else {
  $i$14 = 0;
 }
 while(1) {
  $17 = (($signal) + ($i$14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >> $$lcssa;
  HEAP32[$17>>2] = $19;
  $20 = (($i$14) + 1)|0;
  $exitcond = ($20|0)==($samples|0);
  if ($exitcond) {
   $shift$12 = $$lcssa;
   break;
  } else {
   $i$14 = $20;
  }
 }
 return ($shift$12|0);
}
function _process_subframe_($encoder,$min_partition_order,$max_partition_order,$frame_header,$subframe_bps,$integer_signal,$subframe,$partitioned_rice_contents,$residual,$best_subframe,$best_bits) {
 $encoder = $encoder|0;
 $min_partition_order = $min_partition_order|0;
 $max_partition_order = $max_partition_order|0;
 $frame_header = $frame_header|0;
 $subframe_bps = $subframe_bps|0;
 $integer_signal = $integer_signal|0;
 $subframe = $subframe|0;
 $partitioned_rice_contents = $partitioned_rice_contents|0;
 $residual = $residual|0;
 $best_subframe = $best_subframe|0;
 $best_bits = $best_bits|0;
 var $$ = 0, $$3 = 0, $$5 = 0, $$6 = 0, $$_best_bits$0 = 0, $$_best_bits$1 = 0, $$_best_subframe$0 = 0, $$lcssa = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0;
 var $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_best_bits$0 = 0, $_best_bits$10 = 0, $_best_bits$11 = 0, $_best_bits$133 = 0, $_best_bits$2 = 0, $_best_bits$3 = 0, $_best_bits$425 = 0, $_best_bits$517 = 0, $_best_bits$614 = 0, $_best_bits$7 = 0, $_best_bits$8 = 0, $_best_bits$9 = 0, $_best_subframe$034 = 0, $_best_subframe$1 = 0;
 var $_best_subframe$2 = 0, $_best_subframe$326 = 0, $_best_subframe$418 = 0, $_best_subframe$515 = 0, $_best_subframe$6 = 0, $_best_subframe$7 = 0, $_best_subframe$8 = 0, $_best_subframe$9 = 0, $a$027 = 0, $autoc = 0, $fixed_order$031 = 0, $fixed_residual_bits_per_sample = 0, $guess_fixed_order$0 = 0, $guess_fixed_order$0$ = 0, $guess_fixed_order$0$2 = 0, $i$038 = 0, $lpc_error = 0, $lpc_order$019 = 0, $max_fixed_order$1 = 0, $max_lpc_order = 0;
 var $max_qlp_coeff_precision$0$ph = 0, $min_lpc_order$0 = 0, $min_qlp_coeff_precision$0$ph = 0, $or$cond = 0, $or$cond4 = 0, $qlp_coeff_precision$013 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $fixed_residual_bits_per_sample = sp + 392|0;
 $autoc = sp + 260|0;
 $lpc_error = sp;
 $max_lpc_order = sp + 256|0;
 $0 = (_FLAC__stream_encoder_get_bits_per_sample($encoder)|0);
 $1 = ($0>>>0)>(16);
 $2 = HEAP32[1092>>2]|0;
 $3 = HEAP32[1088>>2]|0;
 $4 = $1 ? $2 : $3;
 $5 = ((($encoder)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 7280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  label = 3;
 } else {
  $10 = HEAP32[$frame_header>>2]|0;
  $11 = ($10>>>0)>(3);
  if ($11) {
   $_best_bits$0 = -1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $12 = HEAP32[$frame_header>>2]|0;
  $13 = HEAP32[$subframe>>2]|0;
  $14 = (_evaluate_verbatim_subframe_($integer_signal,$12,$subframe_bps,$13)|0);
  $_best_bits$0 = $14;
 }
 $15 = HEAP32[$frame_header>>2]|0;
 $16 = ($15>>>0)>(3);
 L6: do {
  if ($16) {
   $17 = (($subframe_bps) + 4)|0;
   $18 = (($15) + -4)|0;
   $19 = $18 | 1;
   $20 = (_FLAC__bitmath_ilog2244($19)|0);
   $21 = (($17) + ($20))|0;
   $22 = ($21>>>0)<(33);
   $23 = HEAP32[$5>>2]|0;
   if ($22) {
    $24 = ((($23)) + 7248|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($integer_signal)) + 16|0);
    $27 = (FUNCTION_TABLE_iiii[$25 & 31]($26,$18,$fixed_residual_bits_per_sample)|0);
    $guess_fixed_order$0 = $27;
   } else {
    $28 = ((($23)) + 7252|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($integer_signal)) + 16|0);
    $31 = (FUNCTION_TABLE_iiii[$29 & 31]($30,$18,$fixed_residual_bits_per_sample)|0);
    $guess_fixed_order$0 = $31;
   }
   $32 = HEAP32[$5>>2]|0;
   $33 = ((($32)) + 7272|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0);
   L12: do {
    if ($35) {
     $36 = ((($fixed_residual_bits_per_sample)) + 4|0);
     $37 = +HEAPF32[$36>>2];
     $38 = $37 == 0.0;
     if ($38) {
      $39 = HEAP32[$frame_header>>2]|0;
      $40 = ($39>>>0)>(1);
      $41 = HEAP32[$integer_signal>>2]|0;
      if ($40) {
       $48 = $41;$i$038 = 1;
       while(1) {
        $46 = (($integer_signal) + ($i$038<<2)|0);
        $47 = HEAP32[$46>>2]|0;
        $49 = ($48|0)==($47|0);
        $43 = (($i$038) + 1)|0;
        if (!($49)) {
         break L12;
        }
        $42 = HEAP32[$frame_header>>2]|0;
        $44 = ($43>>>0)<($42>>>0);
        $45 = HEAP32[$integer_signal>>2]|0;
        if ($44) {
         $48 = $45;$i$038 = $43;
        } else {
         $$lcssa = $45;
         break;
        }
       }
      } else {
       $$lcssa = $41;
      }
      $50 = ((($subframe)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (_evaluate_constant_subframe_($$lcssa,$subframe_bps,$51)|0);
      $53 = ($52>>>0)<($_best_bits$0>>>0);
      $$_best_bits$0 = $53 ? $52 : $_best_bits$0;
      $$5 = $53&1;
      $_best_bits$10 = $$_best_bits$0;$_best_subframe$9 = $$5;
      break L6;
     }
    }
   } while(0);
   $54 = HEAP32[$5>>2]|0;
   $55 = ((($54)) + 7276|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0);
   if ($57) {
    label = 16;
   } else {
    $58 = HEAP32[$encoder>>2]|0;
    $59 = ((($58)) + 556|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0);
    $62 = ($_best_bits$0|0)==(-1);
    $or$cond = $62 & $61;
    if ($or$cond) {
     label = 16;
    } else {
     $_best_bits$3 = $_best_bits$0;$_best_subframe$2 = 0;
    }
   }
   if ((label|0) == 16) {
    $63 = HEAP32[$encoder>>2]|0;
    $64 = ((($63)) + 568|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0);
    $guess_fixed_order$0$ = $66 ? $guess_fixed_order$0 : 0;
    $guess_fixed_order$0$2 = $66 ? $guess_fixed_order$0 : 4;
    $67 = HEAP32[$frame_header>>2]|0;
    $68 = ($guess_fixed_order$0$2>>>0)<($67>>>0);
    $69 = (($67) + -1)|0;
    $max_fixed_order$1 = $68 ? $guess_fixed_order$0$2 : $69;
    $70 = ($guess_fixed_order$0$>>>0)>($max_fixed_order$1>>>0);
    if ($70) {
     $_best_bits$3 = $_best_bits$0;$_best_subframe$2 = 0;
    } else {
     $71 = (+($subframe_bps>>>0));
     $72 = (($4) + -1)|0;
     $_best_bits$133 = $_best_bits$0;$_best_subframe$034 = 0;$fixed_order$031 = $guess_fixed_order$0$;
     while(1) {
      $73 = (($fixed_residual_bits_per_sample) + ($fixed_order$031<<2)|0);
      $74 = +HEAPF32[$73>>2];
      $75 = !($74 >= $71);
      if ($75) {
       $76 = $74 > 0.0;
       if ($76) {
        $77 = $74;
        $78 = $77 + 0.5;
        $79 = (~~(($78))>>>0);
        $81 = $79;
       } else {
        $81 = 0;
       }
       $80 = (($81) + 1)|0;
       $82 = ($80>>>0)<($4>>>0);
       $$ = $82 ? $80 : $72;
       $83 = ($_best_subframe$034|0)==(0);
       $84 = $83&1;
       $85 = (($residual) + ($84<<2)|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ((($87)) + 6848|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ((($87)) + 6852|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = HEAP32[$frame_header>>2]|0;
       $93 = HEAP32[$encoder>>2]|0;
       $94 = ((($93)) + 572|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($subframe) + ($84<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (($partitioned_rice_contents) + ($84<<2)|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (_evaluate_fixed_subframe_($encoder,$integer_signal,$86,$89,$91,$92,$subframe_bps,$fixed_order$031,$$,$4,$min_partition_order,$max_partition_order,$95,$97,$99)|0);
       $101 = ($100>>>0)<($_best_bits$133>>>0);
       $$_best_bits$1 = $101 ? $100 : $_best_bits$133;
       $$_best_subframe$0 = $101 ? $84 : $_best_subframe$034;
       $_best_bits$2 = $$_best_bits$1;$_best_subframe$1 = $$_best_subframe$0;
      } else {
       $_best_bits$2 = $_best_bits$133;$_best_subframe$1 = $_best_subframe$034;
      }
      $102 = (($fixed_order$031) + 1)|0;
      $103 = ($102>>>0)>($max_fixed_order$1>>>0);
      if ($103) {
       $_best_bits$3 = $_best_bits$2;$_best_subframe$2 = $_best_subframe$1;
       break;
      } else {
       $_best_bits$133 = $_best_bits$2;$_best_subframe$034 = $_best_subframe$1;$fixed_order$031 = $102;
      }
     }
    }
   }
   $104 = HEAP32[$encoder>>2]|0;
   $105 = ((($104)) + 556|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0);
   if ($107) {
    $_best_bits$10 = $_best_bits$3;$_best_subframe$9 = $_best_subframe$2;
   } else {
    $108 = HEAP32[$frame_header>>2]|0;
    $109 = ($106>>>0)<($108>>>0);
    $110 = (($108) + -1)|0;
    $storemerge = $109 ? $106 : $110;
    HEAP32[$max_lpc_order>>2] = $storemerge;
    $111 = ($storemerge|0)==(0);
    if ($111) {
     $_best_bits$10 = $_best_bits$3;$_best_subframe$9 = $_best_subframe$2;
    } else {
     $112 = HEAP32[$encoder>>2]|0;
     $113 = ((($112)) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0);
     if ($115) {
      $_best_bits$10 = $_best_bits$3;$_best_subframe$9 = $_best_subframe$2;
     } else {
      $116 = (+($subframe_bps>>>0));
      $117 = (($4) + -1)|0;
      $118 = ($subframe_bps>>>0)<(18);
      $119 = (32 - ($subframe_bps))|0;
      $_best_bits$425 = $_best_bits$3;$_best_subframe$326 = $_best_subframe$2;$a$027 = 0;
      while(1) {
       $120 = HEAP32[$5>>2]|0;
       $121 = (((($120)) + 84|0) + ($a$027<<2)|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = ((($120)) + 212|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = HEAP32[$frame_header>>2]|0;
       _FLAC__lpc_window_data($integer_signal,$122,$124,$125);
       $126 = HEAP32[$5>>2]|0;
       $127 = ((($126)) + 7256|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ((($126)) + 212|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = HEAP32[$frame_header>>2]|0;
       $132 = HEAP32[$max_lpc_order>>2]|0;
       $133 = (($132) + 1)|0;
       FUNCTION_TABLE_viiii[$128 & 15]($130,$131,$133,$autoc);
       $134 = +HEAPF32[$autoc>>2];
       $135 = $134 != 0.0;
       if ($135) {
        $136 = HEAP32[$5>>2]|0;
        $137 = ((($136)) + 7652|0);
        _FLAC__lpc_compute_lp_coefficients($autoc,$max_lpc_order,$137,$lpc_error);
        $138 = HEAP32[$encoder>>2]|0;
        $139 = ((($138)) + 568|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ($140|0)==(0);
        if ($141) {
         $142 = HEAP32[$max_lpc_order>>2]|0;
         $143 = HEAP32[$frame_header>>2]|0;
         $144 = ((($138)) + 564|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ($145|0)==(0);
         if ($146) {
          $147 = ((($138)) + 560|0);
          $148 = HEAP32[$147>>2]|0;
          $150 = $148;
         } else {
          $150 = 5;
         }
         $149 = (($150) + ($subframe_bps))|0;
         $151 = (_FLAC__lpc_compute_best_order($lpc_error,$142,$143,$149)|0);
         HEAP32[$max_lpc_order>>2] = $151;
         $min_lpc_order$0 = $151;
        } else {
         $min_lpc_order$0 = 1;
        }
        $152 = HEAP32[$max_lpc_order>>2]|0;
        $153 = HEAP32[$frame_header>>2]|0;
        $154 = ($152>>>0)<($153>>>0);
        if (!($154)) {
         $155 = (($153) + -1)|0;
         HEAP32[$max_lpc_order>>2] = $155;
        }
        $156 = HEAP32[$max_lpc_order>>2]|0;
        $157 = ($min_lpc_order$0>>>0)>($156>>>0);
        if ($157) {
         $_best_bits$9 = $_best_bits$425;$_best_subframe$8 = $_best_subframe$326;
        } else {
         $_best_bits$517 = $_best_bits$425;$_best_subframe$418 = $_best_subframe$326;$lpc_order$019 = $min_lpc_order$0;
         while(1) {
          $158 = (($lpc_order$019) + -1)|0;
          $159 = (($lpc_error) + ($158<<3)|0);
          $160 = +HEAPF64[$159>>3];
          $161 = HEAP32[$frame_header>>2]|0;
          $162 = (($161) - ($lpc_order$019))|0;
          $163 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample($160,$162));
          $164 = !($163 >= $116);
          if ($164) {
           $165 = $163 > 0.0;
           $166 = $163 + 0.5;
           $167 = (~~(($166))>>>0);
           $$op = (($167) + 1)|0;
           $168 = $165 ? $$op : 1;
           $169 = ($168>>>0)<($4>>>0);
           $$3 = $169 ? $168 : $117;
           $170 = HEAP32[$encoder>>2]|0;
           $171 = ((($170)) + 564|0);
           $172 = HEAP32[$171>>2]|0;
           $173 = ($172|0)==(0);
           do {
            if ($173) {
             $179 = ((($170)) + 560|0);
             $180 = HEAP32[$179>>2]|0;
             $max_qlp_coeff_precision$0$ph = $180;$min_qlp_coeff_precision$0$ph = $180;
            } else {
             if (!($118)) {
              $max_qlp_coeff_precision$0$ph = 15;$min_qlp_coeff_precision$0$ph = 5;
              break;
             }
             $174 = (_FLAC__bitmath_ilog2244($lpc_order$019)|0);
             $175 = (($119) - ($174))|0;
             $176 = ($175>>>0)<(15);
             $$6 = $176 ? $175 : 15;
             $177 = ($$6>>>0)>(5);
             $178 = $177 ? $$6 : 5;
             $max_qlp_coeff_precision$0$ph = $178;$min_qlp_coeff_precision$0$ph = 5;
            }
           } while(0);
           $_best_bits$614 = $_best_bits$517;$_best_subframe$515 = $_best_subframe$418;$qlp_coeff_precision$013 = $min_qlp_coeff_precision$0$ph;
           while(1) {
            $181 = ($_best_subframe$515|0)==(0);
            $182 = $181&1;
            $183 = (($residual) + ($182<<2)|0);
            $184 = HEAP32[$183>>2]|0;
            $185 = HEAP32[$5>>2]|0;
            $186 = ((($185)) + 6848|0);
            $187 = HEAP32[$186>>2]|0;
            $188 = ((($185)) + 6852|0);
            $189 = HEAP32[$188>>2]|0;
            $190 = (((($185)) + 7652|0) + ($158<<7)|0);
            $191 = HEAP32[$frame_header>>2]|0;
            $192 = HEAP32[$encoder>>2]|0;
            $193 = ((($192)) + 572|0);
            $194 = HEAP32[$193>>2]|0;
            $195 = (($subframe) + ($182<<2)|0);
            $196 = HEAP32[$195>>2]|0;
            $197 = (($partitioned_rice_contents) + ($182<<2)|0);
            $198 = HEAP32[$197>>2]|0;
            $199 = (_evaluate_lpc_subframe_($encoder,$integer_signal,$184,$187,$189,$190,$191,$subframe_bps,$lpc_order$019,$qlp_coeff_precision$013,$$3,$4,$min_partition_order,$max_partition_order,$194,$196,$198)|0);
            $200 = ($199|0)!=(0);
            $201 = ($199>>>0)<($_best_bits$614>>>0);
            $or$cond4 = $200 & $201;
            $_best_bits$7 = $or$cond4 ? $199 : $_best_bits$614;
            $_best_subframe$6 = $or$cond4 ? $182 : $_best_subframe$515;
            $202 = (($qlp_coeff_precision$013) + 1)|0;
            $203 = ($202>>>0)>($max_qlp_coeff_precision$0$ph>>>0);
            if ($203) {
             $_best_bits$8 = $_best_bits$7;$_best_subframe$7 = $_best_subframe$6;
             break;
            } else {
             $_best_bits$614 = $_best_bits$7;$_best_subframe$515 = $_best_subframe$6;$qlp_coeff_precision$013 = $202;
            }
           }
          } else {
           $_best_bits$8 = $_best_bits$517;$_best_subframe$7 = $_best_subframe$418;
          }
          $204 = (($lpc_order$019) + 1)|0;
          $205 = HEAP32[$max_lpc_order>>2]|0;
          $206 = ($204>>>0)>($205>>>0);
          if ($206) {
           $_best_bits$9 = $_best_bits$8;$_best_subframe$8 = $_best_subframe$7;
           break;
          } else {
           $_best_bits$517 = $_best_bits$8;$_best_subframe$418 = $_best_subframe$7;$lpc_order$019 = $204;
          }
         }
        }
       } else {
        $_best_bits$9 = $_best_bits$425;$_best_subframe$8 = $_best_subframe$326;
       }
       $207 = (($a$027) + 1)|0;
       $208 = HEAP32[$encoder>>2]|0;
       $209 = ((($208)) + 40|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ($207>>>0)<($210>>>0);
       if ($211) {
        $_best_bits$425 = $_best_bits$9;$_best_subframe$326 = $_best_subframe$8;$a$027 = $207;
       } else {
        $_best_bits$10 = $_best_bits$9;$_best_subframe$9 = $_best_subframe$8;
        break;
       }
      }
     }
    }
   }
  } else {
   $_best_bits$10 = $_best_bits$0;$_best_subframe$9 = 0;
  }
 } while(0);
 $212 = ($_best_bits$10|0)==(-1);
 if (!($212)) {
  $_best_bits$11 = $_best_bits$10;
  HEAP32[$best_subframe>>2] = $_best_subframe$9;
  HEAP32[$best_bits>>2] = $_best_bits$11;
  STACKTOP = sp;return;
 }
 $213 = HEAP32[$frame_header>>2]|0;
 $214 = (($subframe) + ($_best_subframe$9<<2)|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = (_evaluate_verbatim_subframe_($integer_signal,$213,$subframe_bps,$215)|0);
 $_best_bits$11 = $216;
 HEAP32[$best_subframe>>2] = $_best_subframe$9;
 HEAP32[$best_bits>>2] = $_best_bits$11;
 STACKTOP = sp;return;
}
function _add_subframe_($encoder,$blocksize,$subframe_bps,$subframe,$frame) {
 $encoder = $encoder|0;
 $blocksize = $blocksize|0;
 $subframe_bps = $subframe_bps|0;
 $subframe = $subframe|0;
 $frame = $frame|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$subframe>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = ((($subframe)) + 4|0);
  $2 = ((($subframe)) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_FLAC__subframe_add_constant($1,$subframe_bps,$3,$frame)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = 1;
   return ($$0|0);
  }
  $6 = HEAP32[$encoder>>2]|0;
  HEAP32[$6>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 2:  {
  $7 = ((($subframe)) + 4|0);
  $8 = ((($subframe)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($blocksize) - ($9))|0;
  $11 = ((($subframe)) + 288|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_FLAC__subframe_add_fixed($7,$10,$subframe_bps,$12,$frame)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$0 = 1;
   return ($$0|0);
  }
  $15 = HEAP32[$encoder>>2]|0;
  HEAP32[$15>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 3:  {
  $16 = ((($subframe)) + 4|0);
  $17 = ((($subframe)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($blocksize) - ($18))|0;
  $20 = ((($subframe)) + 288|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_FLAC__subframe_add_lpc($16,$19,$subframe_bps,$21,$frame)|0);
  $23 = ($22|0)==(0);
  if (!($23)) {
   $$0 = 1;
   return ($$0|0);
  }
  $24 = HEAP32[$encoder>>2]|0;
  HEAP32[$24>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 1:  {
  $25 = ((($subframe)) + 4|0);
  $26 = ((($subframe)) + 288|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_FLAC__subframe_add_verbatim($25,$blocksize,$subframe_bps,$27,$frame)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   $$0 = 1;
   return ($$0|0);
  }
  $30 = HEAP32[$encoder>>2]|0;
  HEAP32[$30>>2] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _evaluate_verbatim_subframe_($signal,$blocksize,$subframe_bps,$subframe) {
 $signal = $signal|0;
 $blocksize = $blocksize|0;
 $subframe_bps = $subframe_bps|0;
 $subframe = $subframe|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$subframe>>2] = 1;
 $0 = ((($subframe)) + 4|0);
 HEAP32[$0>>2] = $signal;
 $1 = HEAP32[1108>>2]|0;
 $2 = HEAP32[1104>>2]|0;
 $3 = HEAP32[1108>>2]|0;
 $4 = ((($subframe)) + 288|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($subframe_bps, $blocksize)|0;
 $7 = (($1) + ($6))|0;
 $8 = (($7) + ($2))|0;
 $9 = (($8) + ($3))|0;
 $10 = (($9) + ($5))|0;
 return ($10|0);
}
function _evaluate_constant_subframe_($signal,$subframe_bps,$subframe) {
 $signal = $signal|0;
 $subframe_bps = $subframe_bps|0;
 $subframe = $subframe|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$subframe>>2] = 0;
 $0 = ((($subframe)) + 4|0);
 HEAP32[$0>>2] = $signal;
 $1 = HEAP32[1108>>2]|0;
 $2 = HEAP32[1104>>2]|0;
 $3 = HEAP32[1108>>2]|0;
 $4 = ((($subframe)) + 288|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($subframe_bps))|0;
 $7 = (($6) + ($2))|0;
 $8 = (($7) + ($3))|0;
 $9 = (($8) + ($5))|0;
 return ($9|0);
}
function _evaluate_fixed_subframe_($encoder,$signal,$residual,$abs_residual_partition_sums,$raw_bits_per_partition,$blocksize,$subframe_bps,$order,$rice_parameter,$rice_parameter_limit,$min_partition_order,$max_partition_order,$do_escape_coding,$subframe,$partitioned_rice_contents) {
 $encoder = $encoder|0;
 $signal = $signal|0;
 $residual = $residual|0;
 $abs_residual_partition_sums = $abs_residual_partition_sums|0;
 $raw_bits_per_partition = $raw_bits_per_partition|0;
 $blocksize = $blocksize|0;
 $subframe_bps = $subframe_bps|0;
 $order = $order|0;
 $rice_parameter = $rice_parameter|0;
 $rice_parameter_limit = $rice_parameter_limit|0;
 $min_partition_order = $min_partition_order|0;
 $max_partition_order = $max_partition_order|0;
 $do_escape_coding = $do_escape_coding|0;
 $subframe = $subframe|0;
 $partitioned_rice_contents = $partitioned_rice_contents|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($blocksize) - ($order))|0;
 $1 = (($signal) + ($order<<2)|0);
 _FLAC__fixed_compute_residual($1,$0,$order,$residual);
 HEAP32[$subframe>>2] = 2;
 $2 = ((($subframe)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($subframe)) + 12|0);
 HEAP32[$3>>2] = $partitioned_rice_contents;
 $4 = ((($subframe)) + 36|0);
 HEAP32[$4>>2] = $residual;
 $5 = ((($encoder)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_find_best_partition_order_($6,$residual,$abs_residual_partition_sums,$raw_bits_per_partition,$0,$order,$rice_parameter,$rice_parameter_limit,$min_partition_order,$max_partition_order,$subframe_bps,$do_escape_coding,$2)|0);
 $8 = ((($subframe)) + 16|0);
 HEAP32[$8>>2] = $order;
 $9 = ($order|0)==(0);
 if (!($9)) {
  $10 = ((($subframe)) + 20|0);
  $i$01 = 0;
  while(1) {
   $11 = (($signal) + ($i$01<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($10) + ($i$01<<2)|0);
   HEAP32[$13>>2] = $12;
   $14 = (($i$01) + 1)|0;
   $exitcond = ($14|0)==($order|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $14;
   }
  }
 }
 $15 = HEAP32[1108>>2]|0;
 $16 = HEAP32[1104>>2]|0;
 $17 = HEAP32[1108>>2]|0;
 $18 = ((($subframe)) + 288|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($order, $subframe_bps)|0;
 $21 = (($7) + ($20))|0;
 $22 = (($21) + ($15))|0;
 $23 = (($22) + ($16))|0;
 $24 = (($23) + ($17))|0;
 $25 = (($24) + ($19))|0;
 return ($25|0);
}
function _evaluate_lpc_subframe_($encoder,$signal,$residual,$abs_residual_partition_sums,$raw_bits_per_partition,$lp_coeff,$blocksize,$subframe_bps,$order,$qlp_coeff_precision,$rice_parameter,$rice_parameter_limit,$min_partition_order,$max_partition_order,$do_escape_coding,$subframe,$partitioned_rice_contents) {
 $encoder = $encoder|0;
 $signal = $signal|0;
 $residual = $residual|0;
 $abs_residual_partition_sums = $abs_residual_partition_sums|0;
 $raw_bits_per_partition = $raw_bits_per_partition|0;
 $lp_coeff = $lp_coeff|0;
 $blocksize = $blocksize|0;
 $subframe_bps = $subframe_bps|0;
 $order = $order|0;
 $qlp_coeff_precision = $qlp_coeff_precision|0;
 $rice_parameter = $rice_parameter|0;
 $rice_parameter_limit = $rice_parameter_limit|0;
 $min_partition_order = $min_partition_order|0;
 $max_partition_order = $max_partition_order|0;
 $do_escape_coding = $do_escape_coding|0;
 $subframe = $subframe|0;
 $partitioned_rice_contents = $partitioned_rice_contents|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $or$cond = 0, $qlp_coeff = 0, $qlp_coeff_precision$ = 0, $quantization = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $qlp_coeff = sp + 8|0;
 $quantization = sp;
 $0 = (($blocksize) - ($order))|0;
 $1 = ($subframe_bps>>>0)<(18);
 if ($1) {
  $2 = (32 - ($subframe_bps))|0;
  $3 = (_FLAC__bitmath_ilog2244($order)|0);
  $4 = (($2) - ($3))|0;
  $5 = ($4>>>0)>($qlp_coeff_precision>>>0);
  $qlp_coeff_precision$ = $5 ? $qlp_coeff_precision : $4;
  $$02 = $qlp_coeff_precision$;
 } else {
  $$02 = $qlp_coeff_precision;
 }
 $6 = (_FLAC__lpc_quantize_coefficients($lp_coeff,$order,$$02,$qlp_coeff,$quantization)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($$02) + ($subframe_bps))|0;
 $9 = (_FLAC__bitmath_ilog2244($order)|0);
 $10 = (($9) + ($8))|0;
 $11 = ($10>>>0)<(33);
 do {
  if ($11) {
   $12 = ($subframe_bps>>>0)<(17);
   $13 = ($$02>>>0)<(17);
   $or$cond = $12 & $13;
   $14 = ((($encoder)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   if ($or$cond) {
    $16 = ((($15)) + 7268|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($signal) + ($order<<2)|0);
    $19 = HEAP32[$quantization>>2]|0;
    FUNCTION_TABLE_viiiiii[$17 & 15]($18,$0,$qlp_coeff,$order,$19,$residual);
    break;
   } else {
    $20 = ((($15)) + 7260|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($signal) + ($order<<2)|0);
    $23 = HEAP32[$quantization>>2]|0;
    FUNCTION_TABLE_viiiiii[$21 & 15]($22,$0,$qlp_coeff,$order,$23,$residual);
    break;
   }
  } else {
   $24 = ((($encoder)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 7264|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($signal) + ($order<<2)|0);
   $29 = HEAP32[$quantization>>2]|0;
   FUNCTION_TABLE_viiiiii[$27 & 15]($28,$0,$qlp_coeff,$order,$29,$residual);
  }
 } while(0);
 HEAP32[$subframe>>2] = 3;
 $30 = ((($subframe)) + 4|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($subframe)) + 12|0);
 HEAP32[$31>>2] = $partitioned_rice_contents;
 $32 = ((($subframe)) + 284|0);
 HEAP32[$32>>2] = $residual;
 $33 = ((($encoder)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_find_best_partition_order_($34,$residual,$abs_residual_partition_sums,$raw_bits_per_partition,$0,$order,$rice_parameter,$rice_parameter_limit,$min_partition_order,$max_partition_order,$subframe_bps,$do_escape_coding,$30)|0);
 $36 = ((($subframe)) + 16|0);
 HEAP32[$36>>2] = $order;
 $37 = ((($subframe)) + 20|0);
 HEAP32[$37>>2] = $$02;
 $38 = HEAP32[$quantization>>2]|0;
 $39 = ((($subframe)) + 24|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($subframe)) + 28|0);
 dest=$40; src=$qlp_coeff; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $41 = ($order|0)==(0);
 if (!($41)) {
  $i$01 = 0;
  while(1) {
   $42 = (($signal) + ($i$01<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (((($subframe)) + 156|0) + ($i$01<<2)|0);
   HEAP32[$44>>2] = $43;
   $45 = (($i$01) + 1)|0;
   $exitcond = ($45|0)==($order|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $45;
   }
  }
 }
 $46 = HEAP32[1108>>2]|0;
 $47 = HEAP32[1104>>2]|0;
 $48 = HEAP32[1108>>2]|0;
 $49 = ((($subframe)) + 288|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[1096>>2]|0;
 $52 = HEAP32[1100>>2]|0;
 $53 = Math_imul($8, $order)|0;
 $54 = (($35) + ($53))|0;
 $55 = (($54) + ($46))|0;
 $56 = (($55) + ($47))|0;
 $57 = (($56) + ($48))|0;
 $58 = (($57) + ($50))|0;
 $59 = (($58) + ($51))|0;
 $60 = (($59) + ($52))|0;
 $$0 = $60;
 STACKTOP = sp;return ($$0|0);
}
function _find_best_partition_order_($private_,$residual,$abs_residual_partition_sums,$raw_bits_per_partition,$residual_samples,$predictor_order,$rice_parameter,$rice_parameter_limit,$min_partition_order,$max_partition_order,$bps,$do_escape_coding,$best_ecm) {
 $private_ = $private_|0;
 $residual = $residual|0;
 $abs_residual_partition_sums = $abs_residual_partition_sums|0;
 $raw_bits_per_partition = $raw_bits_per_partition|0;
 $residual_samples = $residual_samples|0;
 $predictor_order = $predictor_order|0;
 $rice_parameter = $rice_parameter|0;
 $rice_parameter_limit = $rice_parameter_limit|0;
 $min_partition_order = $min_partition_order|0;
 $max_partition_order = $max_partition_order|0;
 $bps = $bps|0;
 $do_escape_coding = $do_escape_coding|0;
 $best_ecm = $best_ecm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $best_parameters_index$0$lcssa = 0, $best_parameters_index$05 = 0, $best_parameters_index$1 = 0, $best_partition_order$0$lcssa = 0, $best_partition_order$06 = 0, $best_partition_order$1 = 0, $best_residual_bits$0$lcssa = 0, $best_residual_bits$04 = 0, $best_residual_bits$1 = 0, $partition$03 = 0, $partition_order$07 = 0, $residual_bits = 0, $sum$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $residual_bits = sp;
 $0 = (($predictor_order) + ($residual_samples))|0;
 $1 = (_FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($max_partition_order,$0,$predictor_order)|0);
 $2 = ($1>>>0)>($min_partition_order>>>0);
 $3 = $2 ? $min_partition_order : $1;
 $4 = ((($private_)) + 7244|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiiiiii[$5 & 15]($residual,$abs_residual_partition_sums,$residual_samples,$predictor_order,$3,$1,$bps);
 $6 = ($do_escape_coding|0)!=(0);
 if ($6) {
  _precompute_partition_info_escapes_($residual,$raw_bits_per_partition,$residual_samples,$predictor_order,$3,$1);
 }
 $7 = ($1|0)<($3|0);
 L4: do {
  if ($7) {
   $best_parameters_index$0$lcssa = 0;$best_partition_order$0$lcssa = 0;$best_residual_bits$0$lcssa = 0;
  } else {
   $best_parameters_index$05 = 0;$best_partition_order$06 = 0;$best_residual_bits$04 = 0;$partition_order$07 = $1;$sum$08 = 0;
   while(1) {
    $8 = (($abs_residual_partition_sums) + ($sum$08<<3)|0);
    $9 = (($raw_bits_per_partition) + ($sum$08<<2)|0);
    $10 = ($best_parameters_index$05|0)==(0);
    $11 = $10&1;
    $12 = (((($private_)) + 11748|0) + (($11*12)|0)|0);
    $13 = (_set_partitioned_rice_($8,$9,$residual_samples,$predictor_order,$rice_parameter,$rice_parameter_limit,$partition_order$07,$do_escape_coding,$12,$residual_bits)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $best_parameters_index$0$lcssa = $best_parameters_index$05;$best_partition_order$0$lcssa = $best_partition_order$06;$best_residual_bits$0$lcssa = $best_residual_bits$04;
     break L4;
    }
    $15 = 1 << $partition_order$07;
    $16 = (($sum$08) + ($15))|0;
    $17 = HEAP32[$residual_bits>>2]|0;
    $18 = (($best_residual_bits$04) + -1)|0;
    $19 = ($18>>>0)>=($17>>>0);
    $best_residual_bits$1 = $19 ? $17 : $best_residual_bits$04;
    $best_parameters_index$1 = $19 ? $11 : $best_parameters_index$05;
    $best_partition_order$1 = $19 ? $partition_order$07 : $best_partition_order$06;
    $20 = (($partition_order$07) + -1)|0;
    $21 = ($partition_order$07|0)>($3|0);
    if ($21) {
     $best_parameters_index$05 = $best_parameters_index$1;$best_partition_order$06 = $best_partition_order$1;$best_residual_bits$04 = $best_residual_bits$1;$partition_order$07 = $20;$sum$08 = $16;
    } else {
     $best_parameters_index$0$lcssa = $best_parameters_index$1;$best_partition_order$0$lcssa = $best_partition_order$1;$best_residual_bits$0$lcssa = $best_residual_bits$1;
     break;
    }
   }
  }
 } while(0);
 $22 = ((($best_ecm)) + 4|0);
 HEAP32[$22>>2] = $best_partition_order$0$lcssa;
 $23 = ((($best_ecm)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($best_partition_order$0$lcssa>>>0)<(6);
 $26 = $25 ? 6 : $best_partition_order$0$lcssa;
 (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($24,$26)|0);
 $27 = HEAP32[$24>>2]|0;
 $28 = (((($private_)) + 11748|0) + (($best_parameters_index$0$lcssa*12)|0)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = 1 << $best_partition_order$0$lcssa;
 $31 = $30 << 2;
 _memcpy(($27|0),($29|0),($31|0))|0;
 if ($6) {
  $32 = ((($24)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (((((($private_)) + 11748|0) + (($best_parameters_index$0$lcssa*12)|0)|0)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  _memcpy(($33|0),($35|0),($31|0))|0;
 }
 $36 = HEAP32[$24>>2]|0;
 $37 = HEAP32[1088>>2]|0;
 $partition$03 = 0;
 while(1) {
  $40 = (($36) + ($partition$03<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41>>>0)<($37>>>0);
  $38 = (($partition$03) + 1)|0;
  if (!($42)) {
   break;
  }
  $39 = ($38>>>0)<($30>>>0);
  if ($39) {
   $partition$03 = $38;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($best_residual_bits$0$lcssa|0);
 }
 HEAP32[$best_ecm>>2] = 1;
 STACKTOP = sp;return ($best_residual_bits$0$lcssa|0);
}
function _precompute_partition_info_escapes_($residual,$raw_bits_per_partition,$residual_samples,$predictor_order,$min_partition_order,$max_partition_order) {
 $residual = $residual|0;
 $raw_bits_per_partition = $raw_bits_per_partition|0;
 $residual_samples = $residual_samples|0;
 $predictor_order = $predictor_order|0;
 $min_partition_order = $min_partition_order|0;
 $max_partition_order = $max_partition_order|0;
 var $$1 = 0, $$lobit = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $from_partition$07 = 0, $from_partition$13 = 0, $i$04 = 0, $partition$016 = 0, $partition_order$08 = 0, $partition_order$08$in = 0, $partition_sample$09 = 0, $residual_sample$017 = 0, $residual_sample$1$lcssa20 = 0, $residual_sample$110 = 0, $rmax$011 = 0, $rmax$1 = 0, $rmax$1$lcssa = 0, $to_partition$1$ph = 0, $to_partition$16 = 0, $to_partition$22 = 0, $umax = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($max_partition_order|0)>(-1);
 if ($0) {
  $2 = (($predictor_order) + ($residual_samples))|0;
  $3 = 1 << $max_partition_order;
  $4 = $2 >>> $max_partition_order;
  $partition$016 = 0;$residual_sample$017 = 0;
  while(1) {
   $5 = ($partition$016|0)==(0);
   $6 = $5 ? $predictor_order : 0;
   $7 = ($4|0)==($6|0);
   if ($7) {
    $19 = 1;$residual_sample$1$lcssa20 = $residual_sample$017;
   } else {
    $8 = (($4) + ($residual_sample$017))|0;
    $9 = (($4) - ($6))|0;
    $partition_sample$09 = 0;$residual_sample$110 = $residual_sample$017;$rmax$011 = 0;
    while(1) {
     $10 = (($residual_sample$110) + 1)|0;
     $11 = (($residual) + ($residual_sample$110<<2)|0);
     $12 = HEAP32[$11>>2]|0;
     $$lobit = $12 >> 31;
     $$pn = $$lobit ^ $12;
     $rmax$1 = $$pn | $rmax$011;
     $13 = (($partition_sample$09) + 1)|0;
     $exitcond = ($13|0)==($9|0);
     if ($exitcond) {
      $rmax$1$lcssa = $rmax$1;
      break;
     } else {
      $partition_sample$09 = $13;$residual_sample$110 = $10;$rmax$011 = $rmax$1;
     }
    }
    $14 = (($8) - ($6))|0;
    $15 = ($rmax$1$lcssa|0)==(0);
    if ($15) {
     $19 = 1;$residual_sample$1$lcssa20 = $14;
    } else {
     $16 = (_FLAC__bitmath_ilog2244($rmax$1$lcssa)|0);
     $17 = (($16) + 2)|0;
     $19 = $17;$residual_sample$1$lcssa20 = $14;
    }
   }
   $18 = (($raw_bits_per_partition) + ($partition$016<<2)|0);
   HEAP32[$18>>2] = $19;
   $20 = (($partition$016) + 1)|0;
   $21 = ($20>>>0)<($3>>>0);
   if ($21) {
    $partition$016 = $20;$residual_sample$017 = $residual_sample$1$lcssa20;
   } else {
    $to_partition$1$ph = $3;
    break;
   }
  }
 } else {
  $to_partition$1$ph = 0;
 }
 $1 = ($max_partition_order|0)>($min_partition_order|0);
 if ($1) {
  $from_partition$07 = 0;$partition_order$08$in = $max_partition_order;$to_partition$16 = $to_partition$1$ph;
 } else {
  return;
 }
 while(1) {
  $partition_order$08 = (($partition_order$08$in) + -1)|0;
  $26 = 1 << $partition_order$08;
  $27 = ($26>>>0)>(1);
  $umax = $27 ? $26 : 1;
  $24 = $umax << 1;
  $from_partition$13 = $from_partition$07;$i$04 = 0;$to_partition$22 = $to_partition$16;
  while(1) {
   $28 = (($raw_bits_per_partition) + ($from_partition$13<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $from_partition$13 | 1;
   $31 = (($raw_bits_per_partition) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29>>>0)>($32>>>0);
   $$1 = $33 ? $29 : $32;
   $34 = (($raw_bits_per_partition) + ($to_partition$22<<2)|0);
   HEAP32[$34>>2] = $$1;
   $35 = (($from_partition$13) + 2)|0;
   $36 = (($to_partition$22) + 1)|0;
   $37 = (($i$04) + 1)|0;
   $38 = ($37>>>0)<($26>>>0);
   if ($38) {
    $from_partition$13 = $35;$i$04 = $37;$to_partition$22 = $36;
   } else {
    break;
   }
  }
  $22 = (($to_partition$16) + ($umax))|0;
  $23 = (($from_partition$07) + ($24))|0;
  $25 = ($partition_order$08|0)>($min_partition_order|0);
  if ($25) {
   $from_partition$07 = $23;$partition_order$08$in = $partition_order$08;$to_partition$16 = $22;
  } else {
   break;
  }
 }
 return;
}
function _set_partitioned_rice_($abs_residual_partition_sums,$raw_bits_per_partition,$residual_samples,$predictor_order,$suggested_rice_parameter,$rice_parameter_limit,$partition_order,$search_for_escapes,$partitioned_rice_contents,$bits) {
 $abs_residual_partition_sums = $abs_residual_partition_sums|0;
 $raw_bits_per_partition = $raw_bits_per_partition|0;
 $residual_samples = $residual_samples|0;
 $predictor_order = $predictor_order|0;
 $suggested_rice_parameter = $suggested_rice_parameter|0;
 $rice_parameter_limit = $rice_parameter_limit|0;
 $partition_order = $partition_order|0;
 $search_for_escapes = $search_for_escapes|0;
 $partitioned_rice_contents = $partitioned_rice_contents|0;
 $bits = $bits|0;
 var $$0 = 0, $$mux = 0, $$not = 0, $$suggested_rice_parameter = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $best_partition_bits$1 = 0, $best_partition_bits$3 = 0, $best_rice_parameter$1 = 0, $best_rice_parameter$224 = 0, $best_rice_parameter$3 = 0, $best_rice_parameter$4 = 0, $bits_$023 = 0, $bits_$1 = 0, $brmerge = 0, $k2$0$lcssa = 0, $k2$015 = 0, $k2$120 = 0, $or$cond = 0, $partition$025 = 0, $rice_parameter$0$lcssa = 0, $rice_parameter$014 = 0, $rice_parameter$119 = 0, $rice_parameter$28 = 0;
 var $rice_parameter$3$ph = 0, $rice_parameter$311 = 0, $rice_parameter$4 = 0, $rice_parameter$4$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1116>>2]|0;
 $1 = HEAP32[1096>>2]|0;
 $2 = (($1) + ($0))|0;
 $3 = ($partition_order>>>0)<(6);
 $4 = $3 ? 6 : $partition_order;
 (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($partitioned_rice_contents,$4)|0);
 $5 = HEAP32[$partitioned_rice_contents>>2]|0;
 $6 = ((($partitioned_rice_contents)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($partition_order|0)==(0);
 L1: do {
  if ($8) {
   $9 = $abs_residual_partition_sums;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (_count_rice_bits_in_partition_($suggested_rice_parameter,$residual_samples,$11,$14)|0);
   $16 = ($15|0)==(-1);
   $$suggested_rice_parameter = $16 ? 0 : $suggested_rice_parameter;
   $17 = ($search_for_escapes|0)==(0);
   do {
    if ($17) {
     $best_partition_bits$1 = $15;$best_rice_parameter$1 = $$suggested_rice_parameter;
    } else {
     $18 = HEAP32[1100>>2]|0;
     $19 = HEAP32[1100>>2]|0;
     $20 = (($19) + ($18))|0;
     $21 = HEAP32[$raw_bits_per_partition>>2]|0;
     $22 = Math_imul($21, $residual_samples)|0;
     $23 = (($20) + ($22))|0;
     $24 = ($23>>>0)>($15>>>0);
     if ($24) {
      HEAP32[$7>>2] = 0;
      $best_partition_bits$1 = $15;$best_rice_parameter$1 = $$suggested_rice_parameter;
      break;
     } else {
      HEAP32[$7>>2] = $21;
      $best_partition_bits$1 = $23;$best_rice_parameter$1 = 0;
      break;
     }
    }
   } while(0);
   HEAP32[$5>>2] = $best_rice_parameter$1;
   $25 = (($best_partition_bits$1) + ($2))|0;
   $bits_$1 = $25;
  } else {
   $26 = 1 << $partition_order;
   $27 = (($predictor_order) + ($residual_samples))|0;
   $28 = $27 >>> $partition_order;
   $29 = ($28>>>0)>($predictor_order>>>0);
   $30 = (($rice_parameter_limit) + -1)|0;
   $31 = ($search_for_escapes|0)==(0);
   $32 = HEAP32[1100>>2]|0;
   $33 = HEAP32[1100>>2]|0;
   $34 = (($33) + ($32))|0;
   $best_rice_parameter$224 = 0;$bits_$023 = $2;$partition$025 = 0;
   while(1) {
    $$not = ($partition$025|0)!=(0);
    $brmerge = $$not | $29;
    $35 = $$not ? 0 : $predictor_order;
    $$mux = (($28) - ($35))|0;
    if (!($brmerge)) {
     $$0 = 0;
     break;
    }
    $36 = (($abs_residual_partition_sums) + ($partition$025<<3)|0);
    $37 = $36;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42>>>0)<(0);
    $44 = ($39>>>0)<(268435457);
    $45 = ($42|0)==(0);
    $46 = $45 & $44;
    $47 = $43 | $46;
    if ($47) {
     $48 = $$mux << 3;
     $49 = ($48>>>0)<($39>>>0);
     if ($49) {
      $k2$015 = $$mux;$rice_parameter$014 = 0;
      while(1) {
       $51 = (($rice_parameter$014) + 4)|0;
       $52 = $k2$015 << 4;
       $53 = $k2$015 << 7;
       $54 = ($53>>>0)<($39>>>0);
       if ($54) {
        $k2$015 = $52;$rice_parameter$014 = $51;
       } else {
        $k2$0$lcssa = $52;$rice_parameter$0$lcssa = $51;
        break;
       }
      }
     } else {
      $k2$0$lcssa = $$mux;$rice_parameter$0$lcssa = 0;
     }
     $50 = ($k2$0$lcssa>>>0)<($39>>>0);
     if ($50) {
      $k2$120 = $k2$0$lcssa;$rice_parameter$119 = $rice_parameter$0$lcssa;
      while(1) {
       $55 = (($rice_parameter$119) + 1)|0;
       $56 = $k2$120 << 1;
       $57 = ($56>>>0)<($39>>>0);
       if ($57) {
        $k2$120 = $56;$rice_parameter$119 = $55;
       } else {
        $rice_parameter$4 = $55;
        break;
       }
      }
     } else {
      $rice_parameter$4 = $rice_parameter$0$lcssa;
     }
    } else {
     $58 = ($42>>>0)<(16777216);
     $59 = ($39>>>0)<(1);
     $60 = ($42|0)==(16777216);
     $61 = $60 & $59;
     $62 = $58 | $61;
     $63 = (_bitshift64Shl(($$mux|0),0,7)|0);
     $64 = tempRet0;
     $65 = ($64>>>0)<($42>>>0);
     $66 = ($63>>>0)<($39>>>0);
     $67 = ($64|0)==($42|0);
     $68 = $67 & $66;
     $69 = $65 | $68;
     $or$cond = $62 & $69;
     if ($or$cond) {
      $78 = $$mux;$79 = 0;$rice_parameter$28 = 0;
      while(1) {
       $77 = (($rice_parameter$28) + 8)|0;
       $80 = (_bitshift64Shl(($78|0),($79|0),8)|0);
       $81 = tempRet0;
       $82 = (_bitshift64Shl(($78|0),($79|0),15)|0);
       $83 = tempRet0;
       $84 = ($83>>>0)<($42>>>0);
       $85 = ($82>>>0)<($39>>>0);
       $86 = ($83|0)==($42|0);
       $87 = $86 & $85;
       $88 = $84 | $87;
       if ($88) {
        $78 = $80;$79 = $81;$rice_parameter$28 = $77;
       } else {
        $70 = $81;$72 = $80;$rice_parameter$3$ph = $77;
        break;
       }
      }
     } else {
      $70 = 0;$72 = $$mux;$rice_parameter$3$ph = 0;
     }
     $71 = ($70>>>0)<($42>>>0);
     $73 = ($72>>>0)<($39>>>0);
     $74 = ($70|0)==($42|0);
     $75 = $74 & $73;
     $76 = $71 | $75;
     if ($76) {
      $90 = $72;$91 = $70;$rice_parameter$311 = $rice_parameter$3$ph;
      while(1) {
       $89 = (($rice_parameter$311) + 1)|0;
       $92 = (_bitshift64Shl(($90|0),($91|0),1)|0);
       $93 = tempRet0;
       $94 = ($93>>>0)<($42>>>0);
       $95 = ($92>>>0)<($39>>>0);
       $96 = ($93|0)==($42|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $90 = $92;$91 = $93;$rice_parameter$311 = $89;
       } else {
        $rice_parameter$4 = $89;
        break;
       }
      }
     } else {
      $rice_parameter$4 = $rice_parameter$3$ph;
     }
    }
    $99 = ($rice_parameter$4>>>0)<($rice_parameter_limit>>>0);
    $rice_parameter$4$ = $99 ? $rice_parameter$4 : $30;
    $100 = $36;
    $101 = $100;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($100) + 4)|0;
    $104 = $103;
    $105 = HEAP32[$104>>2]|0;
    $106 = (_count_rice_bits_in_partition_($rice_parameter$4$,$$mux,$102,$105)|0);
    $107 = ($106|0)==(-1);
    $best_rice_parameter$3 = $107 ? $best_rice_parameter$224 : $rice_parameter$4$;
    do {
     if ($31) {
      $best_partition_bits$3 = $106;$best_rice_parameter$4 = $best_rice_parameter$3;
     } else {
      $108 = (($raw_bits_per_partition) + ($partition$025<<2)|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = Math_imul($109, $$mux)|0;
      $111 = (($34) + ($110))|0;
      $112 = ($111>>>0)>($106>>>0);
      $113 = (($7) + ($partition$025<<2)|0);
      if ($112) {
       HEAP32[$113>>2] = 0;
       $best_partition_bits$3 = $106;$best_rice_parameter$4 = $best_rice_parameter$3;
       break;
      } else {
       HEAP32[$113>>2] = $109;
       $best_partition_bits$3 = $111;$best_rice_parameter$4 = 0;
       break;
      }
     }
    } while(0);
    $114 = (($5) + ($partition$025<<2)|0);
    HEAP32[$114>>2] = $best_rice_parameter$4;
    $115 = (($best_partition_bits$3) + ($bits_$023))|0;
    $116 = (($partition$025) + 1)|0;
    $117 = ($116>>>0)<($26>>>0);
    if ($117) {
     $best_rice_parameter$224 = $best_rice_parameter$4;$bits_$023 = $115;$partition$025 = $116;
    } else {
     $bits_$1 = $115;
     break L1;
    }
   }
   return ($$0|0);
  }
 } while(0);
 HEAP32[$bits>>2] = $bits_$1;
 $$0 = 1;
 return ($$0|0);
}
function _count_rice_bits_in_partition_($rice_parameter,$partition_samples,$0,$1) {
 $rice_parameter = $rice_parameter|0;
 $partition_samples = $partition_samples|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1096>>2]|0;
 $3 = (($rice_parameter) + 1)|0;
 $4 = Math_imul($3, $partition_samples)|0;
 $5 = ($rice_parameter|0)==(0);
 if ($5) {
  $9 = (_bitshift64Shl(($0|0),($1|0),1)|0);
  $10 = tempRet0;
  $15 = $9;$16 = $10;
 } else {
  $6 = (($rice_parameter) + -1)|0;
  $7 = (_bitshift64Lshr(($0|0),($1|0),($6|0))|0);
  $8 = tempRet0;
  $15 = $7;$16 = $8;
 }
 $11 = $partition_samples >>> 1;
 $12 = (($4) - ($11))|0;
 $13 = (($12) + ($2))|0;
 $14 = (($13) + ($15))|0;
 return ($14|0);
}
function _FLAC__add_metadata_block($metadata,$bw) {
 $metadata = $metadata|0;
 $bw = $bw|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0;
 var $i$110 = 0, $i$211 = 0, $i$315 = 0, $j$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(3417)|0);
 $1 = ((($metadata)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[1108>>2]|0;
 $4 = (_FLAC__bitwriter_write_raw_uint32($bw,$2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$metadata>>2]|0;
 $7 = HEAP32[1064>>2]|0;
 $8 = (_FLAC__bitwriter_write_raw_uint32($bw,$6,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($metadata)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$metadata>>2]|0;
 $13 = ($12|0)==(4);
 if ($13) {
  $14 = ((($metadata)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($11) + ($0))|0;
  $17 = (($16) - ($15))|0;
  $i$0 = $17;
 } else {
  $i$0 = $11;
 }
 $18 = HEAP32[1068>>2]|0;
 $19 = 1 << $18;
 $20 = ($i$0>>>0)<($19>>>0);
 if (!($20)) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = (_FLAC__bitwriter_write_raw_uint32($bw,$i$0,$18)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $$0 = 0;
  return ($$0|0);
 }
 $23 = HEAP32[$metadata>>2]|0;
 L16: do {
  switch ($23|0) {
  case 0:  {
   $31 = ((($metadata)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[1120>>2]|0;
   $34 = (_FLAC__bitwriter_write_raw_uint32($bw,$32,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = 0;
    return ($$0|0);
   }
   $36 = ((($metadata)) + 20|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[1120>>2]|0;
   $39 = (_FLAC__bitwriter_write_raw_uint32($bw,$37,$38)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $$0 = 0;
    return ($$0|0);
   }
   $41 = ((($metadata)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[1068>>2]|0;
   $44 = (_FLAC__bitwriter_write_raw_uint32($bw,$42,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $$0 = 0;
    return ($$0|0);
   }
   $46 = ((($metadata)) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[1068>>2]|0;
   $49 = (_FLAC__bitwriter_write_raw_uint32($bw,$47,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $$0 = 0;
    return ($$0|0);
   }
   $51 = ((($metadata)) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[1036>>2]|0;
   $54 = (_FLAC__bitwriter_write_raw_uint32($bw,$52,$53)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $$0 = 0;
    return ($$0|0);
   }
   $56 = ((($metadata)) + 36|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + -1)|0;
   $59 = HEAP32[1080>>2]|0;
   $60 = (_FLAC__bitwriter_write_raw_uint32($bw,$58,$59)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    $$0 = 0;
    return ($$0|0);
   }
   $62 = ((($metadata)) + 40|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + -1)|0;
   $65 = HEAP32[1100>>2]|0;
   $66 = (_FLAC__bitwriter_write_raw_uint32($bw,$64,$65)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $$0 = 0;
    return ($$0|0);
   }
   $68 = ((($metadata)) + 48|0);
   $69 = $68;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 4)|0;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = HEAP32[1040>>2]|0;
   $76 = (_FLAC__bitwriter_write_raw_uint64($bw,$71,$74,$75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    $$0 = 0;
    return ($$0|0);
   }
   $78 = ((($metadata)) + 56|0);
   $79 = (_FLAC__bitwriter_write_byte_block($bw,$78,16)|0);
   $80 = ($79|0)==(0);
   if ($80) {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 1:  {
   $81 = HEAP32[$10>>2]|0;
   $82 = $81 << 3;
   $83 = (_FLAC__bitwriter_write_zeroes($bw,$82)|0);
   $84 = ($83|0)==(0);
   if ($84) {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 2:  {
   $85 = ((($metadata)) + 16|0);
   $86 = HEAP32[1060>>2]|0;
   $87 = $86 >>> 3;
   $88 = (_FLAC__bitwriter_write_byte_block($bw,$85,$87)|0);
   $89 = ($88|0)==(0);
   if ($89) {
    $$0 = 0;
    return ($$0|0);
   }
   $90 = ((($metadata)) + 20|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = HEAP32[$10>>2]|0;
   $93 = HEAP32[1060>>2]|0;
   $94 = $93 >>> 3;
   $95 = (($92) - ($94))|0;
   $96 = (_FLAC__bitwriter_write_byte_block($bw,$91,$95)|0);
   $97 = ($96|0)==(0);
   if ($97) {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 3:  {
   $24 = ((($metadata)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if (!($26)) {
    $27 = ((($metadata)) + 20|0);
    $28 = HEAP32[1124>>2]|0;
    $29 = HEAP32[1124>>2]|0;
    $30 = HEAP32[1120>>2]|0;
    $i$110 = 0;
    while(1) {
     $101 = HEAP32[$27>>2]|0;
     $102 = (($101) + (($i$110*24)|0)|0);
     $103 = $102;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $106 = (($103) + 4)|0;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (_FLAC__bitwriter_write_raw_uint64($bw,$105,$108,$28)|0);
     $110 = ($109|0)==(0);
     if ($110) {
      $$0 = 0;
      label = 68;
      break;
     }
     $111 = HEAP32[$27>>2]|0;
     $112 = (((($111) + (($i$110*24)|0)|0)) + 8|0);
     $113 = $112;
     $114 = $113;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($113) + 4)|0;
     $117 = $116;
     $118 = HEAP32[$117>>2]|0;
     $119 = (_FLAC__bitwriter_write_raw_uint64($bw,$115,$118,$29)|0);
     $120 = ($119|0)==(0);
     if ($120) {
      $$0 = 0;
      label = 68;
      break;
     }
     $121 = HEAP32[$27>>2]|0;
     $122 = (((($121) + (($i$110*24)|0)|0)) + 16|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_FLAC__bitwriter_write_raw_uint32($bw,$123,$30)|0);
     $125 = ($124|0)==(0);
     $99 = (($i$110) + 1)|0;
     if ($125) {
      $$0 = 0;
      label = 68;
      break;
     }
     $98 = HEAP32[$24>>2]|0;
     $100 = ($99>>>0)<($98>>>0);
     if ($100) {
      $i$110 = $99;
     } else {
      break L16;
     }
    }
    if ((label|0) == 68) {
     return ($$0|0);
    }
   }
   break;
  }
  case 4:  {
   $126 = (_FLAC__bitwriter_write_raw_uint32_little_endian($bw,$0)|0);
   $127 = ($126|0)==(0);
   if ($127) {
    $$0 = 0;
    return ($$0|0);
   }
   $128 = (_FLAC__bitwriter_write_byte_block($bw,3417,$0)|0);
   $129 = ($128|0)==(0);
   if ($129) {
    $$0 = 0;
    return ($$0|0);
   }
   $130 = ((($metadata)) + 24|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (_FLAC__bitwriter_write_raw_uint32_little_endian($bw,$131)|0);
   $133 = ($132|0)==(0);
   if ($133) {
    $$0 = 0;
    return ($$0|0);
   }
   $134 = HEAP32[$130>>2]|0;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = ((($metadata)) + 28|0);
    $i$211 = 0;
    while(1) {
     $140 = HEAP32[$136>>2]|0;
     $141 = (($140) + ($i$211<<3)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (_FLAC__bitwriter_write_raw_uint32_little_endian($bw,$142)|0);
     $144 = ($143|0)==(0);
     if ($144) {
      $$0 = 0;
      label = 68;
      break;
     }
     $145 = HEAP32[$136>>2]|0;
     $146 = (((($145) + ($i$211<<3)|0)) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($145) + ($i$211<<3)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (_FLAC__bitwriter_write_byte_block($bw,$147,$149)|0);
     $151 = ($150|0)==(0);
     $138 = (($i$211) + 1)|0;
     if ($151) {
      $$0 = 0;
      label = 68;
      break;
     }
     $137 = HEAP32[$130>>2]|0;
     $139 = ($138>>>0)<($137>>>0);
     if ($139) {
      $i$211 = $138;
     } else {
      break L16;
     }
    }
    if ((label|0) == 68) {
     return ($$0|0);
    }
   }
   break;
  }
  case 5:  {
   $152 = ((($metadata)) + 16|0);
   $153 = HEAP32[1052>>2]|0;
   $154 = $153 >>> 3;
   $155 = (_FLAC__bitwriter_write_byte_block($bw,$152,$154)|0);
   $156 = ($155|0)==(0);
   if ($156) {
    $$0 = 0;
    return ($$0|0);
   }
   $157 = ((($metadata)) + 152|0);
   $158 = $157;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + 4)|0;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = HEAP32[1124>>2]|0;
   $165 = (_FLAC__bitwriter_write_raw_uint64($bw,$160,$163,$164)|0);
   $166 = ($165|0)==(0);
   if ($166) {
    $$0 = 0;
    return ($$0|0);
   }
   $167 = ((($metadata)) + 160|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)!=(0);
   $170 = $169&1;
   $171 = HEAP32[1108>>2]|0;
   $172 = (_FLAC__bitwriter_write_raw_uint32($bw,$170,$171)|0);
   $173 = ($172|0)==(0);
   if ($173) {
    $$0 = 0;
    return ($$0|0);
   }
   $174 = HEAP32[1056>>2]|0;
   $175 = (_FLAC__bitwriter_write_zeroes($bw,$174)|0);
   $176 = ($175|0)==(0);
   if ($176) {
    $$0 = 0;
    return ($$0|0);
   }
   $177 = ((($metadata)) + 164|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = HEAP32[1084>>2]|0;
   $180 = (_FLAC__bitwriter_write_raw_uint32($bw,$178,$179)|0);
   $181 = ($180|0)==(0);
   if ($181) {
    $$0 = 0;
    return ($$0|0);
   }
   $182 = HEAP32[$177>>2]|0;
   $183 = ($182|0)==(0);
   if (!($183)) {
    $184 = ((($metadata)) + 168|0);
    $185 = HEAP32[1124>>2]|0;
    $186 = HEAP32[1084>>2]|0;
    $187 = HEAP32[1044>>2]|0;
    $188 = $187 >>> 3;
    $189 = HEAP32[1108>>2]|0;
    $190 = HEAP32[1108>>2]|0;
    $191 = HEAP32[1048>>2]|0;
    $192 = HEAP32[1084>>2]|0;
    $193 = HEAP32[1124>>2]|0;
    $194 = HEAP32[1084>>2]|0;
    $195 = HEAP32[1068>>2]|0;
    $i$315 = 0;
    L98: while(1) {
     $196 = HEAP32[$184>>2]|0;
     $197 = (($196) + ($i$315<<5)|0);
     $198 = $197;
     $199 = $198;
     $200 = HEAP32[$199>>2]|0;
     $201 = (($198) + 4)|0;
     $202 = $201;
     $203 = HEAP32[$202>>2]|0;
     $204 = (_FLAC__bitwriter_write_raw_uint64($bw,$200,$203,$185)|0);
     $205 = ($204|0)==(0);
     if ($205) {
      $$0 = 0;
      label = 68;
      break;
     }
     $206 = (((($196) + ($i$315<<5)|0)) + 8|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $207&255;
     $209 = (_FLAC__bitwriter_write_raw_uint32($bw,$208,$186)|0);
     $210 = ($209|0)==(0);
     if ($210) {
      $$0 = 0;
      label = 68;
      break;
     }
     $211 = (((($196) + ($i$315<<5)|0)) + 9|0);
     $212 = (_FLAC__bitwriter_write_byte_block($bw,$211,$188)|0);
     $213 = ($212|0)==(0);
     if ($213) {
      $$0 = 0;
      label = 68;
      break;
     }
     $214 = (((($196) + ($i$315<<5)|0)) + 22|0);
     $215 = HEAP8[$214>>0]|0;
     $216 = $215 & 1;
     $217 = $216&255;
     $218 = (_FLAC__bitwriter_write_raw_uint32($bw,$217,$189)|0);
     $219 = ($218|0)==(0);
     if ($219) {
      $$0 = 0;
      label = 68;
      break;
     }
     $220 = HEAP8[$214>>0]|0;
     $221 = ($220&255) >>> 1;
     $222 = $221 & 1;
     $223 = $222&255;
     $224 = (_FLAC__bitwriter_write_raw_uint32($bw,$223,$190)|0);
     $225 = ($224|0)==(0);
     if ($225) {
      $$0 = 0;
      label = 68;
      break;
     }
     $226 = (_FLAC__bitwriter_write_zeroes($bw,$191)|0);
     $227 = ($226|0)==(0);
     if ($227) {
      $$0 = 0;
      label = 68;
      break;
     }
     $228 = (((($196) + ($i$315<<5)|0)) + 23|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = (_FLAC__bitwriter_write_raw_uint32($bw,$230,$192)|0);
     $232 = ($231|0)==(0);
     if ($232) {
      $$0 = 0;
      label = 68;
      break;
     }
     $233 = HEAP8[$228>>0]|0;
     $234 = ($233<<24>>24)==(0);
     if (!($234)) {
      $235 = (((($196) + ($i$315<<5)|0)) + 24|0);
      $j$013 = 0;
      while(1) {
       $240 = HEAP32[$235>>2]|0;
       $241 = (($240) + ($j$013<<4)|0);
       $242 = $241;
       $243 = $242;
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 4)|0;
       $246 = $245;
       $247 = HEAP32[$246>>2]|0;
       $248 = (_FLAC__bitwriter_write_raw_uint64($bw,$244,$247,$193)|0);
       $249 = ($248|0)==(0);
       if ($249) {
        $$0 = 0;
        label = 68;
        break L98;
       }
       $250 = (((($240) + ($j$013<<4)|0)) + 8|0);
       $251 = HEAP8[$250>>0]|0;
       $252 = $251&255;
       $253 = (_FLAC__bitwriter_write_raw_uint32($bw,$252,$194)|0);
       $254 = ($253|0)==(0);
       if ($254) {
        $$0 = 0;
        label = 68;
        break L98;
       }
       $255 = (_FLAC__bitwriter_write_zeroes($bw,$195)|0);
       $256 = ($255|0)==(0);
       $238 = (($j$013) + 1)|0;
       if ($256) {
        $$0 = 0;
        label = 68;
        break L98;
       }
       $236 = HEAP8[$228>>0]|0;
       $237 = $236&255;
       $239 = ($238>>>0)<($237>>>0);
       if ($239) {
        $j$013 = $238;
       } else {
        break;
       }
      }
     }
     $257 = (($i$315) + 1)|0;
     $258 = HEAP32[$177>>2]|0;
     $259 = ($257>>>0)<($258>>>0);
     if ($259) {
      $i$315 = $257;
     } else {
      break L16;
     }
    }
    if ((label|0) == 68) {
     return ($$0|0);
    }
   }
   break;
  }
  case 6:  {
   $260 = ((($metadata)) + 16|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = HEAP32[1060>>2]|0;
   $263 = (_FLAC__bitwriter_write_raw_uint32($bw,$261,$262)|0);
   $264 = ($263|0)==(0);
   if ($264) {
    $$0 = 0;
    return ($$0|0);
   }
   $265 = ((($metadata)) + 20|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = (_strlen($266)|0);
   $268 = HEAP32[1060>>2]|0;
   $269 = (_FLAC__bitwriter_write_raw_uint32($bw,$267,$268)|0);
   $270 = ($269|0)==(0);
   if ($270) {
    $$0 = 0;
    return ($$0|0);
   }
   $271 = HEAP32[$265>>2]|0;
   $272 = (_FLAC__bitwriter_write_byte_block($bw,$271,$267)|0);
   $273 = ($272|0)==(0);
   if ($273) {
    $$0 = 0;
    return ($$0|0);
   }
   $274 = ((($metadata)) + 24|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = (_strlen($275)|0);
   $277 = HEAP32[1060>>2]|0;
   $278 = (_FLAC__bitwriter_write_raw_uint32($bw,$276,$277)|0);
   $279 = ($278|0)==(0);
   if ($279) {
    $$0 = 0;
    return ($$0|0);
   }
   $280 = HEAP32[$274>>2]|0;
   $281 = (_FLAC__bitwriter_write_byte_block($bw,$280,$276)|0);
   $282 = ($281|0)==(0);
   if ($282) {
    $$0 = 0;
    return ($$0|0);
   }
   $283 = ((($metadata)) + 28|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = HEAP32[1060>>2]|0;
   $286 = (_FLAC__bitwriter_write_raw_uint32($bw,$284,$285)|0);
   $287 = ($286|0)==(0);
   if ($287) {
    $$0 = 0;
    return ($$0|0);
   }
   $288 = ((($metadata)) + 32|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = HEAP32[1060>>2]|0;
   $291 = (_FLAC__bitwriter_write_raw_uint32($bw,$289,$290)|0);
   $292 = ($291|0)==(0);
   if ($292) {
    $$0 = 0;
    return ($$0|0);
   }
   $293 = ((($metadata)) + 36|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = HEAP32[1060>>2]|0;
   $296 = (_FLAC__bitwriter_write_raw_uint32($bw,$294,$295)|0);
   $297 = ($296|0)==(0);
   if ($297) {
    $$0 = 0;
    return ($$0|0);
   }
   $298 = ((($metadata)) + 40|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = HEAP32[1060>>2]|0;
   $301 = (_FLAC__bitwriter_write_raw_uint32($bw,$299,$300)|0);
   $302 = ($301|0)==(0);
   if ($302) {
    $$0 = 0;
    return ($$0|0);
   }
   $303 = ((($metadata)) + 44|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = HEAP32[1060>>2]|0;
   $306 = (_FLAC__bitwriter_write_raw_uint32($bw,$304,$305)|0);
   $307 = ($306|0)==(0);
   if ($307) {
    $$0 = 0;
    return ($$0|0);
   }
   $308 = ((($metadata)) + 48|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[$303>>2]|0;
   $311 = (_FLAC__bitwriter_write_byte_block($bw,$309,$310)|0);
   $312 = ($311|0)==(0);
   if ($312) {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  default: {
   $313 = ((($metadata)) + 16|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = HEAP32[$10>>2]|0;
   $316 = (_FLAC__bitwriter_write_byte_block($bw,$314,$315)|0);
   $317 = ($316|0)==(0);
   if ($317) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  }
 } while(0);
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__frame_add_header($header,$bw) {
 $header = $header|0;
 $bw = $bw|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $blocksize_hint$0 = 0, $crc = 0, $not$ = 0, $not$4 = 0, $or$cond = 0, $sample_rate_hint$0 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0;
 var $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split72D = 0, $u$0 = 0, $u$1 = 0, $u$2 = 0, $u$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $crc = sp;
 $0 = HEAP32[1072>>2]|0;
 $1 = HEAP32[1076>>2]|0;
 $2 = (_FLAC__bitwriter_write_raw_uint32($bw,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[1108>>2]|0;
 $5 = (_FLAC__bitwriter_write_raw_uint32($bw,0,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($header)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $not$ = ($8|0)!=(0);
 $9 = $not$&1;
 $10 = HEAP32[1108>>2]|0;
 $11 = (_FLAC__bitwriter_write_raw_uint32($bw,$9,$10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$header>>2]|0;
 $switch$split2D = ($13|0)<(2048);
 L10: do {
  if ($switch$split2D) {
   switch ($13|0) {
   case 192:  {
    $blocksize_hint$0 = 0;$u$0 = 1;
    break L10;
    break;
   }
   case 576:  {
    $blocksize_hint$0 = 0;$u$0 = 2;
    break L10;
    break;
   }
   case 1152:  {
    $blocksize_hint$0 = 0;$u$0 = 3;
    break L10;
    break;
   }
   case 256:  {
    $blocksize_hint$0 = 0;$u$0 = 8;
    break L10;
    break;
   }
   case 512:  {
    $blocksize_hint$0 = 0;$u$0 = 9;
    break L10;
    break;
   }
   case 1024:  {
    $blocksize_hint$0 = 0;$u$0 = 10;
    break L10;
    break;
   }
   default: {
    label = 17;
    break L10;
   }
   }
  } else {
   $switch$split42D = ($13|0)<(4608);
   if ($switch$split42D) {
    switch ($13|0) {
    case 2304:  {
     $blocksize_hint$0 = 0;$u$0 = 4;
     break L10;
     break;
    }
    case 2048:  {
     $blocksize_hint$0 = 0;$u$0 = 11;
     break L10;
     break;
    }
    case 4096:  {
     $blocksize_hint$0 = 0;$u$0 = 12;
     break L10;
     break;
    }
    default: {
     label = 17;
     break L10;
    }
    }
   }
   $switch$split132D = ($13|0)<(16384);
   if ($switch$split132D) {
    $switch$split282D = ($13|0)<(8192);
    if ($switch$split282D) {
     switch ($13|0) {
     case 4608:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $blocksize_hint$0 = 0;$u$0 = 5;
     break;
    } else {
     switch ($13|0) {
     case 8192:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $blocksize_hint$0 = 0;$u$0 = 13;
     break;
    }
   } else {
    $switch$split312D = ($13|0)<(32768);
    if ($switch$split312D) {
     switch ($13|0) {
     case 16384:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $blocksize_hint$0 = 0;$u$0 = 14;
     break;
    } else {
     switch ($13|0) {
     case 32768:  {
      break;
     }
     default: {
      label = 17;
      break L10;
     }
     }
     $blocksize_hint$0 = 0;$u$0 = 15;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $14 = ($13>>>0)<(257);
  $$ = $14 ? 6 : 7;
  $blocksize_hint$0 = $$;$u$0 = $$;
 }
 $15 = HEAP32[1096>>2]|0;
 $16 = (_FLAC__bitwriter_write_raw_uint32($bw,$u$0,$15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ((($header)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $switch$split12D = ($19|0)<(44100);
 L45: do {
  if ($switch$split12D) {
   $switch$split72D = ($19|0)<(22050);
   if ($switch$split72D) {
    $switch$split162D = ($19|0)<(16000);
    if ($switch$split162D) {
     switch ($19|0) {
     case 8000:  {
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
     $sample_rate_hint$0 = 0;$u$1 = 4;
     break;
    } else {
     switch ($19|0) {
     case 16000:  {
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
     $sample_rate_hint$0 = 0;$u$1 = 5;
     break;
    }
   }
   $switch$split192D = ($19|0)<(24000);
   if ($switch$split192D) {
    switch ($19|0) {
    case 22050:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 6;
    break;
   }
   $switch$split342D = ($19|0)<(32000);
   if ($switch$split342D) {
    switch ($19|0) {
    case 24000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 7;
    break;
   } else {
    switch ($19|0) {
    case 32000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 8;
    break;
   }
  } else {
   $switch$split102D = ($19|0)<(96000);
   if ($switch$split102D) {
    $switch$split222D = ($19|0)<(48000);
    if ($switch$split222D) {
     switch ($19|0) {
     case 44100:  {
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
     $sample_rate_hint$0 = 0;$u$1 = 9;
     break;
    }
    $switch$split372D = ($19|0)<(88200);
    if (!($switch$split372D)) {
     switch ($19|0) {
     case 88200:  {
      $sample_rate_hint$0 = 0;$u$1 = 1;
      break L45;
      break;
     }
     default: {
      label = 30;
      break L45;
     }
     }
    }
    switch ($19|0) {
    case 48000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 10;
    break;
   }
   $switch$split252D = ($19|0)<(176400);
   if ($switch$split252D) {
    switch ($19|0) {
    case 96000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 11;
    break;
   }
   $switch$split402D = ($19|0)<(192000);
   if ($switch$split402D) {
    switch ($19|0) {
    case 176400:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 2;
    break;
   } else {
    switch ($19|0) {
    case 192000:  {
     break;
    }
    default: {
     label = 30;
     break L45;
    }
    }
    $sample_rate_hint$0 = 0;$u$1 = 3;
    break;
   }
  }
 } while(0);
 if ((label|0) == 30) {
  $20 = ($19>>>0)<(255001);
  $21 = (($19>>>0) % 1000)&-1;
  $22 = ($21|0)==(0);
  $or$cond = $20 & $22;
  if ($or$cond) {
   $sample_rate_hint$0 = 12;$u$1 = 12;
  } else {
   $23 = (($19>>>0) % 10)&-1;
   $24 = ($23|0)==(0);
   if ($24) {
    $sample_rate_hint$0 = 14;$u$1 = 14;
   } else {
    $25 = ($19>>>0)<(65536);
    $$2 = $25 ? 13 : 0;
    $sample_rate_hint$0 = $$2;$u$1 = $$2;
   }
  }
 }
 $26 = HEAP32[1096>>2]|0;
 $27 = (_FLAC__bitwriter_write_raw_uint32($bw,$u$1,$26)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ((($header)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 switch ($30|0) {
 case 0:  {
  $31 = ((($header)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  $u$2 = $33;
  break;
 }
 case 1:  {
  $u$2 = 8;
  break;
 }
 case 2:  {
  $u$2 = 9;
  break;
 }
 case 3:  {
  $u$2 = 10;
  break;
 }
 default: {
  $u$2 = $u$1;
 }
 }
 $34 = HEAP32[1096>>2]|0;
 $35 = (_FLAC__bitwriter_write_raw_uint32($bw,$u$2,$34)|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ((($header)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 switch ($38|0) {
 case 8:  {
  $u$3 = 1;
  break;
 }
 case 12:  {
  $u$3 = 2;
  break;
 }
 case 16:  {
  $u$3 = 4;
  break;
 }
 case 20:  {
  $u$3 = 5;
  break;
 }
 case 24:  {
  $u$3 = 6;
  break;
 }
 default: {
  $u$3 = 0;
 }
 }
 $39 = HEAP32[1080>>2]|0;
 $40 = (_FLAC__bitwriter_write_raw_uint32($bw,$u$3,$39)|0);
 $41 = ($40|0)==(0);
 if ($41) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = HEAP32[1108>>2]|0;
 $43 = (_FLAC__bitwriter_write_raw_uint32($bw,0,$42)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[$7>>2]|0;
 $46 = ($45|0)==(0);
 $47 = ((($header)) + 24|0);
 if ($46) {
  $48 = HEAP32[$47>>2]|0;
  $49 = (_FLAC__bitwriter_write_utf8_uint32($bw,$48)|0);
  $50 = ($49|0)==(0);
  if ($50) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $51 = $47;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (_FLAC__bitwriter_write_utf8_uint64($bw,$53,$56)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $59 = ($blocksize_hint$0|0)==(0);
 if (!($59)) {
  $60 = HEAP32[$header>>2]|0;
  $61 = (($60) + -1)|0;
  $62 = ($blocksize_hint$0|0)==(6);
  $63 = $62 ? 8 : 16;
  $64 = (_FLAC__bitwriter_write_raw_uint32($bw,$61,$63)|0);
  $65 = ($64|0)==(0);
  if ($65) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 switch ($sample_rate_hint$0|0) {
 case 12:  {
  $66 = HEAP32[$18>>2]|0;
  $67 = (($66>>>0) / 1000)&-1;
  $68 = (_FLAC__bitwriter_write_raw_uint32($bw,$67,8)|0);
  $69 = ($68|0)==(0);
  if ($69) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 13:  {
  $70 = HEAP32[$18>>2]|0;
  $71 = (_FLAC__bitwriter_write_raw_uint32($bw,$70,16)|0);
  $72 = ($71|0)==(0);
  if ($72) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 14:  {
  $73 = HEAP32[$18>>2]|0;
  $74 = (($73>>>0) / 10)&-1;
  $75 = (_FLAC__bitwriter_write_raw_uint32($bw,$74,16)|0);
  $76 = ($75|0)==(0);
  if ($76) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
 }
 }
 $77 = (_FLAC__bitwriter_get_write_crc8($bw,$crc)|0);
 $78 = ($77|0)==(0);
 if ($78) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = HEAP8[$crc>>0]|0;
 $80 = $79&255;
 $81 = HEAP32[1084>>2]|0;
 $82 = (_FLAC__bitwriter_write_raw_uint32($bw,$80,$81)|0);
 $not$4 = ($82|0)!=(0);
 $$3 = $not$4&1;
 $$0 = $$3;
 STACKTOP = sp;return ($$0|0);
}
function _FLAC__subframe_add_constant($subframe,$subframe_bps,$wasted_bits,$bw) {
 $subframe = $subframe|0;
 $subframe_bps = $subframe_bps|0;
 $wasted_bits = $wasted_bits|0;
 $bw = $bw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1112>>2]|0;
 $1 = ($wasted_bits|0)!=(0);
 $2 = $1&1;
 $3 = $0 | $2;
 $4 = HEAP32[1108>>2]|0;
 $5 = HEAP32[1104>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = HEAP32[1108>>2]|0;
 $8 = (($6) + ($7))|0;
 $9 = (_FLAC__bitwriter_write_raw_uint32($bw,$3,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $18 = 0;
  $17 = $18&1;
  return ($17|0);
 }
 if ($1) {
  $11 = (($wasted_bits) + -1)|0;
  $12 = (_FLAC__bitwriter_write_unary_unsigned($bw,$11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $18 = 0;
   $17 = $18&1;
   return ($17|0);
  }
 }
 $14 = HEAP32[$subframe>>2]|0;
 $15 = (_FLAC__bitwriter_write_raw_int32($bw,$14,$subframe_bps)|0);
 $16 = ($15|0)!=(0);
 $18 = $16;
 $17 = $18&1;
 return ($17|0);
}
function _FLAC__subframe_add_fixed($subframe,$residual_samples,$subframe_bps,$wasted_bits,$bw) {
 $subframe = $subframe|0;
 $residual_samples = $residual_samples|0;
 $subframe_bps = $subframe_bps|0;
 $wasted_bits = $wasted_bits|0;
 $bw = $bw|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1120>>2]|0;
 $1 = ((($subframe)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 $4 = ($wasted_bits|0)!=(0);
 $5 = $4&1;
 $6 = $0 | $5;
 $7 = $6 | $3;
 $8 = HEAP32[1108>>2]|0;
 $9 = HEAP32[1104>>2]|0;
 $10 = (($9) + ($8))|0;
 $11 = HEAP32[1108>>2]|0;
 $12 = (($10) + ($11))|0;
 $13 = (_FLAC__bitwriter_write_raw_uint32($bw,$7,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 if ($4) {
  $15 = (($wasted_bits) + -1)|0;
  $16 = (_FLAC__bitwriter_write_unary_unsigned($bw,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)==(0);
 L8: do {
  if (!($19)) {
   $i$01 = 0;
   while(1) {
    $23 = (((($subframe)) + 16|0) + ($i$01<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_FLAC__bitwriter_write_raw_int32($bw,$24,$subframe_bps)|0);
    $26 = ($25|0)==(0);
    $21 = (($i$01) + 1)|0;
    if ($26) {
     $$0 = 0;
     break;
    }
    $20 = HEAP32[$1>>2]|0;
    $22 = ($21>>>0)<($20>>>0);
    if ($22) {
     $i$01 = $21;
    } else {
     break L8;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $27 = (_add_entropy_coding_method_($bw,$subframe)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0;
  return ($$0|0);
 }
 $29 = HEAP32[$subframe>>2]|0;
 $switch = ($29>>>0)<(2);
 if ($switch) {
  $30 = ((($subframe)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$1>>2]|0;
  $33 = ((($subframe)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($34)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($subframe)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($29|0)==(1);
  $41 = $40&1;
  $42 = (_add_residual_partitioned_rice_($bw,$31,$residual_samples,$32,$35,$37,$39,$41)|0);
  $43 = ($42|0)==(0);
  if ($43) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__subframe_add_lpc($subframe,$residual_samples,$subframe_bps,$wasted_bits,$bw) {
 $subframe = $subframe|0;
 $residual_samples = $residual_samples|0;
 $subframe_bps = $subframe_bps|0;
 $wasted_bits = $wasted_bits|0;
 $bw = $bw|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$13 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1124>>2]|0;
 $1 = ((($subframe)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 $4 = (($3) + -2)|0;
 $5 = ($wasted_bits|0)!=(0);
 $6 = $5&1;
 $7 = $0 | $6;
 $8 = $7 | $4;
 $9 = HEAP32[1108>>2]|0;
 $10 = HEAP32[1104>>2]|0;
 $11 = (($10) + ($9))|0;
 $12 = HEAP32[1108>>2]|0;
 $13 = (($11) + ($12))|0;
 $14 = (_FLAC__bitwriter_write_raw_uint32($bw,$8,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 if ($5) {
  $16 = (($wasted_bits) + -1)|0;
  $17 = (_FLAC__bitwriter_write_unary_unsigned($bw,$16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = ($19|0)==(0);
 L8: do {
  if (!($20)) {
   $i$04 = 0;
   while(1) {
    $24 = (((($subframe)) + 152|0) + ($i$04<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_FLAC__bitwriter_write_raw_int32($bw,$25,$subframe_bps)|0);
    $27 = ($26|0)==(0);
    $22 = (($i$04) + 1)|0;
    if ($27) {
     $$0 = 0;
     break;
    }
    $21 = HEAP32[$1>>2]|0;
    $23 = ($22>>>0)<($21>>>0);
    if ($23) {
     $i$04 = $22;
    } else {
     break L8;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $28 = ((($subframe)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + -1)|0;
 $31 = HEAP32[1096>>2]|0;
 $32 = (_FLAC__bitwriter_write_raw_uint32($bw,$30,$31)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $$0 = 0;
  return ($$0|0);
 }
 $34 = ((($subframe)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[1100>>2]|0;
 $37 = (_FLAC__bitwriter_write_raw_int32($bw,$35,$36)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  return ($$0|0);
 }
 $39 = HEAP32[$1>>2]|0;
 $40 = ($39|0)==(0);
 L20: do {
  if (!($40)) {
   $i$13 = 0;
   while(1) {
    $44 = (((($subframe)) + 24|0) + ($i$13<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$28>>2]|0;
    $47 = (_FLAC__bitwriter_write_raw_int32($bw,$45,$46)|0);
    $48 = ($47|0)==(0);
    $42 = (($i$13) + 1)|0;
    if ($48) {
     $$0 = 0;
     break;
    }
    $41 = HEAP32[$1>>2]|0;
    $43 = ($42>>>0)<($41>>>0);
    if ($43) {
     $i$13 = $42;
    } else {
     break L20;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $49 = (_add_entropy_coding_method_($bw,$subframe)|0);
 $50 = ($49|0)==(0);
 if ($50) {
  $$0 = 0;
  return ($$0|0);
 }
 $51 = HEAP32[$subframe>>2]|0;
 $switch = ($51>>>0)<(2);
 if ($switch) {
  $52 = ((($subframe)) + 280|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$1>>2]|0;
  $55 = ((($subframe)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($56)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($subframe)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($51|0)==(1);
  $63 = $62&1;
  $64 = (_add_residual_partitioned_rice_($bw,$53,$residual_samples,$54,$57,$59,$61,$63)|0);
  $65 = ($64|0)==(0);
  if ($65) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _FLAC__subframe_add_verbatim($subframe,$samples,$subframe_bps,$wasted_bits,$bw) {
 $subframe = $subframe|0;
 $samples = $samples|0;
 $subframe_bps = $subframe_bps|0;
 $wasted_bits = $wasted_bits|0;
 $bw = $bw|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$subframe>>2]|0;
 $1 = HEAP32[1116>>2]|0;
 $2 = ($wasted_bits|0)!=(0);
 $3 = $2&1;
 $4 = $1 | $3;
 $5 = HEAP32[1108>>2]|0;
 $6 = HEAP32[1104>>2]|0;
 $7 = (($6) + ($5))|0;
 $8 = HEAP32[1108>>2]|0;
 $9 = (($7) + ($8))|0;
 $10 = (_FLAC__bitwriter_write_raw_uint32($bw,$4,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 if ($2) {
  $12 = (($wasted_bits) + -1)|0;
  $13 = (_FLAC__bitwriter_write_unary_unsigned($bw,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $15 = ($samples|0)==(0);
 if ($15) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $18 = (($0) + ($i$01<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_FLAC__bitwriter_write_raw_int32($bw,$19,$subframe_bps)|0);
  $21 = ($20|0)==(0);
  $16 = (($i$01) + 1)|0;
  if ($21) {
   $$0 = 0;
   label = 7;
   break;
  }
  $17 = ($16>>>0)<($samples>>>0);
  if ($17) {
   $i$01 = $16;
  } else {
   $$0 = 1;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 return (0)|0;
}
function _add_entropy_coding_method_($bw,$method) {
 $bw = $bw|0;
 $method = $method|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$method>>2]|0;
 $1 = HEAP32[1116>>2]|0;
 $2 = (_FLAC__bitwriter_write_raw_uint32($bw,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$method>>2]|0;
 $switch = ($4>>>0)<(2);
 if ($switch) {
  $5 = ((($method)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[1096>>2]|0;
  $8 = (_FLAC__bitwriter_write_raw_uint32($bw,$6,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _add_residual_partitioned_rice_($bw,$residual,$residual_samples,$predictor_order,$rice_parameters,$raw_bits,$partition_order,$is_extended) {
 $bw = $bw|0;
 $residual = $residual|0;
 $residual_samples = $residual_samples|0;
 $predictor_order = $predictor_order|0;
 $rice_parameters = $rice_parameters|0;
 $raw_bits = $raw_bits|0;
 $partition_order = $partition_order|0;
 $is_extended = $is_extended|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $i1$09 = 0, $j$07 = 0, $k$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($is_extended|0)!=(0);
 $1 = HEAP32[1100>>2]|0;
 $2 = HEAP32[1096>>2]|0;
 $3 = $0 ? $1 : $2;
 $4 = HEAP32[1092>>2]|0;
 $5 = HEAP32[1088>>2]|0;
 $6 = $0 ? $4 : $5;
 $7 = ($partition_order|0)==(0);
 if ($7) {
  $8 = HEAP32[$raw_bits>>2]|0;
  $9 = ($8|0)==(0);
  L3: do {
   if ($9) {
    $10 = HEAP32[$rice_parameters>>2]|0;
    $11 = (_FLAC__bitwriter_write_raw_uint32($bw,$10,$3)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $$0 = 0;
     return ($$0|0);
    }
    $13 = HEAP32[$rice_parameters>>2]|0;
    $14 = (_FLAC__bitwriter_write_rice_signed_block($bw,$residual,$residual_samples,$13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     return ($$0|0);
    }
   } else {
    $16 = (_FLAC__bitwriter_write_raw_uint32($bw,$6,$3)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $$0 = 0;
     return ($$0|0);
    }
    $18 = HEAP32[$raw_bits>>2]|0;
    $19 = HEAP32[1100>>2]|0;
    $20 = (_FLAC__bitwriter_write_raw_uint32($bw,$18,$19)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$0 = 0;
     return ($$0|0);
    }
    $22 = ($residual_samples|0)==(0);
    if (!($22)) {
     $i$06 = 0;
     while(1) {
      $25 = (($residual) + ($i$06<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = HEAP32[$raw_bits>>2]|0;
      $28 = (_FLAC__bitwriter_write_raw_int32($bw,$26,$27)|0);
      $29 = ($28|0)==(0);
      $23 = (($i$06) + 1)|0;
      if ($29) {
       $$0 = 0;
       break;
      }
      $24 = ($23>>>0)<($residual_samples>>>0);
      if ($24) {
       $i$06 = $23;
      } else {
       break L3;
      }
     }
     return ($$0|0);
    }
   }
  } while(0);
  $$0 = 1;
  return ($$0|0);
 }
 $30 = (($predictor_order) + ($residual_samples))|0;
 $31 = $30 >>> $partition_order;
 $32 = 1 << $partition_order;
 $33 = HEAP32[1100>>2]|0;
 $i1$09 = 0;$k$010 = 0;
 L23: while(1) {
  $34 = ($i1$09|0)==(0);
  $35 = $34 ? $predictor_order : 0;
  $$ = (($31) - ($35))|0;
  $36 = (($$) + ($k$010))|0;
  $37 = (($raw_bits) + ($i1$09<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = (($rice_parameters) + ($i1$09<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_FLAC__bitwriter_write_raw_uint32($bw,$41,$3)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    $$0 = 0;
    label = 21;
    break;
   }
   $44 = (($residual) + ($k$010<<2)|0);
   $45 = HEAP32[$40>>2]|0;
   $46 = (_FLAC__bitwriter_write_rice_signed_block($bw,$44,$$,$45)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    $$0 = 0;
    label = 21;
    break;
   }
  } else {
   $48 = (_FLAC__bitwriter_write_raw_uint32($bw,$6,$3)|0);
   $49 = ($48|0)==(0);
   if ($49) {
    $$0 = 0;
    label = 21;
    break;
   }
   $50 = HEAP32[$37>>2]|0;
   $51 = (_FLAC__bitwriter_write_raw_uint32($bw,$50,$33)|0);
   $52 = ($51|0)==(0);
   if ($52) {
    $$0 = 0;
    label = 21;
    break;
   }
   $53 = ($k$010>>>0)<($36>>>0);
   if ($53) {
    $j$07 = $k$010;
    while(1) {
     $56 = (($residual) + ($j$07<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP32[$37>>2]|0;
     $59 = (_FLAC__bitwriter_write_raw_int32($bw,$57,$58)|0);
     $60 = ($59|0)==(0);
     $54 = (($j$07) + 1)|0;
     if ($60) {
      $$0 = 0;
      label = 21;
      break L23;
     }
     $55 = ($54>>>0)<($36>>>0);
     if ($55) {
      $j$07 = $54;
     } else {
      break;
     }
    }
   }
  }
  $61 = (($i1$09) + 1)|0;
  $62 = ($61>>>0)<($32>>>0);
  if ($62) {
   $i1$09 = $61;$k$010 = $36;
  } else {
   $$0 = 1;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FLAC__window_bartlett($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $$op = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$010 = 0, $n$18 = 0, $n$2$lcssa = 0, $n$26 = 0, $n$35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + -1)|0;
 $1 = $L & 1;
 $2 = ($1|0)==(0);
 if ($2) {
  $7 = (($L|0) / 2)&-1;
  $8 = (($7) + -1)|0;
  $9 = ($L|0)<(2);
  if ($9) {
   $n$2$lcssa = 0;
  } else {
   $10 = (+($0|0));
   $11 = ($L|0)>(3);
   $n$26 = 0;
   while(1) {
    $31 = (+($n$26|0));
    $32 = $31 * 2.0;
    $33 = $32 / $10;
    $34 = (($window) + ($n$26<<2)|0);
    HEAPF32[$34>>2] = $33;
    $35 = (($n$26) + 1)|0;
    $36 = ($n$26|0)<($8|0);
    if ($36) {
     $n$26 = $35;
    } else {
     break;
    }
   }
   $28 = $11 ? $7 : 1;
   $n$2$lcssa = $28;
  }
  $29 = ($n$2$lcssa|0)>($0|0);
  if ($29) {
   return;
  }
  $30 = (+($0|0));
  $n$35 = $n$2$lcssa;
  while(1) {
   $37 = (+($n$35|0));
   $38 = $37 * 2.0;
   $39 = $38 / $30;
   $40 = 2.0 - $39;
   $41 = (($window) + ($n$35<<2)|0);
   HEAPF32[$41>>2] = $40;
   $42 = (($n$35) + 1)|0;
   $43 = ($n$35|0)<($0|0);
   if ($43) {
    $n$35 = $42;
   } else {
    break;
   }
  }
  return;
 } else {
  $3 = (($0|0) / 2)&-1;
  $4 = ($L|0)<(0);
  if ($4) {
   $n$0$lcssa = 0;
  } else {
   $5 = (+($0|0));
   $6 = ($0|0)>(1);
   $n$010 = 0;
   while(1) {
    $15 = (+($n$010|0));
    $16 = $15 * 2.0;
    $17 = $16 / $5;
    $18 = (($window) + ($n$010<<2)|0);
    HEAPF32[$18>>2] = $17;
    $19 = (($n$010) + 1)|0;
    $20 = ($n$010|0)<($3|0);
    if ($20) {
     $n$010 = $19;
    } else {
     break;
    }
   }
   $$op = (($3) + 1)|0;
   $12 = $6 ? $$op : 1;
   $n$0$lcssa = $12;
  }
  $13 = ($n$0$lcssa|0)>($0|0);
  if ($13) {
   return;
  }
  $14 = (+($0|0));
  $n$18 = $n$0$lcssa;
  while(1) {
   $21 = (+($n$18|0));
   $22 = $21 * 2.0;
   $23 = $22 / $14;
   $24 = 2.0 - $23;
   $25 = (($window) + ($n$18<<2)|0);
   HEAPF32[$25>>2] = $24;
   $26 = (($n$18) + 1)|0;
   $27 = ($n$18|0)<($0|0);
   if ($27) {
    $n$18 = $26;
   } else {
    break;
   }
  }
  return;
 }
}
function _FLAC__window_bartlett_hann($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $fabsf = 0.0, $n$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 / $2;
  $5 = $4 + -0.5;
  $fabsf = (+Math_abs((+$5)));
  $6 = $fabsf;
  $7 = $6 * 0.47999998927116394;
  $8 = 0.62000000476837158 - $7;
  $9 = $4;
  $10 = $9 * 6.2831853071795862;
  $11 = (+Math_cos((+$10)));
  $12 = $11 * 0.37999999523162842;
  $13 = $8 - $12;
  $14 = $13;
  $15 = (($window) + ($n$01<<2)|0);
  HEAPF32[$15>>2] = $14;
  $16 = (($n$01) + 1)|0;
  $exitcond = ($16|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $16;
  }
 }
 return;
}
function _FLAC__window_blackman($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 0.5;
  $8 = 0.41999998688697815 - $7;
  $9 = $3 * 12.566370614359172;
  $10 = $9 / $2;
  $11 = (+Math_cos((+$10)));
  $12 = $11 * 0.079999998211860657;
  $13 = $8 + $12;
  $14 = $13;
  $15 = (($window) + ($n$01<<2)|0);
  HEAPF32[$15>>2] = $14;
  $16 = (($n$01) + 1)|0;
  $exitcond = ($16|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $16;
  }
 }
 return;
}
function _FLAC__window_blackman_harris_4term_92db_sidelobe($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)<(1);
 if ($0) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 0.48829001188278198;
  $8 = 0.35874998569488525 - $7;
  $9 = $3 * 12.566370614359172;
  $10 = $9 / $2;
  $11 = (+Math_cos((+$10)));
  $12 = $11 * 0.14127999544143677;
  $13 = $8 + $12;
  $14 = $3 * 18.849555921538759;
  $15 = $14 / $2;
  $16 = (+Math_cos((+$15)));
  $17 = $16 * 0.011680000461637974;
  $18 = $13 - $17;
  $19 = $18;
  $20 = (($window) + ($n$01<<2)|0);
  HEAPF32[$20>>2] = $19;
  $21 = (($n$01) + 1)|0;
  $exitcond = ($21|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $21;
  }
 }
 return;
}
function _FLAC__window_connes($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + -1)|0;
 $1 = (+($0|0));
 $2 = $1 * 0.5;
 $3 = ($L|0)<(1);
 if ($3) {
  return;
 } else {
  $n$01 = 0;
 }
 while(1) {
  $4 = (+($n$01|0));
  $5 = $4 - $2;
  $6 = $5 / $2;
  $7 = $6 * $6;
  $8 = 1.0 - $7;
  $9 = $8 * $8;
  $10 = $9;
  $11 = (($window) + ($n$01<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = (($n$01) + 1)|0;
  $exitcond = ($12|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $12;
  }
 }
 return;
}
function _FLAC__window_flattop($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 1.9299999475479126;
  $8 = 1.0 - $7;
  $9 = $3 * 12.566370614359172;
  $10 = $9 / $2;
  $11 = (+Math_cos((+$10)));
  $12 = $11 * 1.2899999618530273;
  $13 = $8 + $12;
  $14 = $3 * 18.849555921538759;
  $15 = $14 / $2;
  $16 = (+Math_cos((+$15)));
  $17 = $16 * 0.3880000114440918;
  $18 = $13 - $17;
  $19 = $3 * 25.132741228718345;
  $20 = $19 / $2;
  $21 = (+Math_cos((+$20)));
  $22 = $21 * 0.032200001180171967;
  $23 = $18 + $22;
  $24 = $23;
  $25 = (($window) + ($n$01<<2)|0);
  HEAPF32[$25>>2] = $24;
  $26 = (($n$01) + 1)|0;
  $exitcond = ($26|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $26;
  }
 }
 return;
}
function _FLAC__window_gauss($window,$L,$stddev) {
 $window = $window|0;
 $L = $L|0;
 $stddev = +$stddev;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + -1)|0;
 $1 = (+($0|0));
 $2 = $1 * 0.5;
 $3 = ($L|0)<(1);
 if ($3) {
  return;
 }
 $4 = $stddev;
 $5 = $4 * $2;
 $n$01 = 0;
 while(1) {
  $6 = (+($n$01|0));
  $7 = $6 - $2;
  $8 = $7 / $5;
  $9 = $8 * -0.5;
  $10 = $8 * $9;
  $11 = (+Math_exp((+$10)));
  $12 = $11;
  $13 = (($window) + ($n$01<<2)|0);
  HEAPF32[$13>>2] = $12;
  $14 = (($n$01) + 1)|0;
  $exitcond = ($14|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $14;
  }
 }
 return;
}
function _FLAC__window_hamming($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 0.46000000834465027;
  $8 = 0.54000002145767212 - $7;
  $9 = $8;
  $10 = (($window) + ($n$01<<2)|0);
  HEAPF32[$10>>2] = $9;
  $11 = (($n$01) + 1)|0;
  $exitcond = ($11|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $11;
  }
 }
 return;
}
function _FLAC__window_hann($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 0.5;
  $8 = 0.5 - $7;
  $9 = $8;
  $10 = (($window) + ($n$01<<2)|0);
  HEAPF32[$10>>2] = $9;
  $11 = (($n$01) + 1)|0;
  $exitcond = ($11|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $11;
  }
 }
 return;
}
function _FLAC__window_kaiser_bessel($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 0.49799999594688416;
  $8 = 0.40200001001358032 - $7;
  $9 = $3 * 12.566370614359172;
  $10 = $9 / $2;
  $11 = (+Math_cos((+$10)));
  $12 = $11 * 0.097999997437000274;
  $13 = $8 + $12;
  $14 = $3 * 18.849555921538759;
  $15 = $14 / $2;
  $16 = (+Math_cos((+$15)));
  $17 = $16 * 0.0010000000474974513;
  $18 = $13 - $17;
  $19 = $18;
  $20 = (($window) + ($n$01<<2)|0);
  HEAPF32[$20>>2] = $19;
  $21 = (($n$01) + 1)|0;
  $exitcond = ($21|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $21;
  }
 }
 return;
}
function _FLAC__window_nuttall($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($L) + -1)|0;
 $2 = (+($1|0));
 $n$01 = 0;
 while(1) {
  $3 = (+($n$01|0));
  $4 = $3 * 6.2831853071795862;
  $5 = $4 / $2;
  $6 = (+Math_cos((+$5)));
  $7 = $6 * 0.48917749524116516;
  $8 = 0.36358189582824707 - $7;
  $9 = $3 * 12.566370614359172;
  $10 = $9 / $2;
  $11 = (+Math_cos((+$10)));
  $12 = $11 * 0.13659949600696564;
  $13 = $8 + $12;
  $14 = $3 * 18.849555921538759;
  $15 = $14 / $2;
  $16 = (+Math_cos((+$15)));
  $17 = $16 * 0.010641099885106087;
  $18 = $13 - $17;
  $19 = $18;
  $20 = (($window) + ($n$01<<2)|0);
  HEAPF32[$20>>2] = $19;
  $21 = (($n$01) + 1)|0;
  $exitcond = ($21|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $21;
  }
 }
 return;
}
function _FLAC__window_rectangle($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)>(0);
 if ($0) {
  $n$01 = 0;
 } else {
  return;
 }
 while(1) {
  $1 = (($window) + ($n$01<<2)|0);
  HEAPF32[$1>>2] = 1.0;
  $2 = (($n$01) + 1)|0;
  $exitcond = ($2|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $2;
  }
 }
 return;
}
function _FLAC__window_triangle($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $$op = 0, $$op15 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$010 = 0, $n$18 = 0, $n$2$lcssa = 0, $n$26 = 0;
 var $n$35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $L & 1;
 $1 = ($0|0)==(0);
 if ($1) {
  $8 = (($L|0) / 2)&-1;
  $9 = ($L|0)<(2);
  if ($9) {
   $n$2$lcssa = 1;
  } else {
   $10 = (+($L|0));
   $11 = $10 + 1.0;
   $12 = ($L|0)>(3);
   $n$26 = 1;
   while(1) {
    $37 = (+($n$26|0));
    $38 = $37 * 2.0;
    $39 = $38 / $11;
    $40 = (($n$26) + -1)|0;
    $41 = (($window) + ($40<<2)|0);
    HEAPF32[$41>>2] = $39;
    $42 = (($n$26) + 1)|0;
    $43 = ($n$26|0)<($8|0);
    if ($43) {
     $n$26 = $42;
    } else {
     break;
    }
   }
   $$op15 = (($8) + 1)|0;
   $33 = $12 ? $$op15 : 2;
   $n$2$lcssa = $33;
  }
  $34 = ($n$2$lcssa|0)>($L|0);
  if ($34) {
   return;
  }
  $35 = (+($L|0));
  $36 = $35 + 1.0;
  $n$35 = $n$2$lcssa;
  while(1) {
   $44 = (($L) - ($n$35))|0;
   $45 = $44 << 1;
   $46 = (($45) + 2)|0;
   $47 = (+($46|0));
   $48 = $47 / $36;
   $49 = (($n$35) + -1)|0;
   $50 = (($window) + ($49<<2)|0);
   HEAPF32[$50>>2] = $48;
   $51 = (($n$35) + 1)|0;
   $52 = ($n$35|0)<($L|0);
   if ($52) {
    $n$35 = $51;
   } else {
    break;
   }
  }
  return;
 } else {
  $2 = (($L) + 1)|0;
  $3 = (($2|0) / 2)&-1;
  $4 = ($2|0)<(2);
  if ($4) {
   $n$0$lcssa = 1;
  } else {
   $5 = (+($L|0));
   $6 = $5 + 1.0;
   $7 = ($L|0)>(2);
   $n$010 = 1;
   while(1) {
    $17 = (+($n$010|0));
    $18 = $17 * 2.0;
    $19 = $18 / $6;
    $20 = (($n$010) + -1)|0;
    $21 = (($window) + ($20<<2)|0);
    HEAPF32[$21>>2] = $19;
    $22 = (($n$010) + 1)|0;
    $23 = ($n$010|0)<($3|0);
    if ($23) {
     $n$010 = $22;
    } else {
     break;
    }
   }
   $$op = (($3) + 1)|0;
   $13 = $7 ? $$op : 2;
   $n$0$lcssa = $13;
  }
  $14 = ($n$0$lcssa|0)>($L|0);
  if ($14) {
   return;
  }
  $15 = (+($L|0));
  $16 = $15 + 1.0;
  $n$18 = $n$0$lcssa;
  while(1) {
   $24 = (($L) - ($n$18))|0;
   $25 = $24 << 1;
   $26 = (($25) + 2)|0;
   $27 = (+($26|0));
   $28 = $27 / $16;
   $29 = (($n$18) + -1)|0;
   $30 = (($window) + ($29<<2)|0);
   HEAPF32[$30>>2] = $28;
   $31 = (($n$18) + 1)|0;
   $32 = ($n$18|0)<($L|0);
   if ($32) {
    $n$18 = $31;
   } else {
    break;
   }
  }
  return;
 }
}
function _FLAC__window_tukey($window,$L,$p) {
 $window = $window|0;
 $L = $L|0;
 $p = +$p;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = !($p <= 0.0);
 if (!($0)) {
  _FLAC__window_rectangle($window,$L);
  return;
 }
 $1 = !($p >= 1.0);
 if (!($1)) {
  _FLAC__window_hann($window,$L);
  return;
 }
 $2 = $p * 0.5;
 $3 = (+($L|0));
 $4 = $3 * $2;
 $5 = (~~(($4)));
 $6 = (($5) + -1)|0;
 _FLAC__window_rectangle($window,$L);
 $7 = ($5|0)>(1);
 if (!($7)) {
  return;
 }
 $8 = (+($6|0));
 $$neg = (1 - ($5))|0;
 $9 = (($L) + -1)|0;
 $10 = (($9) + ($$neg))|0;
 $n$01 = 0;
 while(1) {
  $11 = (+($n$01|0));
  $12 = $11 * 3.1415926535897931;
  $13 = $12 / $8;
  $14 = (+Math_cos((+$13)));
  $15 = $14 * 0.5;
  $16 = 0.5 - $15;
  $17 = $16;
  $18 = (($window) + ($n$01<<2)|0);
  HEAPF32[$18>>2] = $17;
  $19 = (($n$01) + ($6))|0;
  $20 = (+($19|0));
  $21 = $20 * 3.1415926535897931;
  $22 = $21 / $8;
  $23 = (+Math_cos((+$22)));
  $24 = $23 * 0.5;
  $25 = 0.5 - $24;
  $26 = $25;
  $27 = (($10) + ($n$01))|0;
  $28 = (($window) + ($27<<2)|0);
  HEAPF32[$28>>2] = $26;
  $29 = (($n$01) + 1)|0;
  $exitcond = ($29|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $29;
  }
 }
 return;
}
function _FLAC__window_partial_tukey($window,$L,$p,$start,$end) {
 $window = $window|0;
 $L = $L|0;
 $p = +$p;
 $start = +$start;
 $end = +$end;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $exitcond37 = 0, $exitcond39 = 0, $i$020 = 0, $i$112 = 0, $n$0$lcssa = 0, $n$1$lcssa = 0, $n$119 = 0, $n$2$lcssa = 0, $n$215 = 0;
 var $n$3$lcssa = 0, $n$311 = 0, $or$cond23 = 0, $or$cond418 = 0, $or$cond514 = 0, $or$cond610 = 0, $p$tr = 0.0, $p$tr$lcssa = 0.0, $scevgep = 0, $umax = 0, $umax36 = 0, $umax38 = 0, $umax40 = 0, $umax43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$tr = $p;
 while(1) {
  $0 = !($p$tr <= 0.0);
  if (!($0)) {
   $p$tr = 0.05000000074505806;
   continue;
  }
  $1 = !($p$tr >= 1.0);
  if ($1) {
   $p$tr$lcssa = $p$tr;
   break;
  } else {
   $p$tr = 0.94999998807907104;
  }
 }
 $2 = (+($L|0));
 $3 = $2 * $start;
 $4 = (~~(($3)));
 $5 = $2 * $end;
 $6 = (~~(($5)));
 $7 = (($6) - ($4))|0;
 $8 = $p$tr$lcssa * 0.5;
 $9 = (+($7|0));
 $10 = $9 * $8;
 $11 = (~~(($10)));
 $12 = ($4|0)>(0);
 $13 = ($L|0)>(0);
 $or$cond23 = $12 & $13;
 if ($or$cond23) {
  $14 = (0 - ($4))|0;
  $15 = (0 - ($L))|0;
  $16 = ($14>>>0)>($15>>>0);
  $umax43 = $16 ? $14 : $15;
  $17 = Math_imul($umax43, -4)|0;
  _memset(($window|0),0,($17|0))|0;
  $18 = ($14>>>0)>($15>>>0);
  $umax40 = $18 ? $14 : $15;
  $19 = (0 - ($umax40))|0;
  $n$0$lcssa = $19;
 } else {
  $n$0$lcssa = 0;
 }
 $20 = (($11) + ($4))|0;
 $21 = ($n$0$lcssa|0)<($20|0);
 $22 = ($n$0$lcssa|0)<($L|0);
 $or$cond418 = $21 & $22;
 if ($or$cond418) {
  $23 = (+($11|0));
  $24 = (($n$0$lcssa) - ($11))|0;
  $25 = (($24) - ($4))|0;
  $26 = (($n$0$lcssa) - ($L))|0;
  $27 = ($25>>>0)>($26>>>0);
  $umax38 = $27 ? $25 : $26;
  $28 = (1 - ($umax38))|0;
  $i$020 = 1;$n$119 = $n$0$lcssa;
  while(1) {
   $38 = (+($i$020|0));
   $39 = $38 * 3.1415926535897931;
   $40 = $39 / $23;
   $41 = (+Math_cos((+$40)));
   $42 = $41 * 0.5;
   $43 = 0.5 - $42;
   $44 = $43;
   $45 = (($window) + ($n$119<<2)|0);
   HEAPF32[$45>>2] = $44;
   $46 = (($n$119) + 1)|0;
   $47 = (($i$020) + 1)|0;
   $exitcond39 = ($47|0)==($28|0);
   if ($exitcond39) {
    break;
   } else {
    $i$020 = $47;$n$119 = $46;
   }
  }
  $29 = (($n$0$lcssa) - ($umax38))|0;
  $n$1$lcssa = $29;
 } else {
  $n$1$lcssa = $n$0$lcssa;
 }
 $30 = (($6) - ($11))|0;
 $31 = ($n$1$lcssa|0)<($30|0);
 $32 = ($n$1$lcssa|0)<($L|0);
 $or$cond514 = $31 & $32;
 if ($or$cond514) {
  $33 = (($n$1$lcssa) + ($11))|0;
  $34 = (($33) - ($6))|0;
  $35 = (($n$1$lcssa) - ($L))|0;
  $36 = ($34>>>0)>($35>>>0);
  $umax36 = $36 ? $34 : $35;
  $37 = (($n$1$lcssa) - ($umax36))|0;
  $n$215 = $n$1$lcssa;
  while(1) {
   $55 = (($window) + ($n$215<<2)|0);
   HEAPF32[$55>>2] = 1.0;
   $56 = (($n$215) + 1)|0;
   $exitcond37 = ($56|0)==($37|0);
   if ($exitcond37) {
    $n$2$lcssa = $37;
    break;
   } else {
    $n$215 = $56;
   }
  }
 } else {
  $n$2$lcssa = $n$1$lcssa;
 }
 $48 = ($n$2$lcssa|0)<($6|0);
 $49 = ($n$2$lcssa|0)<($L|0);
 $or$cond610 = $48 & $49;
 if ($or$cond610) {
  $50 = (+($11|0));
  $51 = (($n$2$lcssa) - ($6))|0;
  $52 = (($n$2$lcssa) - ($L))|0;
  $53 = ($51>>>0)>($52>>>0);
  $umax = $53 ? $51 : $52;
  $54 = (($n$2$lcssa) - ($umax))|0;
  $i$112 = $11;$n$311 = $n$2$lcssa;
  while(1) {
   $58 = (+($i$112|0));
   $59 = $58 * 3.1415926535897931;
   $60 = $59 / $50;
   $61 = (+Math_cos((+$60)));
   $62 = $61 * 0.5;
   $63 = 0.5 - $62;
   $64 = $63;
   $65 = (($window) + ($n$311<<2)|0);
   HEAPF32[$65>>2] = $64;
   $66 = (($n$311) + 1)|0;
   $67 = (($i$112) + -1)|0;
   $exitcond = ($66|0)==($54|0);
   if ($exitcond) {
    $n$3$lcssa = $54;
    break;
   } else {
    $i$112 = $67;$n$311 = $66;
   }
  }
 } else {
  $n$3$lcssa = $n$2$lcssa;
 }
 $57 = ($n$3$lcssa|0)<($L|0);
 if (!($57)) {
  return;
 }
 $scevgep = (($window) + ($n$3$lcssa<<2)|0);
 $68 = (($L) - ($n$3$lcssa))|0;
 $69 = $68 << 2;
 _memset(($scevgep|0),0,($69|0))|0;
 return;
}
function _FLAC__window_punchout_tukey($window,$L,$p,$start,$end) {
 $window = $window|0;
 $L = $L|0;
 $p = +$p;
 $start = +$start;
 $end = +$end;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $exitcond = 0, $exitcond48 = 0, $exitcond50 = 0, $exitcond56 = 0, $exitcond58 = 0, $exitcond60 = 0, $i$037 = 0, $i$128 = 0, $i$219 = 0;
 var $i$313 = 0, $n$0$lcssa = 0, $n$036 = 0, $n$1$lcssa = 0, $n$132 = 0, $n$2$lcssa = 0, $n$227 = 0, $n$3$lcssa = 0, $n$4$lcssa = 0, $n$418 = 0, $n$5$lcssa = 0, $n$515 = 0, $n$612 = 0, $or$cond1014 = 0, $or$cond35 = 0, $or$cond631 = 0, $or$cond726 = 0, $or$cond822 = 0, $or$cond917 = 0, $p$tr = 0.0;
 var $p$tr$lcssa = 0.0, $scevgep = 0, $umax = 0, $umax49 = 0, $umax51 = 0, $umax54 = 0, $umax55 = 0, $umax57 = 0, $umax59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$tr = $p;
 while(1) {
  $0 = !($p$tr <= 0.0);
  if (!($0)) {
   $p$tr = 0.05000000074505806;
   continue;
  }
  $1 = !($p$tr >= 1.0);
  if ($1) {
   $p$tr$lcssa = $p$tr;
   break;
  } else {
   $p$tr = 0.94999998807907104;
  }
 }
 $2 = (+($L|0));
 $3 = $2 * $start;
 $4 = (~~(($3)));
 $5 = $2 * $end;
 $6 = (~~(($5)));
 $7 = $p$tr$lcssa * 0.5;
 $8 = (+($4|0));
 $9 = $8 * $7;
 $10 = (~~(($9)));
 $11 = (($L) - ($6))|0;
 $12 = (+($11|0));
 $13 = $12 * $7;
 $14 = (~~(($13)));
 $15 = ($10|0)>(0);
 $16 = ($L|0)>(0);
 $or$cond35 = $15 & $16;
 if ($or$cond35) {
  $17 = (+($10|0));
  $18 = (0 - ($10))|0;
  $19 = (0 - ($L))|0;
  $20 = ($18>>>0)>($19>>>0);
  $umax59 = $20 ? $18 : $19;
  $21 = (0 - ($umax59))|0;
  $i$037 = 1;$n$036 = 0;
  while(1) {
   $30 = (+($i$037|0));
   $31 = $30 * 3.1415926535897931;
   $32 = $31 / $17;
   $33 = (+Math_cos((+$32)));
   $34 = $33 * 0.5;
   $35 = 0.5 - $34;
   $36 = $35;
   $37 = (($window) + ($n$036<<2)|0);
   HEAPF32[$37>>2] = $36;
   $38 = (($n$036) + 1)|0;
   $39 = (($i$037) + 1)|0;
   $exitcond60 = ($38|0)==($21|0);
   if ($exitcond60) {
    $n$0$lcssa = $21;
    break;
   } else {
    $i$037 = $39;$n$036 = $38;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $22 = (($4) - ($10))|0;
 $23 = ($n$0$lcssa|0)<($22|0);
 $24 = ($n$0$lcssa|0)<($L|0);
 $or$cond631 = $23 & $24;
 if ($or$cond631) {
  $25 = (($n$0$lcssa) + ($10))|0;
  $26 = (($25) - ($4))|0;
  $27 = (($n$0$lcssa) - ($L))|0;
  $28 = ($26>>>0)>($27>>>0);
  $umax57 = $28 ? $26 : $27;
  $29 = (($n$0$lcssa) - ($umax57))|0;
  $n$132 = $n$0$lcssa;
  while(1) {
   $47 = (($window) + ($n$132<<2)|0);
   HEAPF32[$47>>2] = 1.0;
   $48 = (($n$132) + 1)|0;
   $exitcond58 = ($48|0)==($29|0);
   if ($exitcond58) {
    $n$1$lcssa = $29;
    break;
   } else {
    $n$132 = $48;
   }
  }
 } else {
  $n$1$lcssa = $n$0$lcssa;
 }
 $40 = ($n$1$lcssa|0)<($4|0);
 $41 = ($n$1$lcssa|0)<($L|0);
 $or$cond726 = $40 & $41;
 if ($or$cond726) {
  $42 = (+($10|0));
  $43 = (($n$1$lcssa) - ($4))|0;
  $44 = (($n$1$lcssa) - ($L))|0;
  $45 = ($43>>>0)>($44>>>0);
  $umax55 = $45 ? $43 : $44;
  $46 = (($n$1$lcssa) - ($umax55))|0;
  $i$128 = $10;$n$227 = $n$1$lcssa;
  while(1) {
   $51 = (+($i$128|0));
   $52 = $51 * 3.1415926535897931;
   $53 = $52 / $42;
   $54 = (+Math_cos((+$53)));
   $55 = $54 * 0.5;
   $56 = 0.5 - $55;
   $57 = $56;
   $58 = (($window) + ($n$227<<2)|0);
   HEAPF32[$58>>2] = $57;
   $59 = (($n$227) + 1)|0;
   $60 = (($i$128) + -1)|0;
   $exitcond56 = ($59|0)==($46|0);
   if ($exitcond56) {
    $n$2$lcssa = $46;
    break;
   } else {
    $i$128 = $60;$n$227 = $59;
   }
  }
 } else {
  $n$2$lcssa = $n$1$lcssa;
 }
 $49 = ($n$2$lcssa|0)<($6|0);
 $50 = ($n$2$lcssa|0)<($L|0);
 $or$cond822 = $49 & $50;
 if ($or$cond822) {
  $61 = (($n$2$lcssa) - ($6))|0;
  $62 = (($n$2$lcssa) - ($L))|0;
  $scevgep = (($window) + ($n$2$lcssa<<2)|0);
  $63 = (($n$2$lcssa) - ($6))|0;
  $64 = (($n$2$lcssa) - ($L))|0;
  $65 = ($63>>>0)>($64>>>0);
  $umax54 = $65 ? $63 : $64;
  $66 = Math_imul($umax54, -4)|0;
  _memset(($scevgep|0),0,($66|0))|0;
  $67 = ($61>>>0)>($62>>>0);
  $umax51 = $67 ? $61 : $62;
  $68 = (($n$2$lcssa) - ($umax51))|0;
  $n$3$lcssa = $68;
 } else {
  $n$3$lcssa = $n$2$lcssa;
 }
 $69 = (($14) + ($6))|0;
 $70 = ($n$3$lcssa|0)<($69|0);
 $71 = ($n$3$lcssa|0)<($L|0);
 $or$cond917 = $70 & $71;
 if ($or$cond917) {
  $72 = (+($14|0));
  $73 = (($n$3$lcssa) - ($14))|0;
  $74 = (($73) - ($6))|0;
  $75 = (($n$3$lcssa) - ($L))|0;
  $76 = ($74>>>0)>($75>>>0);
  $umax49 = $76 ? $74 : $75;
  $77 = (1 - ($umax49))|0;
  $i$219 = 1;$n$418 = $n$3$lcssa;
  while(1) {
   $87 = (+($i$219|0));
   $88 = $87 * 3.1415926535897931;
   $89 = $88 / $72;
   $90 = (+Math_cos((+$89)));
   $91 = $90 * 0.5;
   $92 = 0.5 - $91;
   $93 = $92;
   $94 = (($window) + ($n$418<<2)|0);
   HEAPF32[$94>>2] = $93;
   $95 = (($n$418) + 1)|0;
   $96 = (($i$219) + 1)|0;
   $exitcond50 = ($96|0)==($77|0);
   if ($exitcond50) {
    break;
   } else {
    $i$219 = $96;$n$418 = $95;
   }
  }
  $78 = (($n$3$lcssa) - ($umax49))|0;
  $n$4$lcssa = $78;
 } else {
  $n$4$lcssa = $n$3$lcssa;
 }
 $79 = (($L) - ($14))|0;
 $80 = ($n$4$lcssa|0)<($79|0);
 $81 = ($n$4$lcssa|0)<($L|0);
 $or$cond1014 = $80 & $81;
 if ($or$cond1014) {
  $82 = (($n$4$lcssa) + ($14))|0;
  $83 = (($82) - ($L))|0;
  $84 = (($n$4$lcssa) - ($L))|0;
  $85 = ($83>>>0)>($84>>>0);
  $umax = $85 ? $83 : $84;
  $86 = (($n$4$lcssa) - ($umax))|0;
  $n$515 = $n$4$lcssa;
  while(1) {
   $99 = (($window) + ($n$515<<2)|0);
   HEAPF32[$99>>2] = 1.0;
   $100 = (($n$515) + 1)|0;
   $exitcond48 = ($100|0)==($86|0);
   if ($exitcond48) {
    $n$5$lcssa = $86;
    break;
   } else {
    $n$515 = $100;
   }
  }
 } else {
  $n$5$lcssa = $n$4$lcssa;
 }
 $97 = ($n$5$lcssa|0)<($L|0);
 if (!($97)) {
  return;
 }
 $98 = (+($14|0));
 $i$313 = $14;$n$612 = $n$5$lcssa;
 while(1) {
  $101 = (+($i$313|0));
  $102 = $101 * 3.1415926535897931;
  $103 = $102 / $98;
  $104 = (+Math_cos((+$103)));
  $105 = $104 * 0.5;
  $106 = 0.5 - $105;
  $107 = $106;
  $108 = (($window) + ($n$612<<2)|0);
  HEAPF32[$108>>2] = $107;
  $109 = (($n$612) + 1)|0;
  $110 = (($i$313) + -1)|0;
  $exitcond = ($109|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $i$313 = $110;$n$612 = $109;
  }
 }
 return;
}
function _FLAC__window_welch($window,$L) {
 $window = $window|0;
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + -1)|0;
 $1 = (+($0|0));
 $2 = $1 * 0.5;
 $3 = ($L|0)<(1);
 if ($3) {
  return;
 } else {
  $n$01 = 0;
 }
 while(1) {
  $4 = (+($n$01|0));
  $5 = $4 - $2;
  $6 = $5 / $2;
  $7 = $6 * $6;
  $8 = 1.0 - $7;
  $9 = $8;
  $10 = (($window) + ($n$01<<2)|0);
  HEAPF32[$10>>2] = $9;
  $11 = (($n$01) + 1)|0;
  $exitcond = ($11|0)==($L|0);
  if ($exitcond) {
   break;
  } else {
   $n$01 = $11;
  }
 }
 return;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1524>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 1580;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (3751 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (3760 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (1584 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (1584 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (1584 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _lround($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_round($x));
 $1 = (~~(($0)));
 return ($1|0);
}
function _round($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = ($4>>>0)>(1074);
 do {
  if ($5) {
   $$0 = $x;
  } else {
   $6 = ($1|0)<(0);
   $7 = -$x;
   $$x = $6 ? $7 : $x;
   $8 = ($4>>>0)<(1022);
   if ($8) {
    $9 = $x * 0.0;
    $$0 = $9;
    break;
   }
   $10 = $$x + 4503599627370496.0;
   $11 = $10 + -4503599627370496.0;
   $12 = $11 - $$x;
   $13 = $12 > 0.5;
   if ($13) {
    $14 = $$x + $12;
    $15 = $14 + -1.0;
    $y$0 = $15;
   } else {
    $16 = !($12 <= -0.5);
    $17 = $$x + $12;
    if ($16) {
     $y$0 = $17;
    } else {
     $18 = $17 + 1.0;
     $y$0 = $18;
    }
   }
   $19 = -$y$0;
   $$y$0 = $6 ? $19 : $y$0;
   $$0 = $$y$0;
  }
 } while(0);
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((1552)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(1548)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(1548)>>2] = $14;
  }
  ___unlock(((1552)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 15]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[1576>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[1576>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((1552)|0));
   $$012 = HEAP32[(1548)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((1552)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[1524>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((12|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[1524>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((13|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 18;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $78 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $78 = $76;
        }
       }
       $79 = ($78>>>0)>(31);
       if ($79) {
        $81 = $78;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $78;$84 = $59;$87 = $$pre1$i27$pre;$91 = $78;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 31]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 31]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 15]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 15]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 15]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 15]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$36 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 15]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 15]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $46 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $37 = ($36|0)==(0);
        if ($37) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $36 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
         break;
        } else {
         $46 = $44;
        }
       }
       $47 = ($46>>>0)>(31);
       if ($47) {
        $49 = $46;
        label = 16;
       } else {
        $$0$i = $46;$51 = $27;$54 = $36;$58 = $46;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $36;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 15]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$36 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1840>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (1880 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (1880 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1840>>2] = $22;
     } else {
      $23 = HEAP32[(1856)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(1848)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (1880 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (1880 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[1840>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(1856)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(1848)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(1860)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (1880 + ($92<<2)|0);
      $94 = HEAP32[1840>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[1840>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (1880 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (1880 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(1856)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(1848)>>2] = $81;
     HEAP32[(1860)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(1844)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (2144 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(1856)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (2144 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(1844)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(1844)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(1856)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(1856)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(1856)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(1848)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(1860)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (1880 + ($229<<2)|0);
       $231 = HEAP32[1840>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[1840>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (1880 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (1880 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(1856)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(1848)>>2] = $rsize$0$i$lcssa;
      HEAP32[(1860)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(1844)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (2144 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (2144 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(1848)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(1856)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (2144 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(1844)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(1844)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(1856)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(1856)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(1856)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (1880 + ($424<<2)|0);
          $426 = HEAP32[1840>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[1840>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (1880 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (1880 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(1856)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (2144 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(1844)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(1844)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(1856)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(1856)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(1848)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(1860)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(1860)>>2] = $514;
   HEAP32[(1848)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(1848)>>2] = 0;
   HEAP32[(1860)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(1852)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(1852)>>2] = $528;
  $529 = HEAP32[(1864)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(1864)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[2312>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(2320)>>2] = $538;
    HEAP32[(2316)>>2] = $538;
    HEAP32[(2324)>>2] = -1;
    HEAP32[(2328)>>2] = -1;
    HEAP32[(2332)>>2] = 0;
    HEAP32[(2284)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[2312>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(2320)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(2280)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(2272)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(2284)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(1864)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (2288);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(1852)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(2316)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(2272)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(2280)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(2320)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(2284)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(2284)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(2272)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(2272)>>2] = $632;
  $633 = HEAP32[(2276)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(2276)>>2] = $632;
  }
  $635 = HEAP32[(1864)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(1856)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(1856)>>2] = $tbase$255$i;
    }
    HEAP32[(2288)>>2] = $tbase$255$i;
    HEAP32[(2292)>>2] = $tsize$254$i;
    HEAP32[(2300)>>2] = 0;
    $640 = HEAP32[2312>>2]|0;
    HEAP32[(1876)>>2] = $640;
    HEAP32[(1872)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (1880 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (1880 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (1880 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(1864)>>2] = $654;
    HEAP32[(1852)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(2328)>>2]|0;
    HEAP32[(1868)>>2] = $659;
   } else {
    $sp$084$i = (2288);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(1852)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(1864)>>2] = $684;
       HEAP32[(1852)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(2328)>>2]|0;
       HEAP32[(1868)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(1856)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(1856)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (2288);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (2288);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(1852)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(1852)>>2] = $730;
        HEAP32[(1864)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(1860)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(1848)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(1848)>>2] = $736;
         HEAP32[(1860)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (1880 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[1840>>2]|0;
            $763 = $762 & $761;
            HEAP32[1840>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (2144 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(1844)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(1844)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(1856)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(1856)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(1856)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (1880 + ($840<<2)|0);
         $842 = HEAP32[1840>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[1840>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (1880 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (1880 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(1856)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (2144 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(1844)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(1844)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(1856)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(1856)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (2288);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(1864)>>2] = $953;
    HEAP32[(1852)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(2328)>>2]|0;
    HEAP32[(1868)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(2288)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(2288)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(2288)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(2288)+12>>2]|0;
    HEAP32[(2288)>>2] = $tbase$255$i;
    HEAP32[(2292)>>2] = $tsize$254$i;
    HEAP32[(2300)>>2] = 0;
    HEAP32[(2296)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (1880 + ($977<<2)|0);
      $979 = HEAP32[1840>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[1840>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (1880 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (1880 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(1856)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (2144 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(1844)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(1844)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(1856)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(1856)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(1852)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(1852)>>2] = $1062;
   $1063 = HEAP32[(1864)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(1864)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(1856)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(1860)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(1848)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (1880 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[1840>>2]|0;
     $36 = $35 & $34;
     HEAP32[1840>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (2144 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(1844)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(1844)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(1856)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(1856)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(1856)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(1864)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(1852)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(1852)>>2] = $120;
   HEAP32[(1864)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(1860)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(1860)>>2] = 0;
   HEAP32[(1848)>>2] = 0;
   return;
  }
  $125 = HEAP32[(1860)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(1848)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(1848)>>2] = $128;
   HEAP32[(1860)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (1880 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(1856)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[1840>>2]|0;
     $152 = $151 & $150;
     HEAP32[1840>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(1856)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(1856)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(1856)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (2144 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(1844)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(1844)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(1856)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(1856)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(1856)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(1860)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(1848)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (1880 + ($233<<2)|0);
  $235 = HEAP32[1840>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[1840>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (1880 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (1880 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(1856)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (2144 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(1844)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(1844)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(1856)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(1856)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(1872)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(1872)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (2296);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(1872)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(1856)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(2320)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(1864)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(1852)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(1864)>>2] = $36;
  HEAP32[(1852)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(1860)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(1848)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(1848)>>2] = $storemerge21;
  HEAP32[(1860)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (1880 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[1840>>2]|0;
    $88 = $87 & $86;
    HEAP32[1840>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (2144 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(1844)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(1844)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(1856)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(1856)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(1856)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(1856)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(1860)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(1848)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (1880 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[1840>>2]|0;
     $32 = $31 & $30;
     HEAP32[1840>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (2144 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(1844)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(1844)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(1856)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(1856)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(1856)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(1856)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(1864)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(1852)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(1852)>>2] = $115;
   HEAP32[(1864)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(1860)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(1860)>>2] = 0;
   HEAP32[(1848)>>2] = 0;
   return;
  }
  $120 = HEAP32[(1860)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(1848)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(1848)>>2] = $123;
   HEAP32[(1860)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (1880 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[1840>>2]|0;
     $146 = $145 & $144;
     HEAP32[1840>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (2144 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(1844)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(1844)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(1856)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(1856)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(1856)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(1860)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(1848)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (1880 + ($224<<2)|0);
  $226 = HEAP32[1840>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[1840>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (1880 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (1880 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(1856)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (2144 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(1844)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(1844)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(1856)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(1856)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function jsCall_viiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&15](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function jsCall_vi_2(a1) {
  a1=a1|0;
  jsCall_vi(2,a1|0);
}



function jsCall_vi_3(a1) {
  a1=a1|0;
  jsCall_vi(3,a1|0);
}



function jsCall_vi_4(a1) {
  a1=a1|0;
  jsCall_vi(4,a1|0);
}



function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function jsCall_viii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(4,a1|0,a2|0,a3|0);
}



function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
}


function jsCall_iiiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(0,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(1,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(2,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(3,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(4,a1|0,a2|0,a3|0,a4|0)|0;
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function jsCall_iii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(2,a1|0,a2|0)|0;
}



function jsCall_iii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(3,a1|0,a2|0)|0;
}



function jsCall_iii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(4,a1|0,a2|0)|0;
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(4,a1|0,a2|0,a3|0,a4|0);
}


function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(1);
}
function b2(p0) {
 p0 = p0|0; abort(2);
}
function b3(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(3);return 0;
}
function b4(p0) {
 p0 = p0|0; abort(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5);
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(8);return 0;
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,jsCall_iiii_2,b0,jsCall_iiii_3,b0,jsCall_iiii_4,b0,___stdio_read,___stdio_seek,___stdout_write,_read_callback_,_FLAC__fixed_compute_best_predictor,_FLAC__fixed_compute_best_predictor_wide,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiiiii = [b1,b1,jsCall_viiiiiii_0,b1,jsCall_viiiiiii_1,b1,jsCall_viiiiiii_2,b1,jsCall_viiiiiii_3,b1,jsCall_viiiiiii_4,b1,_precompute_partition_info_sums_,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,jsCall_vi_0,b2,jsCall_vi_1,b2,jsCall_vi_2,b2,jsCall_vi_3,b2,jsCall_vi_4,b2,_cleanup521,_cleanup526,b2,b2];
var FUNCTION_TABLE_iiiiiii = [b3,b3,jsCall_iiiiiii_0,b3,jsCall_iiiiiii_1,b3,jsCall_iiiiiii_2,b3,jsCall_iiiiiii_3,b3,jsCall_iiiiiii_4,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,jsCall_ii_0,b4,jsCall_ii_1,b4,jsCall_ii_2,b4,jsCall_ii_3,b4,jsCall_ii_4,b4,___stdio_close,b4,b4,b4];
var FUNCTION_TABLE_viii = [b5,b5,jsCall_viii_0,b5,jsCall_viii_1,b5,jsCall_viii_2,b5,jsCall_viii_3,b5,jsCall_viii_4,b5,_verify_metadata_callback_,_verify_error_callback_,b5,b5];
var FUNCTION_TABLE_iiiii = [b6,b6,jsCall_iiiii_0,b6,jsCall_iiiii_1,b6,jsCall_iiiii_2,b6,jsCall_iiiii_3,b6,jsCall_iiiii_4,b6,_verify_read_callback_,_verify_write_callback_,b6,b6];
var FUNCTION_TABLE_viiiiii = [b7,b7,jsCall_viiiiii_0,b7,jsCall_viiiiii_1,b7,jsCall_viiiiii_2,b7,jsCall_viiiiii_3,b7,jsCall_viiiiii_4,b7,_FLAC__lpc_restore_signal,_FLAC__lpc_restore_signal_wide,_FLAC__lpc_compute_residual_from_qlp_coefficients,_FLAC__lpc_compute_residual_from_qlp_coefficients_wide];
var FUNCTION_TABLE_iii = [b8,b8,jsCall_iii_0,b8,jsCall_iii_1,b8,jsCall_iii_2,b8,jsCall_iii_3,b8,jsCall_iii_4,b8,_seekpoint_compare_,b8,b8,b8];
var FUNCTION_TABLE_viiii = [b9,b9,jsCall_viiii_0,b9,jsCall_viiii_1,b9,jsCall_viiii_2,b9,jsCall_viiii_3,b9,jsCall_viiii_4,b9,_FLAC__lpc_compute_autocorrelation,b9,b9,b9];

  return { _FLAC__stream_decoder_delete: _FLAC__stream_decoder_delete, _FLAC__stream_encoder_set_blocksize: _FLAC__stream_encoder_set_blocksize, _FLAC__stream_encoder_set_sample_rate: _FLAC__stream_encoder_set_sample_rate, _FLAC__stream_encoder_set_bits_per_sample: _FLAC__stream_encoder_set_bits_per_sample, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _FLAC__stream_encoder_init_stream: _FLAC__stream_encoder_init_stream, _FLAC__stream_decoder_reset: _FLAC__stream_decoder_reset, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, _FLAC__stream_encoder_set_verify: _FLAC__stream_encoder_set_verify, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _FLAC__stream_decoder_get_md5_checking: _FLAC__stream_decoder_get_md5_checking, _FLAC__stream_decoder_set_md5_checking: _FLAC__stream_decoder_set_md5_checking, _i64Subtract: _i64Subtract, _i64Add: _i64Add, _FLAC__stream_encoder_set_channels: _FLAC__stream_encoder_set_channels, _FLAC__stream_decoder_finish: _FLAC__stream_decoder_finish, _FLAC__stream_decoder_process_single: _FLAC__stream_decoder_process_single, _FLAC__stream_decoder_process_until_end_of_stream: _FLAC__stream_decoder_process_until_end_of_stream, _FLAC__stream_decoder_init_stream: _FLAC__stream_decoder_init_stream, _FLAC__stream_decoder_process_until_end_of_metadata: _FLAC__stream_decoder_process_until_end_of_metadata, _free: _free, _FLAC__stream_encoder_delete: _FLAC__stream_encoder_delete, _FLAC__stream_encoder_set_total_samples_estimate: _FLAC__stream_encoder_set_total_samples_estimate, ___errno_location: ___errno_location, _FLAC__stream_encoder_process_interleaved: _FLAC__stream_encoder_process_interleaved, _FLAC__stream_decoder_new: _FLAC__stream_decoder_new, _FLAC__stream_encoder_get_state: _FLAC__stream_encoder_get_state, _FLAC__stream_encoder_finish: _FLAC__stream_encoder_finish, _memmove: _memmove, _FLAC__stream_decoder_get_state: _FLAC__stream_decoder_get_state, _malloc: _malloc, _FLAC__stream_encoder_set_compression_level: _FLAC__stream_encoder_set_compression_level, _FLAC__stream_encoder_new: _FLAC__stream_encoder_new, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_vi: dynCall_vi, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _FLAC__stream_decoder_delete = Module["_FLAC__stream_decoder_delete"] = asm["_FLAC__stream_decoder_delete"];
var _FLAC__stream_encoder_set_blocksize = Module["_FLAC__stream_encoder_set_blocksize"] = asm["_FLAC__stream_encoder_set_blocksize"];
var _FLAC__stream_encoder_set_sample_rate = Module["_FLAC__stream_encoder_set_sample_rate"] = asm["_FLAC__stream_encoder_set_sample_rate"];
var _FLAC__stream_encoder_set_bits_per_sample = Module["_FLAC__stream_encoder_set_bits_per_sample"] = asm["_FLAC__stream_encoder_set_bits_per_sample"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _FLAC__stream_encoder_init_stream = Module["_FLAC__stream_encoder_init_stream"] = asm["_FLAC__stream_encoder_init_stream"];
var _FLAC__stream_decoder_reset = Module["_FLAC__stream_decoder_reset"] = asm["_FLAC__stream_decoder_reset"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _FLAC__stream_encoder_set_verify = Module["_FLAC__stream_encoder_set_verify"] = asm["_FLAC__stream_encoder_set_verify"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _FLAC__stream_decoder_get_md5_checking = Module["_FLAC__stream_decoder_get_md5_checking"] = asm["_FLAC__stream_decoder_get_md5_checking"];
var _FLAC__stream_decoder_set_md5_checking = Module["_FLAC__stream_decoder_set_md5_checking"] = asm["_FLAC__stream_decoder_set_md5_checking"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _FLAC__stream_encoder_set_channels = Module["_FLAC__stream_encoder_set_channels"] = asm["_FLAC__stream_encoder_set_channels"];
var _FLAC__stream_decoder_finish = Module["_FLAC__stream_decoder_finish"] = asm["_FLAC__stream_decoder_finish"];
var _FLAC__stream_decoder_process_single = Module["_FLAC__stream_decoder_process_single"] = asm["_FLAC__stream_decoder_process_single"];
var _FLAC__stream_decoder_process_until_end_of_stream = Module["_FLAC__stream_decoder_process_until_end_of_stream"] = asm["_FLAC__stream_decoder_process_until_end_of_stream"];
var _FLAC__stream_decoder_init_stream = Module["_FLAC__stream_decoder_init_stream"] = asm["_FLAC__stream_decoder_init_stream"];
var _FLAC__stream_decoder_process_until_end_of_metadata = Module["_FLAC__stream_decoder_process_until_end_of_metadata"] = asm["_FLAC__stream_decoder_process_until_end_of_metadata"];
var _FLAC__stream_decoder_new = Module["_FLAC__stream_decoder_new"] = asm["_FLAC__stream_decoder_new"];
var _FLAC__stream_encoder_delete = Module["_FLAC__stream_encoder_delete"] = asm["_FLAC__stream_encoder_delete"];
var _FLAC__stream_encoder_set_total_samples_estimate = Module["_FLAC__stream_encoder_set_total_samples_estimate"] = asm["_FLAC__stream_encoder_set_total_samples_estimate"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _FLAC__stream_encoder_process_interleaved = Module["_FLAC__stream_encoder_process_interleaved"] = asm["_FLAC__stream_encoder_process_interleaved"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _FLAC__stream_encoder_get_state = Module["_FLAC__stream_encoder_get_state"] = asm["_FLAC__stream_encoder_get_state"];
var _FLAC__stream_encoder_finish = Module["_FLAC__stream_encoder_finish"] = asm["_FLAC__stream_encoder_finish"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _FLAC__stream_decoder_get_state = Module["_FLAC__stream_decoder_get_state"] = asm["_FLAC__stream_decoder_get_state"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _FLAC__stream_encoder_set_compression_level = Module["_FLAC__stream_encoder_set_compression_level"] = asm["_FLAC__stream_encoder_set_compression_level"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _FLAC__stream_encoder_new = Module["_FLAC__stream_encoder_new"] = asm["_FLAC__stream_encoder_new"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//libflac function wrappers

/**
 * HELPER read/extract stream info meta-data from frame header / meta-data
 * @param {POINTER} p_streaminfo
 * @returns StreamInfo
 */
function _readStreamInfo(p_streaminfo){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_STREAMINFO (0)

	/*
	typedef struct {
		unsigned min_blocksize, max_blocksize;
		unsigned min_framesize, max_framesize;
		unsigned sample_rate;
		unsigned channels;
		unsigned bits_per_sample;
		FLAC__uint64 total_samples;
		FLAC__byte md5sum[16];
	} FLAC__StreamMetadata_StreamInfo;
	 */

	var min_blocksize = Module.getValue(p_streaminfo,'i32');//4 bytes
	var max_blocksize = Module.getValue(p_streaminfo+4,'i32');//4 bytes

	var min_framesize = Module.getValue(p_streaminfo+8,'i32');//4 bytes
	var max_framesize = Module.getValue(p_streaminfo+12,'i32');//4 bytes

	var sample_rate = Module.getValue(p_streaminfo+16,'i32');//4 bytes
	var channels = Module.getValue(p_streaminfo+20,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_streaminfo+24,'i32');//4 bytes

	//FIXME should be at p_streaminfo+28, but seems to be at p_streaminfo+32
	var total_samples = Module.getValue(p_streaminfo+32,'i64');//8 bytes

	var md5sum = _readMd5(p_streaminfo+40);//16 bytes

	return {
		min_blocksize: min_blocksize,
		max_blocksize: max_blocksize,
		min_framesize: min_framesize,
		max_framesize: max_framesize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		total_samples: total_samples,
		md5sum: md5sum
	};
}

/**
 * read MD5 checksum
 * @param {POINTER} p_md5
 * @returns {String} as HEX string representation
 */
function _readMd5(p_md5){
	
	var sb = [], v, str;
	for(var i=0, len = 16; i < len; ++i){
		v = Module.getValue(p_md5+i,'i8');//1 byte
		if(v < 0) v = 256 + v;//<- "convert" to uint8, if necessary
		str = v.toString(16);
		if(str.length < 2) str = '0' + str;//<- add padding, if necessary
		sb.push(str);
	}
	return sb.join('');
}

/**
 * HELPER: read frame data
 * 
 * @param {POINTER} p_frame
 * @returns FrameHeader
 */
function _readFrameHdr(p_frame){

	/*
	typedef struct {
		unsigned blocksize;
		unsigned sample_rate;
		unsigned channels;
		FLAC__ChannelAssignment channel_assignment;
		unsigned bits_per_sample;
		FLAC__FrameNumberType number_type;
		union {
			FLAC__uint32 frame_number;
			FLAC__uint64 sample_number;
		} number;
		FLAC__uint8 crc;
	} FLAC__FrameHeader;
	 */

	var blocksize = Module.getValue(p_frame,'i32');//4 bytes
	var sample_rate = Module.getValue(p_frame+4,'i32');//4 bytes
	var channels = Module.getValue(p_frame+8,'i32');//4 bytes

	// 0: FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	independent channels
	// 1: FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE 	left+side stereo
	// 2: FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE 	right+side stereo
	// 3: FLAC__CHANNEL_ASSIGNMENT_MID_SIDE 	mid+side stereo 
	var channel_assignment = Module.getValue(p_frame+12,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_frame+16,'i32');

	// 0: FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER 	number contains the frame number
	// 1: FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	number contains the sample number of first sample in frame 
	var number_type = Module.getValue(p_frame+20,'i32');

	// union {} number: The frame number or sample number of first sample in frame; use the number_type value to determine which to use. 
	var frame_number = Module.getValue(p_frame+24,'i32');
	var sample_number = Module.getValue(p_frame+24,'i64');

	var number = number_type === 0? frame_number : sample_number;

	var crc = Module.getValue(p_frame+36,'i8');

	//TODO read subframe
	//TODO read footer

	return {
		blocksize: blocksize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		number: number,
		crc: crc
	};
}


/**
 * HELPER workaround / fix for returned write-buffer when decoding FLAC
 * 
 * @param {number} heapOffset
 * 				the offset for the data on HEAPU8
 * @param {Uint8Array} newBuffer
 * 				the target buffer into which the data should be written -- with the correct (block) size
 */
function __fix_write_buffer(heapOffset, newBuffer){

	var dv = new DataView(newBuffer.buffer);
	var targetSize = newBuffer.length;

	var increase = 2;//<- for FIX/workaround
	var buffer = HEAPU8.subarray(heapOffset, heapOffset + targetSize * increase);

	//FIXME for some reason, the bytes values 0 (min) and 255 (max) get "triplicated"
	//		HACK for now: remove/"over-read" 2 of the values, for each of these triplets
	var jump, isPrint;
	for(var i=0, j=0, size = buffer.length; i < size && j < targetSize; ++i, ++j){

		if(i === size-1 && j < targetSize - 1){
			//increase heap-view, in order to read more (valid) data into the target buffer
			buffer = HEAPU8.subarray(heapOffset, size + targetSize);
			size = buffer.length;
		}

		if(buffer[i] === 0 || buffer[i] === 255){

			jump = 0;
			isPrint = true;

			if(i + 1 < size && buffer[i] === buffer[i+1]){

				++jump;

				if(i + 2 < size){
					if(buffer[i] === buffer[i+2]){
						++jump;
					} else {
						//if only 2 occurrences: ignore value
						isPrint = false;
					}
				}
			}//else: if single value: do print (an do not jump)


			if(isPrint){
				dv.setUint8(j, buffer[i]);
				if(jump === 2 && i + 3 < size && buffer[i] === buffer[i+3]){
					//special case for reducing triples in case the following value is also the same
					// (ie. something like: x x x |+ x)
					// -> then: do write the value one more time, and jump one further ahead
					// i.e. if value occurs 4 times in a row, write 2 values
					++jump;
					dv.setUint8(++j, buffer[i]);
				}
			} else {
				--j;
			}

			i += jump;//<- apply jump, if there were value duplications

		} else {
			dv.setUint8(j, buffer[i]);
		}

	}
}


// FLAC__STREAM_DECODER_READ_STATUS_CONTINUE     	The read was OK and decoding can continue.
// FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM   The read was attempted while at the end of the stream. Note that the client must only return this value when the read callback was called when already at the end of the stream. Otherwise, if the read itself moves to the end of the stream, the client should still return the data and FLAC__STREAM_DECODER_READ_STATUS_CONTINUE, and then on the next read callback it should return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM with a byte count of 0.
// FLAC__STREAM_DECODER_READ_STATUS_ABORT       	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1;
var FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2;

// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE   The write was OK and decoding can continue.
// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1;

//FLAC__STREAM_DECODER_INIT_STATUS_OK						Initialization was successful.
//FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER 	The library was not compiled with support for the given container format.
//FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS 			A required callback was not supplied.
//FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR 	An error occurred allocating memory.
//FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE 		fopen() failed in FLAC__stream_decoder_init_file() or FLAC__stream_decoder_init_ogg_file().
//FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED 		FLAC__stream_decoder_init_*() was called when the decoder was already initialized, usually because FLAC__stream_decoder_finish() was not called.
FLAC__STREAM_DECODER_INIT_STATUS_OK	= 0;
FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	= 1;
FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	= 2;
FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3;
FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4;
FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5;

//FLAC__STREAM_ENCODER_INIT_STATUS_OK									Initialization was successful.
//FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR						General failure to set up encoder; call FLAC__stream_encoder_get_state() for cause.
//FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER				The library was not compiled with support for the given container format.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS					A required callback was not supplied.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS			The encoder has an invalid setting for number of channels.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE				The encoder has an invalid setting for bits-per-sample. FLAC supports 4-32 bps but the reference encoder currently supports only up to 24 bps.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE					The encoder has an invalid setting for the input sample rate.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE					The encoder has an invalid setting for the block size.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER				The encoder has an invalid setting for the maximum LPC order.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION			The encoder has an invalid setting for the precision of the quantized linear predictor coefficients.
//FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER	The specified block size is less than the maximum LPC order.
//FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE						The encoder is bound to the Subset but other settings violate it.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA						The metadata input to the encoder is invalid, in one of the following ways:
//																	      FLAC__stream_encoder_set_metadata() was called with a null pointer but a block count > 0
//																	      One of the metadata blocks contains an undefined type
//																	      It contains an illegal CUESHEET as checked by FLAC__format_cuesheet_is_legal()
//																	      It contains an illegal SEEKTABLE as checked by FLAC__format_seektable_is_legal()
//																	      It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block
//FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED					FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because FLAC__stream_encoder_finish() was not called.
FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0;
FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR = 1;
FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 2;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS = 3;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS = 4;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE = 5;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE = 6;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE = 7;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER = 8;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION = 9;
FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER = 10;
FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE = 11;
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA = 12;
FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED = 13;

//FLAC__STREAM_ENCODER_WRITE_STATUS_OK 				The write was OK and encoding can continue.
//FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR		An unrecoverable error occurred. The encoder will return from the process call
FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0;
FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR = 1;


/**
 * Map for encoder/decoder callback functions
 * 
 * <pre>[ID] -> {function_type: FUNCTION}</pre>
 *  
 * type: {[id: number]: {[callback_type: string]: function}}
 * @private
 */
var coders = {};

/**
 * Get a registered callback for the encoder / decoder instance
 * 
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @returns {Function} the callback (or VOID if there is no callback registered)
 * @private
 */
function getCallback(p_coder, func_type){
	if(coders[p_coder]){
		return coders[p_coder][func_type];
	}
}

/**
 * Register a callback for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 * 
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @param {Function} callback
 * 			the callback function
 * @private
 */
function setCallback(p_coder, func_type, callback){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder][func_type] = callback;
}

//(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data)
// -> FLAC__StreamEncoderWriteStatus
var enc_write_fn_ptr = Runtime.addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
	var arraybuf = new ArrayBuffer(buffer);
	var retdata = new Uint8Array(bytes);
	retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
	var write_callback_fn = getCallback(p_encoder, 'write');
	try{
		write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
	} catch(err) {
		console.error(err);
		return FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR;
	}
	return FLAC__STREAM_ENCODER_WRITE_STATUS_OK
});

//(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
// -> FLAC__StreamDecoderReadStatus
var dec_read_fn_ptr = Runtime.addFunction(function(p_decoder, buffer, bytes, p_client_data){
	//FLAC__StreamDecoderReadCallback, see https://xiph.org/flac/api/group__flac__stream__decoder.html#ga7a5f593b9bc2d163884348b48c4285fd

	var len = Module.getValue(bytes, 'i32');

	if(len === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}
	
	var read_callback_fn = getCallback(p_decoder, 'read');

	//callback must return object with: {buffer: ArrayBuffer, readDataLength: number, error: boolean}
	var readResult = read_callback_fn(len, p_client_data);
	//in case of END_OF_STREAM or an error, readResult.readDataLength must be returned with 0

	var readLen = readResult.readDataLength;
	Module.setValue(bytes, readLen, 'i32');

	if(readResult.error){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	if(readLen === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
	}

	var readBuf = readResult.buffer;

	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, buffer, readLen);
	dataHeap.set(new Uint8Array(readBuf));

	return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
});

//(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 *const buffer[], void *client_data)
// -> FLAC__StreamDecoderWriteStatus
var dec_write_fn_ptr = Runtime.addFunction(function(p_decoder, p_frame, p_buffer, p_client_data){

	// var dec = Module.getValue(p_decoder,'i32');
	// var clientData = Module.getValue(p_client_data,'i32');

	var frameInfo = _readFrameHdr(p_frame);

//	console.log(frameInfo);//DEBUG

	var channels = frameInfo.channels;
	var block_size = frameInfo.blocksize * (frameInfo.bitsPerSample / 8);

	var data = [];//<- array for the data of each channel
	var bufferOffset, heapView, _buffer;
	
	for(var i=0; i < channels; ++i){
		
		bufferOffset = Module.getValue(p_buffer + (i*4),'i32');
		
		_buffer = new Uint8Array(block_size);
		//FIXME HACK for "strange" data (see helper function __fix_write_buffer)
		__fix_write_buffer(bufferOffset, _buffer);
		
		data.push(_buffer.subarray(0, block_size));
	}

	var write_callback_fn = getCallback(p_decoder, 'write');
	write_callback_fn(data, frameInfo);//, clientData);

	// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	The write was OK and decoding can continue.
	// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.

	return FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE;
});



//(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)
// -> void
var dec_error_fn_ptr = Runtime.addFunction(function(p_decoder, err, p_client_data){
		
	//err:
	// FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC         An error in the stream caused the decoder to lose synchronization.
	// FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER       The decoder encountered a corrupted frame header.
	// FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH   The frame's data did not match the CRC in the footer.
	// FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM   The decoder encountered reserved fields in use in the stream.
	var msg;
	switch(err){
	case 0:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC';
		break;
	case 1:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER';
		break;
	case 2:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH';
		break;
	case 3:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM';
		break;
	default:
		msg = 'FLAC__STREAM_DECODER_ERROR__UNKNOWN__';//<- this should never happen
	}
	
	var error_callback_fn = getCallback(p_decoder, 'error');
	error_callback_fn(err, msg, p_client_data);
});

//(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
//(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
var metadata_fn_ptr = Runtime.addFunction(function(p_coder, p_metadata, p_client_data){
	/*
	 typedef struct {
		FLAC__MetadataType type;
		FLAC__bool is_last;
		unsigned length;
		union {
			FLAC__StreamMetadata_StreamInfo stream_info;
			FLAC__StreamMetadata_Padding padding;
			FLAC__StreamMetadata_Application application;
			FLAC__StreamMetadata_SeekTable seek_table;
			FLAC__StreamMetadata_VorbisComment vorbis_comment;
			FLAC__StreamMetadata_CueSheet cue_sheet;
			FLAC__StreamMetadata_Picture picture;
			FLAC__StreamMetadata_Unknown unknown;
		} data;
	} FLAC__StreamMetadata;
	 */

	/*
	FLAC__METADATA_TYPE_STREAMINFO 		STREAMINFO block
	FLAC__METADATA_TYPE_PADDING 		PADDING block
	FLAC__METADATA_TYPE_APPLICATION 	APPLICATION block
	FLAC__METADATA_TYPE_SEEKTABLE 		SEEKTABLE block
	FLAC__METADATA_TYPE_VORBIS_COMMENT 	VORBISCOMMENT block (a.k.a. FLAC tags)
	FLAC__METADATA_TYPE_CUESHEET 		CUESHEET block
	FLAC__METADATA_TYPE_PICTURE 		PICTURE block
	FLAC__METADATA_TYPE_UNDEFINED 		marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	FLAC__MAX_METADATA_TYPE 			No type will ever be greater than this. There is not enough room in the protocol block. 
	 */

	var type = Module.getValue(p_metadata,'i32');//4 bytes
	var is_last = Module.getValue(p_metadata+4,'i32');//4 bytes
	var length = Module.getValue(p_metadata+8,'i64');//8 bytes

	var metadata_callback_fn = getCallback(p_coder, 'metadata');
	var meta_data;
	if(type === 0){// === FLAC__METADATA_TYPE_STREAMINFO
		meta_data = _readStreamInfo(p_metadata+16);

		metadata_callback_fn(meta_data);
	}
	//TODO handle other meta data too
	
});

/////////////////////////////////////    export / public: /////////////////////////////////////////////
/**
 * The <code>Flac</code> module that provides functionality 
 * for encoding WAV/PCM audio to Flac and decoding Flac to PCM.
 * 
 * @see https://xiph.org/flac/api/group__flac__stream__encoder.html
 * @see https://xiph.org/flac/api/group__flac__stream__decoder.html
 * 
 * @class Flac
 * @namespace Flac
 */
var _exported = {
	_module: Module,//internal: reference to Flac module 
	_clear_enc_cb: function(enc_ptr){//internal function: remove reference to encoder instance and its callbacks
		delete coders[enc_ptr];
	},
	_clear_dec_cb: function(dec_ptr){//internal function: remove reference to decoder instance and its callbacks
		delete coders[dec_ptr];
	},
	/**
	 * Returns if Flac has been initialized / is ready to be used.
	 * 
	 * @returns {boolean} true, if Flac is ready to be used
	 * 
	 * @memberOf Flac#
	 */
	isReady: function() { return _flac_ready; },
	/**
	 * Callback that gets called, when asynchronous initialization has finished.
	 * 
	 * Note that this function is not called again, after #isReady() is TRUE
	 * 
	 * @memberOf Flac#
	 * @function
	 * @example
	 *  if(!Flac.isReady()){
	 *    Flac.onready = function(){
	 *       //gets executed when library becomes ready...
	 *    };
	 *  }
	 */
	onready: void(0),
	
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_verify: Module.cwrap('FLAC__stream_encoder_set_verify', 'number', [ 'number', 'number' ]),
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_blocksize: Module.cwrap('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number']),
/* 

TODO export other encoder API functions?:

FLAC__StreamEncoder * 	FLAC__stream_encoder_new (void)

FLAC__bool 	FLAC__stream_encoder_set_channels (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_bits_per_sample (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_sample_rate (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_do_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)
 
FLAC__bool 	FLAC__stream_encoder_set_loose_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)
 
FLAC__bool 	FLAC__stream_encoder_set_apodization (FLAC__StreamEncoder *encoder, const char *specification)
 
FLAC__bool 	FLAC__stream_encoder_set_max_lpc_order (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_qlp_coeff_precision (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_do_qlp_coeff_prec_search (FLAC__StreamEncoder *encoder, FLAC__bool value)
 
FLAC__bool 	FLAC__stream_encoder_set_do_escape_coding (FLAC__StreamEncoder *encoder, FLAC__bool value)
 
FLAC__bool 	FLAC__stream_encoder_set_do_exhaustive_model_search (FLAC__StreamEncoder *encoder, FLAC__bool value)
 
FLAC__bool 	FLAC__stream_encoder_set_min_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_max_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)
 
FLAC__bool 	FLAC__stream_encoder_set_rice_parameter_search_dist (FLAC__StreamEncoder *encoder, unsigned value)  


FLAC__StreamDecoderState 	FLAC__stream_encoder_get_verify_decoder_state (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_verify (const FLAC__StreamEncoder *encoder)
 
FLAC__bool 	FLAC__stream_encoder_get_streamable_subset (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_channels (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_bits_per_sample (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_sample_rate (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_blocksize (const FLAC__StreamEncoder *encoder)
 
FLAC__bool 	FLAC__stream_encoder_get_do_mid_side_stereo (const FLAC__StreamEncoder *encoder)
 
FLAC__bool 	FLAC__stream_encoder_get_loose_mid_side_stereo (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_max_lpc_order (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_qlp_coeff_precision (const FLAC__StreamEncoder *encoder)
 
FLAC__bool 	FLAC__stream_encoder_get_do_qlp_coeff_prec_search (const FLAC__StreamEncoder *encoder)
 
FLAC__bool 	FLAC__stream_encoder_get_do_escape_coding (const FLAC__StreamEncoder *encoder)
 
FLAC__bool 	FLAC__stream_encoder_get_do_exhaustive_model_search (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_min_residual_partition_order (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_max_residual_partition_order (const FLAC__StreamEncoder *encoder)
 
unsigned 	FLAC__stream_encoder_get_rice_parameter_search_dist (const FLAC__StreamEncoder *encoder)
 
FLAC__uint64 	FLAC__stream_encoder_get_total_samples_estimate (const FLAC__StreamEncoder *encoder)



TODO export other decoder API functions?:

FLAC__StreamDecoder * 	FLAC__stream_decoder_new (void)

FLAC__bool 	FLAC__stream_decoder_set_md5_checking (FLAC__StreamDecoder *decoder, FLAC__bool value)
 
FLAC__bool 	FLAC__stream_decoder_set_metadata_respond (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)
 
FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])
 
FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_all (FLAC__StreamDecoder *decoder)
 
FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)
 
FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])
 
FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_all (FLAC__StreamDecoder *decoder)

 
const char * 	FLAC__stream_decoder_get_resolved_state_string (const FLAC__StreamDecoder *decoder)
 
FLAC__uint64 	FLAC__stream_decoder_get_total_samples (const FLAC__StreamDecoder *decoder)
 
unsigned 	FLAC__stream_decoder_get_channels (const FLAC__StreamDecoder *decoder)
 
unsigned 	FLAC__stream_decoder_get_bits_per_sample (const FLAC__StreamDecoder *decoder)
 
unsigned 	FLAC__stream_decoder_get_sample_rate (const FLAC__StreamDecoder *decoder)
 
unsigned 	FLAC__stream_decoder_get_blocksize (const FLAC__StreamDecoder *decoder)


FLAC__bool 	FLAC__stream_decoder_flush (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_skip_single_frame (FLAC__StreamDecoder *decoder)

 */

	/**
	 * Create an encoder.
	 * 
	 * @param {number} sample_rate
	 * 					the sample rate of the input PCM data
	 * @param {number} channels
	 * 					the number of channels of the input PCM data
	 * @param {number} bps
	 * 					bits per sample of the input PCM data
	 * @param {number} compression_level
	 * 					the desired Flac compression level: [0, 8]
	 * @param {number} [total_samples] OPTIONAL
	 * 					the number of total samples of the input PCM data:<br>
	 * 					 Sets an estimate of the total samples that will be encoded.
	 * 					 This is merely an estimate and may be set to 0 if unknown.
	 * 					 This value will be written to the STREAMINFO block before encoding,
	 * 					 and can remove the need for the caller to rewrite the value later if
	 * 					 the value is known before encoding.<br>
	 * 					If specified, the it will be written into metadata of the FLAC header.<br>
	 * 					DEFAULT: 0 (i.e. unknown number of samples)
	 * @param {boolean} [is_verify] OPTIONAL
	 * 					enable/disable checksum verification during encoding<br>
	 * 					DEFAULT: true<br>
	 * 					NOTE: this argument is positional (i.e. total_samples must also be given)
	 * @param {number} [block_size] OPTIONAL
	 * 					the number of samples to use per frame.<br>
	 * 					DEFAULT: 0 (i.e. encoder sets block size automatically)
	 * 					NOTE: this argument is positional (i.e. total_samples and is_verify must also be given)
	 * 
	 * 
	 * @returns {number} the ID of the created encoder instance (or 0, if there was an error)
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_encoder: function(sample_rate, channels, bps, compression_level, total_samples, is_verify, block_size){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		total_samples = typeof total_samples === 'number'? total_samples : 0;
		block_size = typeof block_size === 'number'? block_size : 0;
		var ok = true;
		var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number'], [ encoder, block_size ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
		if (ok){
			return encoder;
		}
		return 0;
	},
	/** @deprecated use {@link #create_libflac_encoder} instead */
	init_libflac_encoder: function(){ return this.create_libflac_encoder.apply(this, arguments); },

	/**
	 * Create a decoder.
	 * 
	 * @param {boolean} [is_verify]
	 * 				enable/disable checksum verification during decoding<br>
	 * 				DEFAULT: true
	 * 
	 * @returns {number} the ID of the created decoder instance (or 0, if there was an error)
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_decoder: function(is_verify){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		var ok = true;
		var decoder = Module.ccall('FLAC__stream_decoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
		if (ok){
			return decoder;
		}
		return 0;
	},
	/** @deprecated use {@link #create_libflac_decoder} instead */
	init_libflac_decoder: function(){ return this.create_libflac_decoder.apply(this, arguments); },
	
	/**
	 * Initialize the decoder.
	 * 
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 * 
	 * @param {Function} write_callback_fn
	 * 				the callback for writing the encoded Flac data:
	 * 				<pre>
	 * 				write_callback_fn(data: Uint8Array, numberOfBytes: Number, samples: Number, currentFrame: Number)
	 * 
	 * 				data: the encoded Flac data
	 * 				numberOfBytes: the number of bytes in data
	 * 				samples: the number of samples encoded in data
	 * 				currentFrame: the number of the (current) encoded frame in data
	 * 				</pre>
	 * 
	 * @param {Function} [metadata_callback_fn] OPTIONAL
	 * 				the callback for the metadata of the encoded Flac data:
	 * 				<pre>
	 * 				metadata_callback_fn(metadata: StreamMetadata)
	 * 
	 * 				metadata.min_blocksize (Number): the minimal block size (bytes)
	 * 				metadata.max_blocksize (Number): the maximal block size (bytes) 
	 * 				metadata.min_framesize (Number): the minimal frame size (bytes)
	 * 				metadata.max_framesize (Number): the maximal frame size (bytes)
	 * 				metadata.sampleRate (Number): the sample rate (Hz)
	 * 				metadata.channels (Number): the number of channels
	 * 				metadata.bitsPerSample (Number): bits per sample
	 * 				metadata.total_samples (Number): the total number of (decoded) samples
	 * 				metadata.md5sum (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	init_encoder_stream: function(encoder, write_callback_fn, metadata_callback_fn, client_data){
		
		client_data = client_data|0;
		
		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(encoder, 'write', write_callback_fn);
		
		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(encoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}
		
		var init_status = Module.ccall(
				'FLAC__stream_encoder_init_stream', 'number',
				['number', 'number', 'number', 'number', 'number', 'number'],
				[
				 	encoder,
				 	enc_write_fn_ptr,
				 	0,//	FLAC__StreamEncoderSeekCallback 
				 	0,//	FLAC__StreamEncoderTellCallback 
				 	__metadata_callback_fn_ptr,
				 	client_data
				]
		);
		
		return init_status;
	},
	
	/**
	 * Initialize the decoder.
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @param {Function} read_callback_fn
	 * 				the callback for reading the Flac data that should get decoded:
	 * 				<pre>
	 * 				read_callback_fn(numberOfBytes: Number) : {buffer: ArrayBuffer, readDataLength: number, error: boolean}
	 * 				
	 * 				numberOfBytes: the maximal number of bytes that the read callback can return
	 * 
	 * 				RETURN.buffer: a TypedArray (e.g. Uint8Array) with the read data
	 * 				RETURN.readDataLength: the number of read data bytes. A number of 0 (zero) indicates that the end-of-stream is reached.
	 * 				RETURN.error: TRUE indicates that an error occurs (decoding will be aborted)
	 * 				</pre>
	 * 
	 * @param {Function} write_callback_fn
	 * 				the callback for writing the decoded data:
	 * 				<pre>
	 * 				write_callback_fn(data: TypedArray, frameInfo: Metadata)
	 * 
	 * 				data: the decoded PCM data as Uint8Array
	 * 				frameInfo: the metadata information for the decoded data with
	 * 				frameInfo.blocksize (Number): the block size (bytes)
	 * 				frameInfo.sampleRate (Number): the sample rate (Hz)
	 * 				frameInfo.channels (Number): number of channels
	 * 				frameInfo.bitsPerSample (Number): bits per sample
	 * 				frameInfo.number (Number):  the number of the decoded sample
	 * 				frameInfo.crc (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 * 
	 * @param {Function} [error_callback_fn] OPTIONAL
	 * 				the error callback:
	 * 				<pre>
	 * 				error_callback_fn(errorCode: Number, errorMessage: String)
	 * 				
	 * 				where
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC        		An error in the stream caused the decoder to lose synchronization.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER       		The decoder encountered a corrupted frame header.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH   	The frame's data did not match the CRC in the footer.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM   	The decoder encountered reserved fields in use in the stream.
	 * 				</pre>
	 * 
	 * @param {Function} [metadata_callback_fn] OPTIONAL
	 * 				callback for receiving the metadata of the decoded PCM data:
	 * 				<pre>
	 * 				metadata_callback_fn(metadata: StreamMetadata)
	 * 
	 * 				metadata.min_blocksize (Number): the minimal block size (bytes)
	 * 				metadata.max_blocksize (Number): the maximal block size (bytes) 
	 * 				metadata.min_framesize (Number): the minimal frame size (bytes)
	 * 				metadata.max_framesize (Number): the maximal frame size (bytes)
	 * 				metadata.sampleRate (Number): the sample rate (Hz)
	 * 				metadata.channels (Number): the number of channels
	 * 				metadata.bitsPerSample (Number): bits per sample
	 * 				metadata.total_samples (Number): the total number of (decoded) samples
	 * 				metadata.md5sum (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	init_decoder_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, client_data){

		client_data = client_data|0;

		if(typeof read_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'read', read_callback_fn);
		
		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'write', write_callback_fn);
		
		var __error_callback_fn_ptr = 0;
		if(typeof error_callback_fn === 'function'){
			setCallback(decoder, 'error', error_callback_fn);
			__error_callback_fn_ptr = dec_error_fn_ptr;
		}
		
		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(decoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var init_status = Module.ccall(
				'FLAC__stream_decoder_init_stream', 'number',
				[ 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
				[
                   decoder,
                   dec_read_fn_ptr, 
                   0,// FLAC__StreamDecoderSeekCallback
                   0,// FLAC__StreamDecoderTellCallback
                   0,//	FLAC__StreamDecoderLengthCallback
                   0,//	FLAC__StreamDecoderEofCallback
                   dec_write_fn_ptr,
                   __metadata_callback_fn_ptr,
                   __error_callback_fn_ptr,
                   client_data
                ]
		);

		return init_status;
	},

	/**
	 * Encode / submit data for encoding.
	 * 
	 * This version allows you to supply the input data where the channels are interleaved into a 
	 * single array (i.e. channel0_sample0, channel1_sample0, ... , channelN_sample0, channel0_sample1, ...). 
	 * 
	 * The samples need not be block-aligned but they must be sample-aligned, i.e. the first value should be
	 * channel0_sample0 and the last value channelN_sampleM.
	 * 
	 * Each sample should be a signed integer, right-justified to the resolution set by bits-per-sample.
	 * 
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 * 
	 * 
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 * 
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 * 
	 * @param {TypedArray} buffer
	 * 				the audio data in a typed array with signed integers (and size according to the set bits-per-sample setting)
	 * 
	 * @param {number} num_of_samples
	 * 				the number of samples in buffer
	 * 
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process_interleaved: function(encoder, buffer, num_of_samples){
		// get the length of the data in bytes
		var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
		// console.log("DEBUG numBytes: " + numBytes);
		// malloc enough space for the data
		var ptr = Module._malloc(numBytes);
		// get a bytes-wise view on the newly allocated buffer
		var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
		// console.log("DEBUG heapBytes: " + heapBytes);
		// copy data into heapBytes
		heapBytes.set(new Uint8Array(buffer.buffer));
		var status = Module.ccall('FLAC__stream_encoder_process_interleaved', 'number',
				['number', 'number', 'number'],
				[encoder, heapBytes.byteOffset, num_of_samples]
		);
		Module._free(ptr);
		return status;
	},

	/**
	 * Decodes a single frame.
	 * 
	 * To check decoding progress, use #FLAC__stream_decoder_get_state().
	 * 
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 * 
	 * @returns {boolean} FALSE if an error occurred
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_single: Module.cwrap('FLAC__stream_decoder_process_single', 'number', ['number']),

	/**
	 * Decodes data until end of stream.
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @returns {boolean} FALSE if an error occurred
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_stream: Module.cwrap('FLAC__stream_decoder_process_until_end_of_stream', 'number', ['number']),
	
	/**
	 * Decodes data until end of metadata.
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @returns {boolean} false if any fatal read, write, or memory allocation error occurred (meaning decoding must stop), else true.
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_metadata: Module.cwrap('FLAC__stream_decoder_process_until_end_of_metadata', 'number', ['number']),

	/**
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @returns {number} the decoder state:
	 * <pre>
	 * 0	FLAC__STREAM_DECODER_SEARCH_FOR_METADATA:		The decoder is ready to search for metadata
	 * 1	FLAC__STREAM_DECODER_READ_METADATA:				The decoder is ready to or is in the process of reading metadata
	 * 2	FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC:		The decoder is ready to or is in the process of searching for the frame sync code
	 * 3	FLAC__STREAM_DECODER_READ_FRAME:				The decoder is ready to or is in the process of reading a frame
	 * 4	FLAC__STREAM_DECODER_END_OF_STREAM:				The decoder has reached the end of the stream
	 * 5	FLAC__STREAM_DECODER_OGG_ERROR:					An error occurred in the underlying Ogg layer
	 * 6	FLAC__STREAM_DECODER_SEEK_ERROR:				An error occurred while seeking. The decoder must be flushed with FLAC__stream_decoder_flush() or reset with FLAC__stream_decoder_reset() before decoding can continue
	 * 7	FLAC__STREAM_DECODER_ABORTED:					The decoder was aborted by the read callback
	 * 8	FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR:	An error occurred allocating memory. The decoder is in an invalid state and can no longer be used
	 * 9	FLAC__STREAM_DECODER_UNINITIALIZED:				The decoder is in the uninitialized state; one of the FLAC__stream_decoder_init_*() functions must be called before samples can be processed.
	 * </pre>
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_state: Module.cwrap('FLAC__stream_decoder_get_state', 'number', ['number']),
	
	/**
	 * 
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 * 
	 * @returns {number} the encoder state:
	 * <pre>
	 * 0	FLAC__STREAM_ENCODER_OK								The encoder is in the normal OK state and samples can be processed.
	 * 1	FLAC__STREAM_ENCODER_UNINITIALIZED					The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed.
	 * 2	FLAC__STREAM_ENCODER_OGG_ERROR						An error occurred in the underlying Ogg layer.
	 * 3	FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR			An error occurred in the underlying verify stream decoder; check FLAC__stream_encoder_get_verify_decoder_state().
	 * 4	FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA	The verify decoder detected a mismatch between the original audio signal and the decoded audio signal.
	 * 5	FLAC__STREAM_ENCODER_CLIENT_ERROR					One of the callbacks returned a fatal error.
	 * 6	FLAC__STREAM_ENCODER_IO_ERROR						An I/O error occurred while opening/reading/writing a file. Check errno.
	 * 7	FLAC__STREAM_ENCODER_FRAMING_ERROR					An error occurred while writing the stream; usually, the write_callback returned an error.
	 * 8	FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR		Memory allocation failed.
	 * </pre> 
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_state:  Module.cwrap('FLAC__stream_encoder_get_state', 'number', ['number']),
	
	/**
	 * Get if MD5 verification is enabled for decoder
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @returns {boolean} TRUE if MD5 verification is enabled
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_md5_checking: Module.cwrap('FLAC__stream_decoder_get_md5_checking', 'number', ['number']),
	
//	/** @returns {boolean} FALSE if the decoder is already initialized, else TRUE. */
//	FLAC__stream_decoder_set_md5_checking: Module.cwrap('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number']),
	
	/**
	 * Finish the encoding process.
	 * 
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 * 
	 * @returns {boolean} false if an error occurred processing the last frame; 
	 * 					 or if verify mode is set, there was a verify mismatch; else true.
	 * 					 If false, caller should check the state with FLAC__stream_encoder_get_state()
	 * 					 for more information about the error.
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
	/**
	 * Finish the decoding process.
	 * 
	 * The decoder can be reused, after initializing it again.
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @returns {boolean} false if MD5 checking is on AND a STREAMINFO block was available AND the MD5 signature in
	 * 						 the STREAMINFO block was non-zero AND the signature does not match the one computed by the decoder;
	 * 						 else true.
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_finish: Module.cwrap('FLAC__stream_decoder_finish', 'number', [ 'number' ]),
	/**
	 * Reset the decoder for reuse.
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @returns {boolean} true if successful
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_reset: Module.cwrap('FLAC__stream_decoder_reset', 'number', [ 'number' ]),
	/**
	 * Delete the encoder instance, and free up its resources.
	 * 
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_delete: function(encoder){
		this._clear_enc_cb(encoder);//<- remove callback references
		return Module.ccall('FLAC__stream_encoder_delete', 'number', [ 'number' ], [encoder]);
	},
	/**
	 * Delete the decoder instance, and free up its resources.
	 * 
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * 
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_delete: function(decoder){
		this._clear_dec_cb(decoder);//<- remove callback references
		return Module.ccall('FLAC__stream_decoder_delete', 'number', [ 'number' ], [decoder]);
	}

};//END: var _exported = {
return _exported;
})(typeof window !== 'undefined'? window : this);

if (typeof self !== "undefined" && self !== null){
	self.Flac = Flac; // make Flac accessible to other webworker scripts.
}

